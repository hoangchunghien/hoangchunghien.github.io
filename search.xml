<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Azure Fundamentals Achievement</title>
    <url>/2021/04/24/Azure-Fundamentals-achievement/</url>
    <content><![CDATA[<p><a href="https://www.credly.com/badges/a7507eae-db25-495e-a3df-30eb9053e389?source=linked_in_profile"><img src="/images/2021-04-24/001.jpeg"></a></p>
<p>Great engineers always keep on learning and improving knowledge, skills as well as new technologies. Recently, I have just achieved the Microsoft Certified Azure Fundamentals after one-month learning, which provides me the basic understanding of how to work with Microsoft Azure cloud-based solutions and services.</p>
<p>This achievement can open a new opportunity for my career as an software engineer, because nowadays, cloud service has been played the highly important role in digital age. That now everything is on the cloud leads to the demand of human resouces having experiences to build and operate the cloud systems, including networking, storage, compute, application support, and application development. Therefore, to me, the Microsoft Certified Azure Fundamentals is really vital and achieving it can attract more clients.</p>
<p>I started learning the course from 22 Mar 2021 on Microsoft Learn Center Website. After finishing 6 parts in the learning path section, candidates can get the certification once passing an exam registered online at Pearson VUE. It takes $55.00 for candidates in Vietnam. Then, I went to Pearson VUE center in District 1, Ho Chi Minh City, where I took the exam. The result was announced right after submiting the test. And, I passed :)</p>
<p>Last but not least, I would like to show my gratefullness to the company <a href="https://www.tpptechnology.com">TP&amp;P Technology</a> for big supporting, which provided me good studying conditions to achieve the goal. Keep on learning!!!</p>
]]></content>
      <categories>
        <category>Certification</category>
      </categories>
      <tags>
        <tag>Microsoft</tag>
        <tag>Azure</tag>
        <tag>Microsoft Certified</tag>
        <tag>Azure Fundamentals</tag>
      </tags>
  </entry>
  <entry>
    <title>Azure Administrator Associate achievement</title>
    <url>/2021/06/12/Azure-Administrator-achievement/</url>
    <content><![CDATA[<p><a href="https://www.credly.com/badges/cd4b0991-dc38-458b-a010-c91e1c3d6b1d"><img src="/images/2021-06-12/001.jpg"></a></p>
<p>After getting the first <code>Azure Fundamentals Certificate</code>, I went on studying the higher level to achieve this one as an Administrator Associate. I spent most of my free time to learn <a href="https://docs.microsoft.com/en-us/learn/certifications/azure-administrator/">Microsoft learning website</a> and to do the exercises for about a week, as soon as having full knowledge of the course.</p>
<p>Then I officially took an online exam at home due to the spreading of Covid-19 in the city. The exam lasted for 2 hours in a private quiet room, but to me, I just finished the test in within 1 hour. A check-in progress was required before the exam started (about 30 minutes), including capturing angles of the room, making sure that no sounds happened to disturb the exam, or else candidates could be considered to be fail.</p>
<p>The feeling of taking the online exam at home was pretty awesome and safe. I was confident to pass the test because I had had practiced many many times and learned from them, and you know what, I did it. I passed the exam! The result was announced as soon as the test was submitted, the certification was released in about 30 minutes later. I couldn't wait to publish it on muy Linkedin page! It showed that my studying method was right and useful, which could help me get the certification.</p>
]]></content>
      <categories>
        <category>Certification</category>
      </categories>
      <tags>
        <tag>Microsoft</tag>
        <tag>Azure</tag>
        <tag>Microsoft Certified</tag>
        <tag>Administrator</tag>
      </tags>
  </entry>
  <entry>
    <title>Azure DevOps Engineering Expert achievement</title>
    <url>/2021/06/13/Azure-DevOps-Expert-achievement/</url>
    <content><![CDATA[<p><a href="https://www.credly.com/badges/841717b5-747f-467d-bb68-071edb5ede22"><img src="/images/2021-06-12/002.jpg"></a></p>
<p>To be able to achieve <a href="https://docs.microsoft.com/en-us/learn/certifications/devops-engineer/">Microsoft Azure DevOps Expert Certification</a> you have to achieve <a href="https://docs.microsoft.com/en-us/learn/certifications/azure-administrator/">Azure Administrator Certification</a>. The responsibilities for the DevOps role include designing and implementing strategies for collaboration, code, infrastructure, source control, security, compliance, continuous integration, testing, delivery, monitoring, and feedback.</p>
<p>As part of my role, I have already been familiar with design and implement DevOps pipeline for automation deployment. So it somewhat easy to me to learn the course quickly. Just the <code>Microsoft DevOps Pipeline</code> is the new tool to me, it similar to <code>Gitlab Pipeline</code> or <code>Bitbucket Pipeline</code>. After a few days of practicing exercises, I decide to take the tests online due to the increasing of Covid-19. The process was the same as the last time I had taken the test for Administrator Associate certification. After an hour, I submitted the test and then the result was awesome. Yay, you got it, I passed!</p>
<p>I have felt very happy for what I have had achieved, I must say I'm so proud of myself hohoho. There will be other tests waiting for me to achieve in the near future, so keep following my blog for new updates! Thanks you guys!</p>
]]></content>
      <categories>
        <category>Certification</category>
      </categories>
      <tags>
        <tag>Microsoft</tag>
        <tag>Azure</tag>
        <tag>Microsoft Certified</tag>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>Azure Solution Architect Achievement</title>
    <url>/2021/07/03/Azure-Solution-Architect-Achievement/</url>
    <content><![CDATA[<p><a href="https://www.credly.com/badges/6edc9c29-1037-44f0-bc8a-a36749a57c8e"><img src="/images/2021-07-02/001.jpg"></a></p>
<p>Finally got it, after many days of learning from <a href="https://docs.microsoft.com/en-us/learn/certifications/azure-solutions-architect/">Microsoft Learning</a>.</p>
<p>To be able to earn this certification you should have advanced experience and knowledge of IT operations, including networking, virtualization, identity, security, business continuity, disaster recovery, data platform, budgeting, and governance. In addition, you should have expert-level skills in Azure administration and have experience with development and DevOps processes.</p>
]]></content>
      <categories>
        <category>Certification</category>
      </categories>
      <tags>
        <tag>Microsoft</tag>
        <tag>Azure</tag>
        <tag>Microsoft Certified</tag>
        <tag>DevOps</tag>
        <tag>Solution Architect</tag>
      </tags>
  </entry>
  <entry>
    <title>Distributed Tasks Processing With Google Pub/Sub</title>
    <url>/2020/12/12/Distributed-Tasks-Processing-With-Google-Pub-Sub/</url>
    <content><![CDATA[<h1 id="what-is-pubsub">What is Pub/Sub?</h1>
<blockquote><p>Pub/Sub is an asynchronous messaging service that decouples services that produce events from services that process events. You can use Pub/Sub as messaging-oriented middleware or event ingestion and delivery for streaming analytics pipelines. Pub/Sub offers durable message storage and real-time message delivery with high availability and consistent performance at scale. Pub/Sub servers run in all Google Cloud regions around the world.</p>
<footer><strong>Google Cloud</strong><cite><a href="https://cloud.google.com/pubsub/docs/overview">cloud.google.com/pubsub/docs/overview</a></cite></footer></blockquote>
<h1 id="core-concepts">Core concepts</h1>
<ul>
<li><strong>Topic</strong>: A named resource to which messages are sent by publishers.</li>
<li><strong>Subscription</strong>: A named resource representing the stream of messages from a single, specific topic, to be delivered to the subscribing application.</li>
<li><strong>Message</strong>: The combination of data and (optional) attributes that a publisher sends to a topic and is eventually delivered to subscribers.</li>
<li><strong>Message attribute</strong>: A key-value pair that a publisher can define for a message. For example, key iana.org/language_tag and value en could be added to messages to mark them as readable by an English-speaking subscriber.</li>
</ul>
<h1 id="install">Install</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install google-cloud-pubsub</span><br></pre></td></tr></table></figure>
<h1 id="task-dispatcher-publisher">Task Dispatcher (Publisher)</h1>
<p>In this example, the publisher will act as a task distributer.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> google.cloud <span class="keyword">import</span> pubsub_v1</span><br><span class="line"></span><br><span class="line">project_id = os.environ.get(<span class="string">&#x27;GCP_PROJECT_ID&#x27;</span>)</span><br><span class="line">topic_id = os.environ.get(<span class="string">&#x27;GCP_PUBSUB_TOPIC_ID&#x27;</span>)</span><br><span class="line"></span><br><span class="line">publisher = pubsub_v1.PublisherClient()</span><br><span class="line"><span class="comment"># The `topic_path` method creates a fully qualified identifier</span></span><br><span class="line"><span class="comment"># in the form `projects/&#123;project_id&#125;/topics/&#123;topic_id&#125;`</span></span><br><span class="line">topic_path = publisher.topic_path(project_id, topic_id)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    data = <span class="string">&quot;Message number &#123;&#125;&quot;</span>.<span class="built_in">format</span>(n)</span><br><span class="line">    <span class="comment"># Data must be a bytestring</span></span><br><span class="line">    data = data.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="comment"># When you publish a message, the client returns a future.</span></span><br><span class="line">    future = publisher.publish(topic_path, data)</span><br><span class="line">    print(future.result())</span><br><span class="line"></span><br><span class="line">print(<span class="string">f&quot;Published messages to <span class="subst">&#123;topic_path&#125;</span>.&quot;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="task-workers-subscribers">Task Workers (Subscribers)</h1>
<p>Multiple workers will subscribe to a same subscriptions to receive difference tasks from a same publisher.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> google.cloud <span class="keyword">import</span> pubsub_v1</span><br><span class="line"></span><br><span class="line">project_id = os.environ.get(<span class="string">&quot;GCP_PROJECT_ID&quot;</span>)</span><br><span class="line">subscription_id = os.environ.get(<span class="string">&quot;GCP_PUBSUB_SUBSCRIPTION_ID&quot;</span>)</span><br><span class="line"></span><br><span class="line">subscriber = pubsub_v1.SubscriberClient()</span><br><span class="line">subscription_path = subscriber.subscription_path(project_id, subscription_id)</span><br><span class="line"></span><br><span class="line">NUM_MESSAGES = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Wrap the subscriber in a &#x27;with&#x27; block to automatically call close() to</span></span><br><span class="line"><span class="comment"># close the underlying gRPC channel when done.</span></span><br><span class="line"><span class="keyword">with</span> subscriber:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># The subscriber pulls a specific number of messages.</span></span><br><span class="line">        print(<span class="string">f&quot;Waiting for a message...&quot;</span>)</span><br><span class="line">        response = subscriber.pull(</span><br><span class="line">            request=&#123;<span class="string">&quot;subscription&quot;</span>: subscription_path, <span class="string">&quot;max_messages&quot;</span>: NUM_MESSAGES&#125;</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> response:</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        ack_ids = []</span><br><span class="line">        <span class="keyword">for</span> received_message <span class="keyword">in</span> response.received_messages:</span><br><span class="line">            print(<span class="string">f&quot;Received: <span class="subst">&#123;received_message.message.data&#125;</span>.&quot;</span>)</span><br><span class="line">            ack_ids.append(received_message.ack_id)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Acknowledges the received messages so they will not be sent again.</span></span><br><span class="line">        subscriber.acknowledge(</span><br><span class="line">            request=&#123;<span class="string">&quot;subscription&quot;</span>: subscription_path, <span class="string">&quot;ack_ids&quot;</span>: ack_ids&#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        print(</span><br><span class="line">            <span class="string">f&quot;Received and acknowledged <span class="subst">&#123;<span class="built_in">len</span>(response.received_messages)&#125;</span> messages from <span class="subst">&#123;subscription_path&#125;</span>.&quot;</span></span><br><span class="line">        )</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Google Cloud</category>
        <category>Pub/Sub</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Pub/Sub</tag>
        <tag>GCP</tag>
        <tag>Google Cloud</tag>
        <tag>Distributed Processing</tag>
        <tag>Minibatch Processing</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Object Level Permission Template</title>
    <url>/2021/01/21/Django-Object-Level-Permission-Templage/</url>
    <content><![CDATA[<p>A template to guide you how to setup a Django Project with Object Level Permission.</p>
<h2 id="authentication">1. Authentication</h2>
<h3 id="packages">1.1. Packages</h3>
<ul>
<li><p><a href="https://djoser.readthedocs.io/">Djoser</a> provide commonly use authentication functions such as: Sign Up, Login, Change Password, Forgot Password, User Account Activation, User Profile</p></li>
<li><p><a href="https://django-rest-framework-simplejwt.readthedocs.io/">Simple JWT</a> provide Json Web Token authentication method.</p></li>
<li><p><a href="https://github.com/django-guardian/django-guardian">Django Guardian</a> provide object level permission management.</p></li>
</ul>
<h3 id="configuration">1.2. Configuration</h3>
<ul>
<li>JWT authentication is configured in</li>
</ul>
<p><code>core/settings.py</code> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Application definition</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    (...),</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;djoser&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;guardian&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">AUTHENTICATION_BACKENDS = (</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.backends.ModelBackend&#x27;</span>, <span class="comment"># default</span></span><br><span class="line">    <span class="string">&#x27;guardian.backends.ObjectPermissionBackend&#x27;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Configuration for Django Rest Framework</span></span><br><span class="line"><span class="comment"># https://www.django-rest-framework.org/</span></span><br><span class="line"></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: (</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Simple JWT Authentication</span></span><br><span class="line">        <span class="comment"># https://django-rest-framework-simplejwt.readthedocs.io/</span></span><br><span class="line">        <span class="string">&#x27;rest_framework_simplejwt.authentication.JWTAuthentication&#x27;</span>,</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>core/urls.py</code> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    (...),</span><br><span class="line"></span><br><span class="line">    path(<span class="string">&#x27;auth/&#x27;</span>, include(<span class="string">&#x27;djoser.urls&#x27;</span>)),</span><br><span class="line">    path(<span class="string">&#x27;auth/&#x27;</span>, include(<span class="string">&#x27;djoser.urls.jwt&#x27;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<h3 id="data-model">1.3. Data Model</h3>
<h4 id="using-a-custom-model">1.3.1. Using a custom model</h4>
<p>If you’re starting a new project, it’s highly recommended to set up a custom user model, even if the default User model is sufficient for you. This model behaves identically to the default user model, but you’ll be able to customize it in the future if the need arises.</p>
<p><code>core/user/models.py</code> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">AbstractUser</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p><code>core/settings.py</code> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AUTH_USER_MODEL = <span class="string">&#x27;user.User&#x27;</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    (...),</span><br><span class="line">    <span class="string">&#x27;core.user&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<h4 id="reusable-apps-and-auth_user_model">1.3.2. Reusable apps and AUTH_USER_MODEL</h4>
<p>Reusable apps shouldn’t implement a custom user model. A project may use many apps, and two reusable apps that implemented a custom user model couldn’t be used together. If you need to store per user information in your app, use a <code>ForeignKey</code> or <code>OneToOneField</code> to <code>settings.AUTH_USER_MODEL</code> as described below.</p>
<h5 id="referencing-the-user-model">Referencing the User model</h5>
<p>If you reference <code>User</code> directly (for example, by referring to it in a foreign key), your code will not work in projects where the <code>AUTH_USER_MODEL</code> setting has been changed to a different user model.</p>
<p>Instead of referring to User directly, you should reference the user model using <code>django.contrib.auth.get_user_model()</code>. This method will return the currently active user model – the custom user model if one is specified, or User otherwise.</p>
<p>When you define a <code>foreign key</code> or <code>many-to-many</code> relations to the user model, you should specify the custom model using the <code>AUTH_USER_MODEL</code> setting. For example:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    author = models.ForeignKey(</span><br><span class="line">        settings.AUTH_USER_MODEL,</span><br><span class="line">        on_delete=models.CASCADE,</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>
<h3 id="declare-model-permissions">1.4. Declare model permissions</h3>
<h4>
1.4.1 <a href="https://docs.djangoproject.com/en/3.0/topics/auth/default/#permissions-and-authorization">Django builtin permission</a>
</h4>
<p>Django comes with a built-in permissions system. It provides a way to assign permissions to specific users and groups of users.</p>
<p>When <code>django.contrib.auth</code> is listed in your <strong>INSTALLED_APPS</strong> setting, it will ensure that four default permissions – <code>add</code>, <code>change</code>, <code>delete</code>, and <code>view</code> – are created for each Django model defined in one of your installed applications.</p>
<h4>
1.4.2 Declare new permission
</h4>
<p>Define directly inside model <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Job</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    (...)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        permissions = [(<span class="string">&#x27;review_job&#x27;</span>, <span class="string">&#x27;Can review job (approve or deny)&#x27;</span>)]</span><br></pre></td></tr></table></figure></p>
Define programmatically <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> Job</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> Permission</span><br><span class="line"><span class="keyword">from</span> django.contrib.contenttypes.models <span class="keyword">import</span> ContentType</span><br><span class="line"></span><br><span class="line">content_type = ContentType.objects.get_for_model(Job)</span><br><span class="line">permission = Permission.objects.create(</span><br><span class="line">    codename=<span class="string">&#x27;review_job&#x27;</span>,</span><br><span class="line">    name=<span class="string">&#x27;Can review job (approve or deny)&#x27;</span>,</span><br><span class="line">    content_type=content_type,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h4>
1.4.3 Assign permission to user/group
</h4>
<p><strong>Global Permission</strong> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt; <span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_user_model</span><br><span class="line">&gt;&gt; <span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> Group</span><br><span class="line">&gt;&gt; User = get_user_model()</span><br><span class="line"></span><br><span class="line">&gt;&gt; jack = User.objects.create_user(<span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;jack@example.com&#x27;</span>, <span class="string">&#x27;topsecretagentjack&#x27;</span>)</span><br><span class="line">&gt;&gt; jack.has_perm(<span class="string">&#x27;auth.change_group&#x27;</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="keyword">from</span> guardian.shortcuts <span class="keyword">import</span> assign_perm</span><br><span class="line">&gt;&gt; assign_perm(<span class="string">&#x27;auth.change_group&#x27;</span>, jack)</span><br><span class="line">&gt;&gt; jack.has_perm(<span class="string">&#x27;auth.change_group&#x27;</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></p>
<p><strong>Object Permission</strong> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt; <span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_user_model</span><br><span class="line">&gt;&gt; <span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> Group</span><br><span class="line">&gt;&gt; User = get_user_model()</span><br><span class="line"></span><br><span class="line">&gt;&gt; jack = User.objects.create_user(<span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;jack@example.com&#x27;</span>, <span class="string">&#x27;topsecretagentjack&#x27;</span>)</span><br><span class="line">&gt;&gt; admins = Group.objects.create(name=<span class="string">&#x27;admins&#x27;</span>)</span><br><span class="line">&gt;&gt; jack.has_perm(<span class="string">&#x27;auth.change_group&#x27;</span>, admins)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="keyword">from</span> guardian.shortcuts <span class="keyword">import</span> assign_perm</span><br><span class="line">&gt;&gt; assign_perm(<span class="string">&#x27;auth.change_group&#x27;</span>, jack, admins)</span><br><span class="line">&gt;&gt; jack.has_perm(<span class="string">&#x27;auth.change_group&#x27;</span>, admins)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></p>
<h4>
1.4.4 Retrieve user permitted objects
</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt; <span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_user_model</span><br><span class="line">&gt;&gt; <span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> Group</span><br><span class="line">&gt;&gt; User = get_user_model()</span><br><span class="line"></span><br><span class="line">&gt;&gt; jack = User.objects.create_user(<span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;jack@example.com&#x27;</span>, <span class="string">&#x27;topsecretagentjack&#x27;</span>)</span><br><span class="line">&gt;&gt; admins = Group.objects.create(name=<span class="string">&#x27;admins&#x27;</span>)</span><br><span class="line">&gt;&gt; leaders = Group.objects.create(name=<span class="string">&#x27;leaders&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="keyword">from</span> guardian.shortcuts <span class="keyword">import</span> assign_perm, get_objects_for_user</span><br><span class="line">&gt;&gt; get_objects_for_user(jack, perms=[<span class="string">&#x27;auth.change_group&#x27;</span>],  accept_global_perms=<span class="literal">True</span>)</span><br><span class="line">&lt;QuerySet []&gt;</span><br><span class="line"></span><br><span class="line">&gt;&gt; assign_perm(<span class="string">&#x27;auth.change_group&#x27;</span>, jack, admins)</span><br><span class="line">&gt;&gt; get_objects_for_user(jack, perms=[<span class="string">&#x27;auth.change_group&#x27;</span>],  accept_global_perms=<span class="literal">True</span>)</span><br><span class="line">&lt;QuerySet [&lt;Group: admins&gt;]&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Let try with global permission</span></span><br><span class="line">&gt;&gt; assign_perm(<span class="string">&#x27;auth.change_group&#x27;</span>, jack)</span><br><span class="line">&gt;&gt; get_objects_for_user(jack, perms=[<span class="string">&#x27;auth.change_group&#x27;</span>],  accept_global_perms=<span class="literal">True</span>)</span><br><span class="line">&lt;QuerySet [&lt;Group: admins&gt;, &lt;Group: level1&gt;]&gt;</span><br></pre></td></tr></table></figure>
<h2 id="database">2. Database</h2>
<h3 id="packages-1">2.1. Packages</h3>
<ul>
<li><a href="https://github.com/jacobian/dj-database-url">dj-database-url</a> database connection string parser that is helpful to parse database configuration in a connection string style.</li>
</ul>
<h3 id="supported-url-connection-schema">2.2. Supported URL connection schema</h3>
<table>
<colgroup>
<col style="width: 27%" />
<col style="width: 55%" />
<col style="width: 17%" />
</colgroup>
<thead>
<tr class="header">
<th>Engine</th>
<th>Django Backend</th>
<th>URL</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>SQLite</td>
<td><code>django.db.backends.sqlite3</code></td>
<td><code>sqlite:///PATH</code></td>
</tr>
<tr class="even">
<td>PostgreSQL</td>
<td><code>django.db.backends.postgresql</code></td>
<td><code>postgres://USER:PASSWORD@HOST:PORT/NAME</code></td>
</tr>
<tr class="odd">
<td>PostGIS</td>
<td><code>django.contrib.gis.db.backends.postgis</code></td>
<td><code>postgis://USER:PASSWORD@HOST:PORT/NAME</code></td>
</tr>
<tr class="even">
<td>MSSQL</td>
<td><code>sql_server.pyodbc</code></td>
<td><code>mssql://USER:PASSWORD@HOST:PORT/NAME</code></td>
</tr>
<tr class="odd">
<td>MySQL</td>
<td><code>django.db.backends.mysql</code></td>
<td><code>mysql://USER:PASSWORD@HOST:PORT/NAME</code></td>
</tr>
<tr class="even">
<td>MySQL (GIS)</td>
<td><code>django.contrib.gis.db.backends.mysql</code></td>
<td><code>mysqlgis://USER:PASSWORD@HOST:PORT/NAME</code></td>
</tr>
<tr class="odd">
<td>Oracle</td>
<td><code>django.db.backends.oracle</code></td>
<td><code>oracle://USER:PASSWORD@HOST:PORT/NAME</code></td>
</tr>
<tr class="even">
<td>Oracle (GIS)</td>
<td><code>django.contrib.gis.db.backends.oracle</code></td>
<td><code>oraclegis://USER:PASSWORD@HOST:PORT/NAME</code></td>
</tr>
<tr class="odd">
<td>Redshift</td>
<td><code>django_redshift_backend</code></td>
<td><code>redshift://USER:PASSWORD@HOST:PORT/NAME</code></td>
</tr>
<tr class="even">
<td>SpatiaLite</td>
<td><code>django.contrib.gis.db.backends.spatialite</code></td>
<td><code>spatialite:///PATH</code></td>
</tr>
</tbody>
</table>
<h3 id="configuration-1">2.3. Configuration</h3>
<p>This is configuration for the database, the default database will use sqlite3 for simple to quick to run in development mode. This may conflict with database you run on production mode because some of the funtion sqlite may not support. It is recommended to config the database in development mode have the same database system you run on production. To change the database system, config the environment variable <code>DATABASE_URL</code></p>
<p><code>core/settings.py</code> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> dj_database_url</span><br><span class="line"></span><br><span class="line"><span class="comment"># Database</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/3.0/ref/settings/#databases</span></span><br><span class="line"></span><br><span class="line">DATABASE_URL = os.environ.get(<span class="string">&#x27;DATABASE_URL&#x27;</span>, <span class="string">&#x27;sqlite:///&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.path.join(BASE_DIR, <span class="string">&#x27;db.sqlite3&#x27;</span>)))</span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: dj_database_url.config(default=DATABASE_URL)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h2 id="api-development">3. API Development</h2>
<h3 id="packages-2">3.1. Packages</h3>
<ul>
<li><a href="https://django-rest-framework-json-api.readthedocs.io/en/stable/">djangorestframework-jsonapi</a> provide the implementation of the <a href="http://jsonapi.org/format/">JSON API format specification</a></li>
</ul>
<h3 id="serializers">3.2. Serializers</h3>
<blockquote>
<p>TODO What is serializers, how to code one?</p>
</blockquote>
<h3 id="views">3.3. Views</h3>
<blockquote>
<p>TODO What is views, how to code one?</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>Template</tag>
        <tag>Django Guardian</tag>
        <tag>Djoser</tag>
        <tag>Object Level Permission</tag>
      </tags>
  </entry>
  <entry>
    <title>How to find a website IP behind CloudFlare</title>
    <url>/2020/12/26/How-to-find-a-website-IP-behide-CloudFlare/</url>
    <content><![CDATA[<p>CloudFlare provides high security for the target website to hide their real server IP address. Make it harder for the hacker to attack the website real server. But it doesn't mean it is impossible. Let's find it out on one website - <code>https://www.g2.com</code> - use CloudFlare to hide it IP address.</p>
<h2 id="find-dns-history-records">1. Find DNS history records</h2>
<p>I use <a href="https://securitytrails.com/">SecurityTrails</a> to find the domain DNS history. <img src="/images/2020-12-26/001.png"></p>
<h2 id="digging-deeper">2. Digging deeper</h2>
<p>Now use the <code>dig</code> command to reveal the DNS history on <code>ns4.ogilvy.com</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> dig @ns4.ogilvy.com www.g2.com</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.16.1-Ubuntu &lt;&lt;&gt;&gt; @ns4.ogilvy.com www.g2.com                                                                </span><br><span class="line">; (1 server found)                                                                                                      </span><br><span class="line">;; global options: +cmd                                                                                                 </span><br><span class="line">;; Got answer:                                                                                                          </span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 24883                                                               </span><br><span class="line">;; flags: qr aa rd; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1                                                    </span><br><span class="line">;; WARNING: recursion requested but not available                                                                                                                                                                                               </span><br><span class="line">;; OPT PSEUDOSECTION:                                                                                                   </span><br><span class="line">; EDNS: version: 0, flags:; udp: 1220                                                                                   </span><br><span class="line">; COOKIE: a7c6382d3646792f30fe538c5fe6e580eb39a7455513923d (good)                                                       </span><br><span class="line">;; QUESTION SECTION:                                                                                                    </span><br><span class="line">;www.g2.com.                    IN      A                                                                                                                                                                                                       </span><br><span class="line">;; ANSWER SECTION:                                                                                                      </span><br><span class="line">www.g2.com.             3600    IN      CNAME   www.geometry.com.                                                       </span><br><span class="line">www.geometry.com.       600     IN      CNAME   awseb-AWSEB-PZBDPV2T34UN-1188684902.eu-west-1.elb.amazonaws.com.                                                                                                                                </span><br><span class="line">;; Query time: 254 msec                                                                                                 </span><br><span class="line">;; SERVER: 199.20.46.10#53(199.20.46.10)                                                                                </span><br><span class="line">;; WHEN: Sat Dec 26 14:25:53 +07 2020                                                                                   </span><br><span class="line">;; MSG SIZE  rcvd: 168   </span><br></pre></td></tr></table></figure>
<p>Look like their website is hosting on <code>awseb-AWSEB-PZBDPV2T34UN-1188684902.eu-west-1.elb.amazonaws.com</code> domain.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nslookup awseb-AWSEB-PZBDPV2T34UN-1188684902.eu-west-1.elb.amazonaws.com</span><br><span class="line"></span><br><span class="line">Server:         8.8.8.8</span><br><span class="line">Address:        8.8.8.8#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">Name:   awseb-AWSEB-PZBDPV2T34UN-1188684902.eu-west-1.elb.amazonaws.com</span><br><span class="line">Address: 34.xxx.xxx.xx</span><br><span class="line">Name:   awseb-AWSEB-PZBDPV2T34UN-1188684902.eu-west-1.elb.amazonaws.com</span><br><span class="line">Address: 18.xxx.xxx.xx</span><br><span class="line">Name:   awseb-AWSEB-PZBDPV2T34UN-1188684902.eu-west-1.elb.amazonaws.com</span><br><span class="line">Address: 54.xxx.xx.xxx</span><br></pre></td></tr></table></figure>
<p>Let's check the ip <code>34.xxx.xxx.xx</code></p>
<ul>
<li>Using <code>curl</code></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> curl -i -H &quot;Host: www.g2.com&quot; 34.xxx.xxx.xx</span><br><span class="line"></span><br><span class="line">Server: awselb/2.0</span><br><span class="line">Date: Sat, 26 Dec 2020 08:40:34 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 134</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Location: https://www.g2.com:443/</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;301 Moved Permanently&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;301 Moved Permanently&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>Using <code>Postman</code> <img src="/images/2020-12-26/002.png"></li>
</ul>
<p>Hmm, look like we found the correct website IP address <code>34.x.x.x</code>. The host force all requests to redirect to <code>www.g2.com</code> which is through CloudFlare. Or maybe we need some special headers to be able to bypass it security checking.</p>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>Security</tag>
        <tag>Hacking</tag>
        <tag>Networking</tag>
      </tags>
  </entry>
  <entry>
    <title>How to teach computer to play Tictactoe</title>
    <url>/2021/03/14/How-to-tech-computer-to-play-Tictactoe/</url>
    <content><![CDATA[<p>What make people become good game players? They get the game instruction, start practicing and then learn from failure. How about a computer? Can we train it to play a game? The answer is absolutely! And the process of teaching or training the computer to play game is super interesting. This post is written to guide you, step by step, to create your own Game AI that is able to learn to play this game without any hardcoded rules. Let's try teaching the computer yourself, after about a hundred thousands episodes, it can become expert that you can hardly win. In addition, if you would like to know more how it actually works, keep scrolling down to read further til the end of the post.</p>
<iframe src="https://tictactoe.kodelike.art/" width="100%" height="920px" style="border:1px dashed black;">
</iframe>
<h1 id="how-is-it-working">1. How is it working?</h1>
<p>The computer learns by interacting with the game enviroment. Then it observes how the game environment changes, leading to its reward. By playing many many times, it gets the idea of receiving as many good rewards as possible. This type of learning is called <a href="https://en.wikipedia.org/wiki/Reinforcement_learning">Reinforcement Learning</a>.</p>
<p>If you want to learn more about it, there is a free ebook you should read, <a href="https://web.stanford.edu/class/psych209/Readings/SuttonBartoIPRLBook2ndEd.pdf">Reinforcement Learning, Richard S. Sutton and Andrew G. Barto</a>.</p>
<p><img src="/images/2021-03-14/001.svg" /></p>
<p>Next, I'll walk you through the three algorithms and how to implement them.</p>
<ul>
<li>Monte Carlo</li>
<li>SARSA</li>
<li>Q-Learning</li>
</ul>
<p>Before the algorithms can interact with the game environment, we must have the game enviroment implemented first.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* game.js */</span></span><br><span class="line"><span class="keyword">import</span> &#123; every &#125; <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> X = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> O = <span class="string">&#x27;O&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> EMPTY = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> initGame = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    turn: X,</span><br><span class="line">    winner: <span class="literal">null</span>,</span><br><span class="line">    gameover: <span class="literal">false</span>,</span><br><span class="line">    board: [EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> move = <span class="function">(<span class="params">game, location</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; turn, board &#125; = game;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> validMoves = getValidMoves(board);</span><br><span class="line">  <span class="keyword">if</span> (!validMoves.includes(location)) &#123;</span><br><span class="line">    <span class="keyword">return</span> game;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> nextState = [...board];</span><br><span class="line">  nextState[location] = turn;</span><br><span class="line">  turn = turn === X ? O : X;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> winner = checkWinner(nextState);</span><br><span class="line">  <span class="keyword">const</span> gameover = checkGameover(nextState);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    turn,</span><br><span class="line">    winner,</span><br><span class="line">    gameover,</span><br><span class="line">    board: nextState</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getValidMoves = <span class="function">(<span class="params">board</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> validMoves = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (board[i] === EMPTY) validMoves.push(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> validMoves;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> checkWinner = <span class="function">(<span class="params">board</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> lines = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>],</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lines.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> [a, b, c] = lines[i];</span><br><span class="line">    <span class="keyword">if</span> (board[a] !== EMPTY &amp;&amp; board[a] === board[b] &amp;&amp; board[a] === board[c]) &#123;</span><br><span class="line">      <span class="keyword">return</span> board[a];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> checkGameover = <span class="function">(<span class="params">board</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> every(board, <span class="function"><span class="params">it</span> =&gt;</span> it !== EMPTY) || !!checkWinner(board);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> boardToString = <span class="function">(<span class="params">board</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> board.join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> calculateReward = <span class="function">(<span class="params">game, player</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; gameover, winner &#125; = game;</span><br><span class="line">  <span class="keyword">if</span> (!gameover) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!winner) &#123;</span><br><span class="line">      <span class="comment">// Reward for a draw game</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (winner === player) &#123;</span><br><span class="line">      <span class="comment">// Reward for win</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Reward for lose</span></span><br><span class="line">      <span class="keyword">return</span> -<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="monte-carlo">2. Monte Carlo</h1>
<h2 id="the-algorithm">The algorithm</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Initialize, for all s ∈ S, a ∈ A(s): </span><br><span class="line">    Q(s, a) ← arbitrary</span><br><span class="line">    π(s) ← arbitrary</span><br><span class="line">    Returns(s, a) ← empty list</span><br><span class="line"></span><br><span class="line">Repeat forever:</span><br><span class="line">    Choose S0 ∈ S and A0 ∈ A(S0) s.t. all pairs have probability &gt; 0 </span><br><span class="line">    Generate an episode starting from S0,A0, following π</span><br><span class="line">    For each pair s, a appearing in the episode:</span><br><span class="line">        G ← return following the first occurrence of s, a </span><br><span class="line">        Append G to Returns(s, a)</span><br><span class="line">        Q(s, a) ← average(Returns(s, a))</span><br><span class="line">    For each s in the episode: </span><br><span class="line">        π(s) ← argmax(Q(s, a))</span><br></pre></td></tr></table></figure>
<h2 id="implementation">Implementation</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* MonteCarloAgent.js */</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">MorteCarloAgent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">&#123; epsilon = <span class="number">0.1</span>, discount = <span class="number">0.9</span>, player = O &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.epsilon = epsilon;</span><br><span class="line">    <span class="built_in">this</span>.discount = discount;</span><br><span class="line">    <span class="built_in">this</span>.episode = [];</span><br><span class="line">    <span class="built_in">this</span>.player = player;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.Q = <span class="keyword">new</span> <span class="built_in">Proxy</span>(</span><br><span class="line">      &#123;&#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        get: <span class="function">(<span class="params">target, name</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (!(name <span class="keyword">in</span> target)) &#123;</span><br><span class="line">            target[name] = range(<span class="number">0</span>, <span class="number">9</span>, <span class="number">0.0</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> target[name];</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.returnSums = <span class="keyword">new</span> <span class="built_in">Proxy</span>(</span><br><span class="line">      &#123;&#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        get: <span class="function">(<span class="params">target, name</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (!(name <span class="keyword">in</span> target)) &#123;</span><br><span class="line">            target[name] = range(<span class="number">0</span>, <span class="number">9</span>, <span class="number">0.0</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> target[name];</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.returnCounts = <span class="keyword">new</span> <span class="built_in">Proxy</span>(</span><br><span class="line">      &#123;&#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        get: <span class="function">(<span class="params">target, name</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (!(name <span class="keyword">in</span> target)) &#123;</span><br><span class="line">            target[name] = range(<span class="number">0</span>, <span class="number">9</span>, <span class="number">0.0</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> target[name];</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  policy = <span class="function">(<span class="params">game</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; board &#125; = game;</span><br><span class="line">    <span class="keyword">const</span> validMoves = getValidMoves(board);</span><br><span class="line">    <span class="keyword">const</span> boardString = boardToString(board);</span><br><span class="line">    <span class="keyword">let</span> A = range(<span class="number">0</span>, <span class="number">9</span>, <span class="number">0.0</span>);</span><br><span class="line">    <span class="keyword">const</span> cloned = clone(<span class="built_in">this</span>.Q[boardString]);</span><br><span class="line">    <span class="keyword">const</span> pulled = pullAt(cloned, validMoves);</span><br><span class="line">    <span class="keyword">const</span> bestScore = max(pulled);</span><br><span class="line">    <span class="keyword">const</span> bestAction = validMoves[pulled.indexOf(bestScore)];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; validMoves.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> a = validMoves[i];</span><br><span class="line">      A[a] = <span class="built_in">this</span>.epsilon / validMoves.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (validMoves.includes(bestAction)) &#123;</span><br><span class="line">      A[bestAction] += <span class="number">1.0</span> - <span class="built_in">this</span>.epsilon;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> someAction = sample(validMoves);</span><br><span class="line">      A[someAction] += <span class="number">1.0</span> - <span class="built_in">this</span>.epsilon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  learn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> memory = <span class="built_in">this</span>.episode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (memory.length &gt; <span class="number">0</span> &amp;&amp; memory[memory.length - <span class="number">1</span>][<span class="number">0</span>].gameover) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; memory.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> record = memory[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> state = record[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">const</span> action = record[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> G = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> discount = <span class="built_in">this</span>.discount;</span><br><span class="line">        <span class="keyword">const</span> stateString = boardToString(state.board);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; memory.length; j++) &#123;</span><br><span class="line">          <span class="keyword">const</span> nextRecord = memory[j];</span><br><span class="line">          <span class="keyword">const</span> nextState = nextRecord[<span class="number">0</span>];</span><br><span class="line">          <span class="keyword">const</span> reward = calculateReward(nextState, <span class="built_in">this</span>.player);</span><br><span class="line">          G += reward * discount;</span><br><span class="line">          discount = discount * <span class="built_in">this</span>.discount;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.returnSums[stateString][action] += G;</span><br><span class="line">        <span class="built_in">this</span>.returnCounts[stateString][action] += <span class="number">1.0</span>;</span><br><span class="line">        <span class="built_in">this</span>.Q[stateString][action] =</span><br><span class="line">          <span class="built_in">this</span>.returnSums[stateString][action] /</span><br><span class="line">          <span class="built_in">this</span>.returnCounts[stateString][action];</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  observe = <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.episode.push([state, action]);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  newEpisode = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.episode = [];</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="sarsa">3. SARSA</h1>
<h2 id="the-algorithm-1">The algorithm</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Initialize Q(s, a), ∀s ∈ S, a ∈ A(s), arbitrarily, and Q(terminal-state, ·) &#x3D; 0 </span><br><span class="line">Repeat (for each episode):</span><br><span class="line">    Initialize S</span><br><span class="line">    Choose A from S using policy derived from Q (e.g., ε-greedy) </span><br><span class="line">    Repeat (for each step of episode):</span><br><span class="line">        Take action A, observe R, S′</span><br><span class="line">        Choose A′ from S′ using policy derived from Q (e.g., ε-greedy) </span><br><span class="line">        Q(S, A) ← Q(S, A) + α[R + γQ(S′, A′) − Q(S, A)]</span><br><span class="line">        S ← S′; A ← A′;</span><br><span class="line">    until S is terminal</span><br></pre></td></tr></table></figure>
<h2 id="implementation-1">Implementation</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* SarsaAgent.js */</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">SarsaAgent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">&#123; epsilon = <span class="number">0.1</span>, discount = <span class="number">0.9</span>, alpha = <span class="number">0.01</span>, player = O &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.epsilon = epsilon;</span><br><span class="line">    <span class="built_in">this</span>.discount = discount;</span><br><span class="line">    <span class="built_in">this</span>.alpha = alpha;</span><br><span class="line">    <span class="built_in">this</span>.player = player;</span><br><span class="line">    <span class="built_in">this</span>.episode = [];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>._Q = &#123;&#125;;</span><br><span class="line">    <span class="built_in">this</span>.Q = <span class="keyword">new</span> <span class="built_in">Proxy</span>(<span class="built_in">this</span>._Q, &#123;</span><br><span class="line">      get: <span class="function">(<span class="params">target, name</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(name <span class="keyword">in</span> target)) &#123;</span><br><span class="line">          target[name] = range(<span class="number">0</span>, <span class="number">9</span>, <span class="number">0.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> target[name];</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  policy = <span class="function">(<span class="params">game</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; board &#125; = game;</span><br><span class="line">    <span class="keyword">const</span> validMoves = getValidMoves(board);</span><br><span class="line">    <span class="keyword">const</span> boardString = boardToString(board);</span><br><span class="line">    <span class="keyword">let</span> A = range(<span class="number">0</span>, <span class="number">9</span>, <span class="number">0.0</span>);</span><br><span class="line">    <span class="keyword">const</span> cloned = clone(<span class="built_in">this</span>.Q[boardString]);</span><br><span class="line">    <span class="keyword">const</span> pulled = pullAt(cloned, validMoves);</span><br><span class="line">    <span class="keyword">const</span> bestScore = max(pulled);</span><br><span class="line">    <span class="keyword">const</span> bestAction = validMoves[pulled.indexOf(bestScore)];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; validMoves.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> a = validMoves[i];</span><br><span class="line">      A[a] = <span class="built_in">this</span>.epsilon / validMoves.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (validMoves.includes(bestAction)) &#123;</span><br><span class="line">      A[bestAction] += <span class="number">1.0</span> - <span class="built_in">this</span>.epsilon;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> someAction = sample(validMoves);</span><br><span class="line">      A[someAction] += <span class="number">1.0</span> - <span class="built_in">this</span>.epsilon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  learn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> memory = <span class="built_in">this</span>.episode;</span><br><span class="line">    <span class="keyword">if</span> (memory.length &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> record1 = memory[memory.length - <span class="number">2</span>];</span><br><span class="line">      <span class="keyword">const</span> record2 = memory[memory.length - <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">const</span> state = record1[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">const</span> action = record1[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">const</span> nextState = record2[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">const</span> nextAction = record2[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> reward = calculateReward(nextState, <span class="built_in">this</span>.player);</span><br><span class="line">      <span class="keyword">const</span> stateString = boardToString(state.board);</span><br><span class="line">      <span class="keyword">const</span> nextStateString = boardToString(nextState.board);</span><br><span class="line">      <span class="keyword">const</span> nextStateValue = nextState.gameover</span><br><span class="line">        ? <span class="number">0</span></span><br><span class="line">        : <span class="built_in">this</span>.Q[nextStateString][nextAction];</span><br><span class="line">      <span class="keyword">const</span> tdTarget = reward + <span class="built_in">this</span>.discount * nextStateValue;</span><br><span class="line">      <span class="keyword">const</span> tdDelta = tdTarget - <span class="built_in">this</span>.Q[stateString][action];</span><br><span class="line">      <span class="built_in">this</span>.Q[stateString][action] += <span class="built_in">this</span>.alpha * tdDelta;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  observe = <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.episode.push([state, action]);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  newEpisode = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.episode = [];</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="q-learning">4. Q-Learning</h1>
<h2 id="the-algorithm-2">The algorithm</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Initialize Q(s, a), ∀s ∈ S, a ∈ A(s), arbitrarily, and Q(terminal-state, ·) &#x3D; 0 </span><br><span class="line">Repeat (for each episode):</span><br><span class="line">    Initialize S</span><br><span class="line">    Repeat (for each step of episode):</span><br><span class="line">        Choose A from S using policy derived from Q (e.g., ε-greedy) </span><br><span class="line">        Take action A, observe R, S′</span><br><span class="line">        Q(S, A) ← Q(S, A) + α[R + γ*max(Q(S′, a)) − Q(S, A)] </span><br><span class="line">        S ← S′;</span><br><span class="line">    until S is terminal</span><br></pre></td></tr></table></figure>
<h2 id="implementation-2">Implementation</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* QLearningAgent.js */</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">QLearningAgent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">&#123; epsilon = <span class="number">0.1</span>, discount = <span class="number">0.9</span>, alpha = <span class="number">0.01</span>, player = O &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.epsilon = epsilon;</span><br><span class="line">    <span class="built_in">this</span>.discount = discount;</span><br><span class="line">    <span class="built_in">this</span>.alpha = alpha;</span><br><span class="line">    <span class="built_in">this</span>.player = player;</span><br><span class="line">    <span class="built_in">this</span>.episode = [];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>._Q = &#123;&#125;;</span><br><span class="line">    <span class="built_in">this</span>.Q = <span class="keyword">new</span> <span class="built_in">Proxy</span>(<span class="built_in">this</span>._Q, &#123;</span><br><span class="line">      get: <span class="function">(<span class="params">target, name</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(name <span class="keyword">in</span> target)) &#123;</span><br><span class="line">          target[name] = range(<span class="number">0</span>, <span class="number">9</span>, <span class="number">0.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> target[name];</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  policy = <span class="function">(<span class="params">game</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; board &#125; = game;</span><br><span class="line">    <span class="keyword">const</span> validMoves = getValidMoves(board);</span><br><span class="line">    <span class="keyword">const</span> boardString = boardToString(board);</span><br><span class="line">    <span class="keyword">let</span> A = range(<span class="number">0</span>, <span class="number">9</span>, <span class="number">0.0</span>);</span><br><span class="line">    <span class="keyword">const</span> cloned = clone(<span class="built_in">this</span>.Q[boardString]);</span><br><span class="line">    <span class="keyword">const</span> pulled = pullAt(cloned, validMoves);</span><br><span class="line">    <span class="keyword">const</span> bestScore = max(pulled);</span><br><span class="line">    <span class="keyword">const</span> bestAction = validMoves[pulled.indexOf(bestScore)];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; validMoves.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> a = validMoves[i];</span><br><span class="line">      A[a] = <span class="built_in">this</span>.epsilon / validMoves.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (validMoves.includes(bestAction)) &#123;</span><br><span class="line">      A[bestAction] += <span class="number">1.0</span> - <span class="built_in">this</span>.epsilon;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> someAction = sample(validMoves);</span><br><span class="line">      A[someAction] += <span class="number">1.0</span> - <span class="built_in">this</span>.epsilon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  learn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> memory = <span class="built_in">this</span>.episode;</span><br><span class="line">    <span class="keyword">if</span> (memory.length &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> record1 = memory[memory.length - <span class="number">2</span>];</span><br><span class="line">      <span class="keyword">const</span> record2 = memory[memory.length - <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">const</span> state = record1[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">const</span> action = record1[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">const</span> nextState = record2[<span class="number">0</span>];</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">const</span> reward = calculateReward(nextState, <span class="built_in">this</span>.player);</span><br><span class="line">      <span class="keyword">const</span> stateString = boardToString(state.board);</span><br><span class="line">      <span class="keyword">const</span> nextStateString = boardToString(nextState.board);</span><br><span class="line">      <span class="keyword">const</span> nextStateValue = nextState.gameover</span><br><span class="line">        ? <span class="number">0</span></span><br><span class="line">        : max(<span class="built_in">this</span>.Q[nextStateString]);</span><br><span class="line">      <span class="keyword">const</span> tdTarget = reward + <span class="built_in">this</span>.discount * nextStateValue;</span><br><span class="line">      <span class="keyword">const</span> tdDelta = tdTarget - <span class="built_in">this</span>.Q[stateString][action];</span><br><span class="line">      <span class="built_in">this</span>.Q[stateString][action] += <span class="built_in">this</span>.alpha * tdDelta;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  observe = <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.episode.push([state, action]);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  newEpisode = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.episode = [];</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Reinforcement Learning</category>
      </categories>
      <tags>
        <tag>Reinforcement Learning</tag>
        <tag>Machine Learning</tag>
        <tag>Artificial Intelligent</tag>
        <tag>AI</tag>
        <tag>Tictactoe</tag>
        <tag>Game</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>How to clone an GCP instance to machine-image and restore it</title>
    <url>/2020/11/10/How-to-clone-an-GCP-instance-to-machine-image-and-restore-it/</url>
    <content><![CDATA[<h1 id="getting-started">Getting Started</h1>
<ol type="1">
<li>Download gcloud private key on google cloud console</li>
</ol>
<p><code>IAM &amp; Admin</code> -&gt; <code>Service Accounts</code> -&gt; <em>Your account name</em> -&gt; <code>Add key</code> -&gt; <code>Create New Key</code></p>
<ol start="2" type="1">
<li>Install <code>google cloud sdk</code></li>
</ol>
<ul>
<li>Download</li>
</ul>
<p><code>curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-317.0.0-linux-x86_64.tar.gz</code></p>
<ul>
<li>Untar</li>
</ul>
<p><code>tar -xf google-cloud-sdk-317.0.0-linux-x86_64.tar.gz</code></p>
<ul>
<li>Install</li>
</ul>
<p><code>./google-cloud-sdk/install.sh</code></p>
<ol start="3" type="1">
<li>Authorizing gcloud</li>
</ol>
<p>Follow the gcloud official <a href="https://cloud.google.com/sdk/docs/authorizing">document</a></p>
<h1 id="list-running-instance">List running instance</h1>
<ul>
<li><p>Using shell script <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcloud beta compute instances list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NAME                  ZONE           MACHINE_TYPE   PREEMPTIBLE  INTERNAL_IP  EXTERNAL_IP     STATUS</span><br><span class="line">c****01               us-central1-a  f1-micro                    xx.xxx.x.x   xxx.xxx.xx.xxx  RUNNING</span><br><span class="line">c****02               us-central1-a  f1-micro                    xx.xxx.x.x   xx.xxx.xx.xxx   RUNNING</span><br></pre></td></tr></table></figure></p></li>
<li><p>Using Python <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> googleapiclient.discovery <span class="keyword">import</span> build</span><br><span class="line"></span><br><span class="line"><span class="comment"># Here I use beta version because it support create instance from machine image</span></span><br><span class="line">compute = build(<span class="string">&#x27;compute&#x27;</span>, <span class="string">&#x27;beta&#x27;</span>)</span><br><span class="line">instances = compute.instances()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_running_instances</span>(<span class="params">status=<span class="string">&#x27;RUNNING&#x27;</span></span>):</span></span><br><span class="line">    <span class="comment"># Here I will use the instances client to list all running instance</span></span><br><span class="line">    items = instances.<span class="built_in">list</span>(</span><br><span class="line">        project=PROJECT, </span><br><span class="line">        zone=ZONE,</span><br><span class="line">        <span class="built_in">filter</span>=<span class="string">f&#x27;status=<span class="subst">&#123;status&#125;</span>&#x27;</span></span><br><span class="line">    ).execute()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Let display few information of those instance</span></span><br><span class="line">    items = items.get(<span class="string">&#x27;items&#x27;</span>)</span><br><span class="line">    formated_items = [(item.get(<span class="string">&#x27;name&#x27;</span>), item.get(<span class="string">&#x27;status&#x27;</span>)) <span class="keyword">for</span> item <span class="keyword">in</span> items]</span><br><span class="line">    print(<span class="string">&#x27;\n&#x27;</span>.join([<span class="built_in">str</span>(item) <span class="keyword">for</span> item <span class="keyword">in</span> formated_items]))</span><br><span class="line"></span><br><span class="line">show_running_instances()</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h1 id="take-image-of-a-running-instance">Take image of a running instance</h1>
<p>This command will take about 40-60 seconds</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcloud beta compute machine-images create my-image-v01 --source-instance c****01</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Created [https://www.googleapis.com/compute/beta/projects/xxx-xxx-2xxxxx5/global/machineImages/my-image-v01].</span><br><span class="line">NAME               STATUS</span><br><span class="line">my-image-v01  READY</span><br></pre></td></tr></table></figure>
<h1 id="create-new-instance-of-the-my-image-v01">Create new instance of the <code>my-image-v01</code></h1>
<p>This command will take about 10s to spin up an instance</p>
<ul>
<li><p>Using shell script <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcloud beta compute instances create c****03 --source-machine-image my-image-v01</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Created [https://www.googleapis.com/compute/beta/projects/xxx-xxx-2xxxxx5/zones/us-central1-a/instances/c****03].</span><br><span class="line">NAME       ZONE           MACHINE_TYPE  PREEMPTIBLE  INTERNAL_IP  EXTERNAL_IP     STATUS</span><br><span class="line">c****03    us-central1-a  f1-micro                   xx.xxx.x.xx  xx.xxx.xxx.xxx  RUNNING</span><br></pre></td></tr></table></figure></p></li>
<li><p>Using Python Api <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> googleapiclient.discovery <span class="keyword">import</span> build</span><br><span class="line"></span><br><span class="line"><span class="comment"># Here I use beta version because it support create instance from machine image</span></span><br><span class="line">compute = build(<span class="string">&#x27;compute&#x27;</span>, <span class="string">&#x27;beta&#x27;</span>)</span><br><span class="line">instances = compute.instances()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_instance</span>(<span class="params">name=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> instances.insert(</span><br><span class="line">        project=PROJECT, </span><br><span class="line">        zone=ZONE, </span><br><span class="line">        body=&#123; <span class="string">&#x27;sourceMachineImage&#x27;</span>: <span class="string">&#x27;global/machineImages/my-image-v01&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: name &#125;</span><br><span class="line">    ).execute()</span><br><span class="line"></span><br><span class="line">create_instance(<span class="string">&#x27;test001&#x27;</span>)</span><br></pre></td></tr></table></figure></p></li>
</ul>
<p>To create an instance and run the startup script after running. <a href="https://cloud.google.com/compute/docs/tutorials/python-guide#addinganinstance">Read more</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># You can also upload a script to make the instance automatically run it after created.</span></span><br><span class="line">startup_script = <span class="built_in">open</span>(<span class="string">&#x27;./startup-script.sh&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line">instances.insert(</span><br><span class="line">    project=PROJECT,</span><br><span class="line">    zone=ZONE,</span><br><span class="line">    body=&#123;</span><br><span class="line">        <span class="string">&#x27;sourceMachineImage&#x27;</span>: <span class="string">&#x27;global/machineImages/my-image-v01&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;test001&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;metadata&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;items&#x27;</span>: [&#123;</span><br><span class="line">                <span class="string">&#x27;key&#x27;</span>: <span class="string">&#x27;startup-script&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;value&#x27;</span>: startup_script</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">).execute()</span><br></pre></td></tr></table></figure>
<h1 id="delete-running-instance">Delete running instance</h1>
<ul>
<li><p>Using shell script <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcloud beta compute instances delete c****03</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The following instances will be deleted. Any attached disks configured</span><br><span class="line"> to be auto-deleted will be deleted unless they are attached to any </span><br><span class="line">other instances or the `--keep-disks` flag is given and specifies them</span><br><span class="line"> for keeping. Deleting a disk is irreversible and any data on the disk</span><br><span class="line"> will be lost.</span><br><span class="line"> - [c****03] in [us-central1-a]</span><br><span class="line"></span><br><span class="line">Do you want to continue (Y/n)?  y</span><br><span class="line"></span><br><span class="line">Deleted [https://www.googleapis.com/compute/beta/projects/xxx-xxx-2xxxxx5/zones/us-central1-a/instances/c****03].</span><br></pre></td></tr></table></figure></p></li>
<li><p>Using python api <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> googleapiclient.discovery <span class="keyword">import</span> build</span><br><span class="line"></span><br><span class="line"><span class="comment"># Here I use beta version because it support create instance from machine image</span></span><br><span class="line">compute = build(<span class="string">&#x27;compute&#x27;</span>, <span class="string">&#x27;beta&#x27;</span>)</span><br><span class="line">instances = compute.instances()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">name=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> instances.delete(</span><br><span class="line">        project=PROJECT, </span><br><span class="line">        zone=ZONE,</span><br><span class="line">        instance=name</span><br><span class="line">    ).execute()</span><br><span class="line"></span><br><span class="line">delete(<span class="string">&#x27;test001&#x27;</span>)</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h1 id="delete-the-machine-image">Delete the machine-image</h1>
<ul>
<li>Using shell script <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcloud beta compute machine-images delete my-image-v01</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The following machine images will be deleted:</span><br><span class="line"> - [my-image-v01]</span><br><span class="line"></span><br><span class="line">Do you want to continue (Y/n)?  y</span><br><span class="line"></span><br><span class="line">Deleted [https://www.googleapis.com/compute/beta/projects/xxx-xxx-2xxxxx5/global/machineImages/my-image-v01].</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>GCP</tag>
        <tag>Google Cloud</tag>
        <tag>Compute Engine</tag>
        <tag>Backup</tag>
        <tag>Machine Image</tag>
      </tags>
  </entry>
  <entry>
    <title>Manage multiple ssh accounts for GitHub and GitLab</title>
    <url>/2020/11/23/Manage-ssh-keys/</url>
    <content><![CDATA[<h1 id="generate-new-rsa-ssh-keys">1. Generate new RSA SSH keys</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 2048 -C &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure>
<p>for example, I have 2 keys in my laptop</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">~/.ssh/id_rsa</span><br><span class="line">~/.ssh/tpp_rsa</span><br></pre></td></tr></table></figure>
<p>Next, add the new key you just created</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-add ~/.ssh/tpp_rsa</span><br></pre></td></tr></table></figure>
<p>You can check your added keys</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-add -l</span><br></pre></td></tr></table></figure>
<h1 id="modify-the-ssh-config">2. Modify the ssh config</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nano ~/.ssh/config</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Gitlab Personal</span></span><br><span class="line">Host gitlab.com</span><br><span class="line">        HostName gitlab.com</span><br><span class="line">        User git</span><br><span class="line">        IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Gitlab Working</span></span><br><span class="line">Host gitlab.com-tpp</span><br><span class="line">        HostName gitlab.com</span><br><span class="line">        User git</span><br><span class="line">        IdentityFile ~/.ssh/tpp_rsa</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> GitHub Personal</span></span><br><span class="line">Host github.com</span><br><span class="line">        HostName github.com</span><br><span class="line">        User git</span><br><span class="line">        IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> GitHub Working</span></span><br><span class="line">Host github.com</span><br><span class="line">        HostName github.com-tpp</span><br><span class="line">        User git</span><br><span class="line">        IdentityFile ~/.ssh/tpp_rsa</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="test-the-connection">3. Test the connection</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@gitlab.com</span><br><span class="line">ssh -T git@gitlab.com-tpp</span><br><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T git@github.com-tpp</span><br></pre></td></tr></table></figure>
<h1 id="add-public-key-to-your-source-control-profile-setting">4. Add public key to your source control profile setting</h1>
<p>Copy the public key to clipboard</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/tpp_rsa.pub | xclip -selection c</span><br></pre></td></tr></table></figure>
<p>Paste the key to gitlab ssh setting</p>
<p><img src="/images/2020-11-23/001.png"></p>
<p>Paste the key to github ssh setting</p>
<p><img src="/images/2020-11-23/002.png"></p>
<h1 id="clone-the-source-code-using-different-user">5. Clone the source code using different user</h1>
<p>Use this config for your personal account <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@gitlab.com:myname/myproject.git</span><br></pre></td></tr></table></figure></p>
<p>For other account <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@gitlab.com-tpp:orga/projecta.git</span><br></pre></td></tr></table></figure></p>
<p>That's all! Good luck!</p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>GitLab</tag>
        <tag>GitHub</tag>
        <tag>SSH</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hijack your computer http request with Fiddler</title>
    <url>/2020/12/23/Hijack-your-computer-http-request-with-Fiddler/</url>
    <content><![CDATA[<h1 id="getting-started">Getting Started</h1>
<blockquote><p>Capture all HTTP(S) traffic between your computer and the Internet with Fiddler HTTP(S) proxy. Inspect traffic, set breakpoints, and fiddle with requests &amp; responses.</p>
<footer><strong>Fiddler</strong><cite><a href="https://www.telerik.com/fiddler">www.telerik.com/fiddler</a></cite></footer></blockquote>
<p><a href="https://www.telerik.com/download/fiddler-everywhere">Download</a></p>
<p>On my laptop, I use the linux version. You can download here</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -O fiddler.AppImage https://downloads.getfiddler.com/linux/fiddler-everywhere-1.4.1.AppImage</span><br><span class="line">chmod u+x fiddler.AppImage </span><br><span class="line">./fiddler.AppImage</span><br></pre></td></tr></table></figure>
<h1 id="configuration">Configuration</h1>
<p>This is the main view of the tool</p>
<p><img src="/images/2020-12-23/001.png"></p>
<ol type="1">
<li>To enable capture HTTPS <code>View -&gt; Preferences -&gt; HTTPS</code>. Click <code>Export root certificate to Desktop</code>, then enable <code>Capture HTTPS traffic</code> + <code>Ignore server certificate error (unsafe)</code>. Click <code>Save</code>.</li>
</ol>
<p><img src="/images/2020-12-23/005.png"></p>
<ol start="2" type="1">
<li>Open any browser, go to the <code>Certificate</code> Preferences, Import the <code>FiddlerRootCertificate.crt</code> on the Desktop and enable Trust this certificate.</li>
</ol>
<p><img src="/images/2020-12-23/003.png"></p>
<ol start="3" type="1">
<li>Config Browser proxy to Fiddler <code>localhost:8866</code></li>
</ol>
<p><img src="/images/2020-12-23/004.png"></p>
<h1 id="experiement">Experiement</h1>
<p>Now open any Web Browser with any url. You will see all the network requests sent out using HTTP(s)</p>
<p><img src="/images/2020-12-23/002.png"></p>
]]></content>
      <categories>
        <category>Networking</category>
      </categories>
      <tags>
        <tag>Networking</tag>
        <tag>Tool</tag>
        <tag>HTTP</tag>
        <tag>Debugging</tag>
        <tag>Snipping</tag>
      </tags>
  </entry>
  <entry>
    <title>Encode image using Autoencoders</title>
    <url>/2021/04/17/Encode-your-image-using-Autoencoders/</url>
    <content><![CDATA[<h1 id="overview">1. Overview</h1>
<blockquote><p>An autoencoder is a type of artificial neural network used to learn efficient data codings in an unsupervised manner. The aim of an autoencoder is to learn a representation (encoding) for a set of data, typically for dimensionality reduction, by training the network to ignore signal “noise”. Along with the reduction side, a reconstructing side is learned, where the autoencoder tries to generate from the reduced encoding a representation as close as possible to its original input, hence its name.</p>
<footer><strong>Wiki</strong><cite><a href="https://en.wikipedia.org/wiki/Autoencoder">en.wikipedia.org/wiki/Autoencoder</a></cite></footer></blockquote>
<p><img height="320" src="https://upload.wikimedia.org/wikipedia/commons/2/28/Autoencoder_structure.png"></p>
<h1 id="create-a-simple-autoencoder">2. Create a simple autoencoder</h1>
<h2 id="dataset">2.1. Dataset</h2>
<p>In this simple example, I will use <a href="https://www.kaggle.com/zalando-research/fashionmnist">Fashion-MNIST</a> dataset. <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.datasets <span class="keyword">import</span> fashion_mnist</span><br></pre></td></tr></table></figure></p>
<h2 id="define-model">2.2. Define model</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">INPUT_DIM = <span class="number">784</span></span><br><span class="line">ENCODE_DIM = <span class="number">128</span></span><br><span class="line"></span><br><span class="line">inputs = tf.keras.layers.Input(shape=(INPUT_DIM,))</span><br><span class="line">encoder = tf.keras.layers.Dense(units=<span class="number">512</span>)(inputs)</span><br><span class="line">encoder = tf.keras.layers.ReLU()(encoder)</span><br><span class="line">encoder = tf.keras.layers.Dense(units=<span class="number">256</span>)(encoder)</span><br><span class="line">encoder = tf.keras.layers.ReLU()(encoder)</span><br><span class="line">encoder = tf.keras.layers.Dense(ENCODE_DIM)(encoder)</span><br><span class="line"></span><br><span class="line">encoding = tf.keras.layers.ReLU()(encoder)</span><br><span class="line"></span><br><span class="line">decoder = tf.keras.layers.Dense(units=<span class="number">256</span>)(encoding)</span><br><span class="line">decoder = tf.keras.layers.ReLU()(decoder)</span><br><span class="line">decoder = tf.keras.layers.Dense(units=<span class="number">512</span>)(decoder)</span><br><span class="line">decoder = tf.keras.layers.ReLU()(decoder)</span><br><span class="line">decoder = tf.keras.layers.Dense(units=INPUT_DIM)(decoder)</span><br><span class="line">outputs = tf.keras.layers.Activation(<span class="string">&#x27;sigmoid&#x27;</span>)(decoder)</span><br><span class="line"></span><br><span class="line">model = tf.keras.models.Model(inputs=inputs, outputs=outputs)</span><br></pre></td></tr></table></figure>
<h2 id="training">2.3. Training</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># We use only the image data</span></span><br><span class="line">(X_train, _), (X_test, _) = fashion_mnist.load_data()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Normalize</span></span><br><span class="line">X_train = X_train.astype(<span class="string">&#x27;float32&#x27;</span>) / <span class="number">255.0</span></span><br><span class="line">X_test = X_test.astype(<span class="string">&#x27;float32&#x27;</span>) / <span class="number">255.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Reshape to (?, 768)</span></span><br><span class="line">X_train = X_train.reshape((X_train.shape[<span class="number">0</span>], <span class="number">-1</span>))</span><br><span class="line">X_test = X_test.reshape((X_test.shape[<span class="number">0</span>], <span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compile the model</span></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=<span class="string">&#x27;mse&#x27;</span>)</span><br><span class="line"></span><br><span class="line">EPOCHS = <span class="number">300</span></span><br><span class="line">BATCH_SIZE = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">model.fit(</span><br><span class="line">    X_train, X_train, </span><br><span class="line">    epochs=EPOCHS, </span><br><span class="line">    batch_size=BATCH_SIZE, </span><br><span class="line">    shuffle=<span class="literal">True</span>, </span><br><span class="line">    validation_data=(X_test, X_test))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="evaluation">2.4. Evaluation</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">predictions = model.predict(X_test)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.imshow(predictions[<span class="number">0</span>].reshape((<span class="number">28</span>, <span class="number">28</span>)), cmap=<span class="string">&quot;gray&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>Few experiment results</p>
<table>
<thead>
<tr class="header">
<th>ID</th>
<th>Raw Image</th>
<th>Generated</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td><img src="/images/2021-04-18/raw_001.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/gen_001.png" width="64" height="64" /></td>
</tr>
<tr class="even">
<td>2</td>
<td><img src="/images/2021-04-18/raw_002.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/gen_002.png" width="64" height="64" /></td>
</tr>
<tr class="odd">
<td>3</td>
<td><img src="/images/2021-04-18/raw_003.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/gen_003.png" width="64" height="64" /></td>
</tr>
<tr class="even">
<td>4</td>
<td><img src="/images/2021-04-18/raw_004.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/gen_004.png" width="64" height="64" /></td>
</tr>
<tr class="odd">
<td>5</td>
<td><img src="/images/2021-04-18/raw_005.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/gen_005.png" width="64" height="64" /></td>
</tr>
<tr class="even">
<td>6</td>
<td><img src="/images/2021-04-18/raw_006.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/gen_006.png" width="64" height="64" /></td>
</tr>
<tr class="odd">
<td>7</td>
<td><img src="/images/2021-04-18/raw_007.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/gen_007.png" width="64" height="64" /></td>
</tr>
<tr class="even">
<td>8</td>
<td><img src="/images/2021-04-18/raw_008.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/gen_008.png" width="64" height="64" /></td>
</tr>
</tbody>
</table>
<h2 id="how-it-works">2.5. How it works</h2>
<ul>
<li>The encoder take raw input of size <code>768</code> and compress the input to the size of <code>128</code>.</li>
<li>The decoder take compressed input of size <code>128</code> and decode it to the size of <code>768</code>.</li>
<li>The training process is to minimize to error distance between raw inputs and generated outputs.</li>
</ul>
<h1 id="create-a-cnn-autoencoder">3. Create a CNN autoencoder</h1>
<h2 id="dataset-1">3.1. Dataset</h2>
<p>I use <a href="https://www.kaggle.com/mengcius/cinic10">CINIC-10</a> in this example.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line">train_paths = glob.glob(<span class="string">&#x27;inputs/train/*/*.png&#x27;</span>)</span><br><span class="line">valid_paths = glob.glob(<span class="string">&#x27;inputs/valid/*/*.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_img</span>(<span class="params">img_path</span>):</span></span><br><span class="line">    image = tf.io.read_file(img_path)</span><br><span class="line">    image = tf.image.decode_jpeg(image, channels=<span class="number">3</span>)</span><br><span class="line">    image = tf.image.convert_image_dtype(image, np.float32)</span><br><span class="line">    image = image / <span class="number">255.0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> image, image</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare dataset</span></span><br><span class="line">train_dataset = (tf.data.Dataset</span><br><span class="line">                 .from_tensor_slices(train_paths)</span><br><span class="line">                 .shuffle(<span class="number">1024</span>).<span class="built_in">map</span>(load_img)</span><br><span class="line">                 .batch(<span class="number">128</span>)</span><br><span class="line">                 .prefetch(<span class="number">1024</span>))</span><br><span class="line"></span><br><span class="line">valid_dataset = (tf.data.Dataset</span><br><span class="line">                 .from_tensor_slices(valid_paths)</span><br><span class="line">                 .<span class="built_in">map</span>(load_img)</span><br><span class="line">                 .batch(<span class="number">128</span>)</span><br><span class="line">                 .prefetch(<span class="number">1024</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="define-model-1">3.2. Define model</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ENCODING_DIM = <span class="number">256</span></span><br><span class="line"></span><br><span class="line">input_layer = tf.keras.layers.Input(shape=(<span class="number">128</span>, <span class="number">128</span>, <span class="number">3</span>))</span><br><span class="line">encoder = tf.keras.layers.Conv2D(filters=<span class="number">32</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), strides=<span class="number">2</span>, padding=<span class="string">&#x27;same&#x27;</span>)(input_layer)</span><br><span class="line">encoder = tf.keras.layers.LeakyReLU(alpha=<span class="number">0.2</span>)(encoder)</span><br><span class="line">encoder = tf.keras.layers.BatchNormalization()(encoder)</span><br><span class="line"></span><br><span class="line">encoder = tf.keras.layers.Conv2D(filters=<span class="number">64</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), strides=<span class="number">2</span>, padding=<span class="string">&#x27;same&#x27;</span>)(encoder)</span><br><span class="line">encoder = tf.keras.layers.LeakyReLU(alpha=<span class="number">0.2</span>)(encoder)</span><br><span class="line">encoder = tf.keras.layers.BatchNormalization()(encoder)</span><br><span class="line"></span><br><span class="line">encoder_output_shape = encoder.shape</span><br><span class="line">encoder = tf.keras.layers.Flatten()(encoder)</span><br><span class="line">encoder_output = tf.keras.layers.Dense(ENCODING_DIM)(encoder)</span><br><span class="line">encoder_model = tf.keras.models.Model(inputs=input_layer, outputs=encoder_output)</span><br><span class="line"></span><br><span class="line">decoder_input = tf.keras.layers.Input(shape=(ENCODING_DIM,))</span><br><span class="line">target_shape = <span class="built_in">tuple</span>(encoder_output_shape[<span class="number">1</span>:])</span><br><span class="line">decoder = tf.keras.layers.Dense(np.prod(target_shape))(decoder_input)</span><br><span class="line">decoder = tf.keras.layers.Reshape(target_shape)(decoder)</span><br><span class="line"></span><br><span class="line">decoder = tf.keras.layers.Conv2DTranspose(filters=<span class="number">64</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), strides=<span class="number">2</span>, padding=<span class="string">&#x27;same&#x27;</span>)(decoder)</span><br><span class="line">decoder = tf.keras.layers.LeakyReLU(alpha=<span class="number">0.2</span>)(decoder)</span><br><span class="line">decoder = tf.keras.layers.BatchNormalization()(decoder)</span><br><span class="line"></span><br><span class="line">decoder = tf.keras.layers.Conv2DTranspose(filters=<span class="number">32</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), strides=<span class="number">2</span>, padding=<span class="string">&#x27;same&#x27;</span>)(decoder)</span><br><span class="line">decoder = tf.keras.layers.LeakyReLU(alpha=<span class="number">0.2</span>)(decoder)</span><br><span class="line">decoder = tf.keras.layers.BatchNormalization()(decoder)</span><br><span class="line"></span><br><span class="line">decoder = tf.keras.layers.Conv2DTranspose(filters=<span class="number">3</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>)(decoder)</span><br><span class="line">outputs = tf.keras.layers.Activation(<span class="string">&#x27;sigmoid&#x27;</span>)(decoder)</span><br><span class="line"></span><br><span class="line">decoder_model = tf.keras.models.Model(inputs=decoder_input, outputs=outputs)</span><br><span class="line"></span><br><span class="line">encoder_model_outputs = encoder_model(input_layer)</span><br><span class="line">decoder_model_outputs = decoder_model(encoder_model_outputs)</span><br><span class="line">autoencoder_model = tf.keras.models.Model(inputs=input_layer, outputs=decoder_model_outputs)</span><br><span class="line"></span><br><span class="line">autoencoder_model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=<span class="string">&#x27;mse&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="training-1">3.3. Training</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(</span><br><span class="line">    filepath=<span class="string">&#x27;./model.&#123;epoch:02d&#125;-&#123;val_loss:.9f&#125;.hdf5&#x27;</span>, </span><br><span class="line">    save_weights_only=<span class="literal">False</span>, </span><br><span class="line">    save_best_only=<span class="literal">True</span>,</span><br><span class="line">    monitor=<span class="string">&#x27;val_loss&#x27;</span>)</span><br><span class="line"></span><br><span class="line">autoencoder_model.fit(</span><br><span class="line">    train_dataset, </span><br><span class="line">    validation_data=valid_dataset, </span><br><span class="line">    epochs=<span class="number">300</span>, </span><br><span class="line">    callbacks=[model_checkpoint_callback])</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="evaluation-1">3.4. Evaluation</h2>
<p>To save your training time, use can use my pretrain model. <a href="/images/2021-04-18/model.cinic.hdf5">Download</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">autoencoder_model = tf.keras.models.load_model(<span class="string">&#x27;model.cinic.hdf5&#x27;</span>)</span><br><span class="line">predictions = autoencoder_model.predict(valid_dataset)</span><br></pre></td></tr></table></figure>
<p>Few experiment results</p>
<table>
<thead>
<tr class="header">
<th>ID</th>
<th>Raw Image</th>
<th>Generated</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td><img src="/images/2021-04-18/cnn_raw_001.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/cnn_gen_001.png" width="64" height="64" /></td>
</tr>
<tr class="even">
<td>2</td>
<td><img src="/images/2021-04-18/cnn_raw_002.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/cnn_gen_002.png" width="64" height="64" /></td>
</tr>
<tr class="odd">
<td>3</td>
<td><img src="/images/2021-04-18/cnn_raw_003.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/cnn_gen_003.png" width="64" height="64" /></td>
</tr>
<tr class="even">
<td>4</td>
<td><img src="/images/2021-04-18/cnn_raw_004.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/cnn_gen_004.png" width="64" height="64" /></td>
</tr>
<tr class="odd">
<td>5</td>
<td><img src="/images/2021-04-18/cnn_raw_005.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/cnn_gen_005.png" width="64" height="64" /></td>
</tr>
<tr class="even">
<td>6</td>
<td><img src="/images/2021-04-18/cnn_raw_006.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/cnn_gen_006.png" width="64" height="64" /></td>
</tr>
<tr class="odd">
<td>7</td>
<td><img src="/images/2021-04-18/cnn_raw_007.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/cnn_gen_007.png" width="64" height="64" /></td>
</tr>
<tr class="even">
<td>8</td>
<td><img src="/images/2021-04-18/cnn_raw_008.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/cnn_gen_008.png" width="64" height="64" /></td>
</tr>
</tbody>
</table>
<h2 id="how-it-works-1">3.5. How it works</h2>
<ul>
<li><p>The encoder use <code>Conv2D</code> to encode the raw image of size <code>32x32x3</code> (RGB channel) into a encoding vector of size <code>256</code>.</p></li>
<li><p>The decoder use <code>Conv2DTranspose</code> to decode the encoding vector into a output image of size <code>32x32x3</code>. Learn more about Conv2DTranspose <a href="https://towardsdatascience.com/types-of-convolutions-in-deep-learning-717013397f4d">here</a>. <img src="https://miro.medium.com/max/790/1*Lpn4nag_KRMfGkx1k6bV-g.gif" /></p></li>
</ul>
<h1 id="create-an-inverse-image-search-index">4. Create an inverse image search index</h1>
<h2 id="index-the-cinic-10-dataset">4.1. Index the <code>CINIC-10</code> dataset</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">euclidean_dist</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> np.linalg.norm(x - y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">index_dataset = (tf.data.Dataset</span><br><span class="line">                 .from_tensor_slices(train_paths)</span><br><span class="line">                 .<span class="built_in">map</span>(load_img)</span><br><span class="line">                 .batch(<span class="number">1</span>)</span><br><span class="line">                 .prefetch(<span class="number">1024</span>))</span><br><span class="line"></span><br><span class="line">features = encoder_model.predict(index_dataset)</span><br><span class="line"></span><br><span class="line">search_index = &#123;</span><br><span class="line">    <span class="string">&#x27;features&#x27;</span>: features,</span><br><span class="line">    <span class="string">&#x27;dataset&#x27;</span>: index_dataset</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">query_vector, search_index, max_results=<span class="number">8</span></span>):</span></span><br><span class="line">    vectors = search_index[<span class="string">&#x27;features&#x27;</span>]</span><br><span class="line">    results = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i, (image, _) <span class="keyword">in</span> <span class="built_in">enumerate</span>(search_index[<span class="string">&#x27;dataset&#x27;</span>]):</span><br><span class="line">        distance = euclidean_dist(query_vector, vectors[i])</span><br><span class="line">        results.append((distance, image.numpy()))</span><br><span class="line">    </span><br><span class="line">    results = <span class="built_in">sorted</span>(results, key=<span class="keyword">lambda</span> p: p[<span class="number">0</span>])[:max_results]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="experiment">4.2. Experiment</h2>
<table>
<thead>
<tr class="header">
<th>ID</th>
<th>Query Image</th>
<th>Results</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td><img src="/images/2021-04-18/query_001.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/search_001.png" width="64" height="64" /> <img src="/images/2021-04-18/search_002.png" width="64" height="64" /> <img src="/images/2021-04-18/search_003.png" width="64" height="64" /> <img src="/images/2021-04-18/search_004.png" width="64" height="64" /> <img src="/images/2021-04-18/search_005.png" width="64" height="64" /> <img src="/images/2021-04-18/search_006.png" width="64" height="64" /> <img src="/images/2021-04-18/search_007.png" width="64" height="64" /> <img src="/images/2021-04-18/search_008.png" width="64" height="64" /></td>
</tr>
<tr class="even">
<td>2</td>
<td><img src="/images/2021-04-18/query_002.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/search_2001.png" width="64" height="64" /> <img src="/images/2021-04-18/search_2002.png" width="64" height="64" /> <img src="/images/2021-04-18/search_2003.png" width="64" height="64" /> <img src="/images/2021-04-18/search_2004.png" width="64" height="64" /> <img src="/images/2021-04-18/search_2005.png" width="64" height="64" /> <img src="/images/2021-04-18/search_2006.png" width="64" height="64" /> <img src="/images/2021-04-18/search_2007.png" width="64" height="64" /> <img src="/images/2021-04-18/search_2008.png" width="64" height="64" /></td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Machine Learning</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Machine Learning</tag>
        <tag>Autoencoders</tag>
        <tag>CNN</tag>
        <tag>Computer Vision</tag>
        <tag>Deep Learning</tag>
        <tag>Tensorflow</tag>
        <tag>Keras</tag>
        <tag>CINIC</tag>
        <tag>Fashion MNIST</tag>
        <tag>Convolution Neural Network</tag>
      </tags>
  </entry>
  <entry>
    <title>Ngày giãn cách ở Sài Gòn</title>
    <url>/2021/07/18/Ngay-gian-cach-o-Sai-Gon/</url>
    <content><![CDATA[<p>Sống ở Sài Gòn hơn chục năm, tôi đã rất quen với khung cảnh phồn hoa náo nhiệt của một thành phố trẻ đầy sức sống. Năm nay, cơn sóng COVID-19 lại một lần nữa phủ xuống Sài Gòn, mà lần này mọi chuyện trở nên nghiêm trọng hơn năm ngoái nhiều. Đã hơn hai tháng tôi chưa ra khỏi nhà, kể từ lúc dịch bệnh bắt đầu diễn biến phức tạp buộc công ty phải yêu cầu mọi người "Work From Home".</p>
<p>Mỗi ngày, tôi dậy sớm, tự tay mình làm một ly cà phê Expresso bằng một chiếc máy pha cà phê mini cầm tay mà vợ tôi hay gọi vui là "Cà Phê Bóp". Nhờ nó mà ly cà phê đậm đà không thua kém gì những quán cà phê sang chảnh. Dĩ nhiên, hương vị vẫn không thể so sánh được với ly cà phê do chính tay vợ tôi pha cho, bởi cô ấy tỉ mỉ chuẩn bị từ khâu cho cà phê nguyên hạt từ từ vào máy xay để cho ra độ mịn chuẩn xác, cho đến khâu pha chế với một lượng "tỉ lệ vàng" cà phê xay và nước nóng, vừa đủ để cho ra ly cà phê đậm đà không đâu sánh bằng, vừa uống, không nhiều không ít. Cô ấy đã gợi ý pha cà phê cùng với một muỗng mật ong, quả thật khiến tôi uống vào thích ngay và cho đến tận bây giờ. Tuy nhiên, không phải ngày nào vợ tôi cũng có thời gian để pha chế vào buổi sớm. Cô ấy thường xuyên bận rộn với các công việc nhà cửa, chăm sóc con cái mà nhiều đêm mất ngủ hoặc ngủ không đủ giấc. Vậy nên, tôi để vợ ngủ nướng thêm một chút, việc pha cà phê tôi cũng đã có "đồ chơi" của mình.</p>
<p><img src="/images/2021-07-18/001.jpg"></p>
<p>Tình hình ngày một căng thẳng khi dịch bệnh bắt đầu tấn công các chợ đầu mối nên bị chính quyền yêu cầu tạm thời đóng cửa, khiến cho việc mua thực phẩm tươi sống trở nên khó khăn hơn. Thêm vào đó, do nhiều người tâm lý lo lắng, hoảng loạn, nên họ đã mua nhiều hơn ngày thường để tích trữ, phần cũng vì nguồn cung và vận chuyển trở nên khó khăn do giãn cách. Đã hơn tuần nay, tôi chưa nhìn thấy quả trứng nào, mặc dù vẫn có thể mua được một ít thịt, rau, nhưng cũng khá chật vật xếp hàng. Các quán ăn quan nước cũng bị đóng cửa. Thât may mắn là vợ tôi nấu ăn rất ngon, nhưng lâu rồi không order được đồ ăn ngoài nên khá là thèm các món như bún thái, phở bò, mì hoành thánh, hủ tiếu nam vang, pizza và gà rán,... Rồi một ngày nọ, chính quyền yêu cầu mọi người đi xét nghiệm để tầm soát Covid trên diện rộng, vợ chồng tôi cũng thay phiên nhau ra xếp hàng, trải nghiêm cái cảm giác bị chọc vào mũi thật là thốn không thể tả.</p>
<p>Trong thời gian hai tháng WFH này, tôi phải làm việc online, và do đã khá quen nên công việc vẫn trôi chảy. Tôi cũng có nhiều thời gian hơn để chơi với con, trò chuyện với vợ. Donnie đã biết đi từ khi tròn 11 tháng, nhưng tới nay vẫn chưa được ra ngoài dạo chơi mà chỉ đi quanh quẩn trong nhà, tôi đoán cu cậu cũng thấy buồn chán nữa là. Khi tôi đang làm việc thì cu cậu cứ hay chạy đến ôm chân kéo kéo đòi ẳm. Lâu rồi không ra ngoài dạo phố, hít thở không khí, khiến tôi cũng thấy buồn bực, căng thẳng với công việc. Tôi khá nhớ những lúc ra siêu thị mua sắm cùng vợ, hay khi ngồi quán cà phê, quán ăn yêu thích cùng chuyện trò cùng bạn bè, nhâm nhi vài ly bia tươi, lai rai nhắm đồ nướng. Giờ đây những ngày cuối tuần, tôi chỉ còn biết chăm sóc cây, đọc sách hay nghe sách nói, luyện đàn ghi-ta, thỉnh thoảng giúp vợ rửa chén, dọn rác. Tôi đã dường như không còn tìm được niềm vui với phim ảnh nữa, phải chăng mình đã già?!</p>
<p>Dịch bệnh cũng nhanh chóng lan vào các khu công nghiệp khiến nhiều người phải tạm thời thất nghiệp, tôi khá may mắn vì làm trong ngành công nghệ nên không bị ảnh hưởng. Nhưng rất nhiều người không may mắn đến vậy, hầu hết đã phải tạm nghỉ không lương khiến cuộc sống trở nên khó khăn hơn. Dịch bệnh không chỉ ở Sài Gòn, mà còn lây sang các tỉnh lân cận, đặc biệt là Bình Dương, quê của vợ tôi. Tôi cảm thấy rất hoang mang khi nghe tin ba vợ bị đưa đi cách ly vì tiếp xúc với F0, rất may là sau 21 ngày trong trại cách ly, ông ấy đã có kết quả âm tính với Covid-19 và được về nhà. Thế nhưng một vài người ở chung trại với ông lại không được may mắn vậy, hầu hết đã bị xác định là dương tính và nhập viện điều trị; ở khu cách ly có một cô trung niên vì chủ quan, không tuân thủ đủ quy tắc 5K, thêm nữa vì không ăn được đồ ăn ở đấy dẫn đến sức đề kháng suy giảm, tạo điều kiện cho vi rút phát triển nhanh chóng, tình trạng chuyển biến xấu và qua đời ngay khi được phát hiện và đưa vào nhập viên. Anh vợ sống ở Bình Dương (tôi hay gọi là anh ba) cũng phải vào công ty ăn ngủ tại chỗ để tránh lây lan dịch bệnh. Còn một anh khác cũng sống ở Sài Gòn (tôi hay gọi là anh hai) đã nghỉ dạy không lương được hơn tháng nhưng anh phải nuôi cả gia đình một vợ hai con nên phải đi vay mượn thêm để vượt qua. Dịch bệnh cũng đã lây lan lên quê hương Lâm Đồng - Đà Lạt của tôi, vì nghe tin ca dương tính gần nhà, mẹ tôi trong lúc đi mua thực phẩm dự trữ đã đụng xe vào một chú chó bất ngờ chạy qua đường. May mắn là mẹ tôi chạy chậm nên chỉ bị sây xát nhẹ.</p>
<p>Qua những việc tôi kể cho thấy cơn sóng Covid-19 này diễn ra gần giống như tình tiết các bộ phim khoa học giả tưởng về chủ đề thảm hoạ, một khi xảy ra liền kéo theo nhiều hê luỵ không lường trước được. Nhiều người xung quanh khu tôi sống hay nói câu "trời kêu ai nấy dạ", ngay cả người đi đường tình cờ bị yêu cầu kiểm tra nhanh cũng phát hiện dương tính với Covid-19. Mấy ngày nay, ngày nào Sài Gòn cũng tăng trung bình hơn 2000 ca nhiễm. Vợ tôi là người trực tiếp đi mua thực phẩm cho cả nhà, tôi luôn dặn cô ấy phải chú ý vệ sinh sát khuẩn, dù tôi biết cô ấy khá cẩn trọng, tôi không thể tưởng tượng được gia đình tôi sẽ ra sao nếu phải đi cách ly, vì Donnie còn quá nhỏ.</p>
<p>Hy vọng dịch bệnh nhanh chóng qua đi, tôi sẽ xin nghi phép một thời gian để đưa gia đình đi ngắm biển, ngắm núi để giải toả cảm giác bí bách lúc này.</p>
]]></content>
      <categories>
        <category>Living</category>
      </categories>
      <tags>
        <tag>Living</tag>
        <tag>Family</tag>
        <tag>My Life Story</tag>
      </tags>
  </entry>
  <entry>
    <title>Rau Yêu Thương</title>
    <url>/2021/08/23/Rau-Yeu-Thuong/</url>
    <content><![CDATA[<p>Đã gần ba tháng rồi tôi chưa được ra đường, nếu tôi không có công việc thì đây quả thật là một khoảng thời gian dài bế tắc, vật vã để trải qua từng ngày giãn cách. Bởi tình hình Covid-19 vẫn còn phức tạp với số ca Covid vẫn tăng đều mỗi ngày, hơn nữa có vẻ nó sẽ không giảm trong vòng một tháng nữa. Những người vốn đã khó khăn càng trở nên khó khăn hơn nếu tình hình vẫn không khá hơn, tuy có sự hỗ trợ của chính quyền nhà nước nhưng chỉ là tạm thời. Trong hoàn cảnh này, Công ty tôi đã lập ra quỹ hỗ trợ Covid và kêu gọi mọi thành viên công ty đóng góp vào quỹ để hỗ trợ các bạn đồng nghiệp nếu chẳng may trở thành F0. Tôi rất vui được góp một phần nhỏ vào công tác chống dịch này. Đồng thời, để khích lệ tinh thần nhân viên làm việc tại nhà thời gian dài, công ty tiếp tục mở chiến dịch "Rau Yêu Thương", gửi tới tất cả thành viên công ty một phần quà tiếp sức vượt qua mùa dịch.</p>
<p><img src="images/2021-08-23/001.jpg"></p>
<p>Thú thật là tôi cảm thấy rất ấm áp khi nhận được món quà "Rau Yêu Thương" từ công ty, bởi tôi cảm nhận được tình cảm, sự quan tâm dành cho mình qua những túi rau, đậu, quả, trái, đủ dùng trong nhiều ngày. Gia đình tôi không thuộc diện khó khăn, nhưng trong thời buổi dịch bệnh hoành hành với những chính sách hạn chế khiến cho việc mua đồ ăn trở nên chật vật hơn, ví dụ như, một là hôm nay không có món này món kia, hai là xếp hàng chờ mua thật lâu, tới lượt mình liền hết hàng. Bây giờ bất kể là thực phẩm tươi sống gì cũng đều rất quý giá, vậy nên nhận được một bó rau thôi cũng là một điều vô cùng đáng trân trọng.</p>
<p>Người Việt có câu "Lá lành đùm lá rách", trong một tập thể, chúng ta hãy luôn sẵn lòng đưa tay ra giúp đỡ lẫn nhau những lúc khó khăn. Tôi tin rằng, với tinh thần này, chúng ta sẽ cùng nhau vượt qua được đại dịch Covid, và tôi mong sẽ sớm được gặp lại các bạn đồng nghiệp thân thương của mình.</p>
]]></content>
      <categories>
        <category>Living</category>
      </categories>
      <tags>
        <tag>Living</tag>
        <tag>Family</tag>
        <tag>My Life Story</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLAlchemy for Python ORM Mapping</title>
    <url>/2020/11/26/SQLAlchemy-for-Python-ORM-Mapping/</url>
    <content><![CDATA[<h1 id="getting-started">Getting started</h1>
<blockquote><p>SQLAlchemy is most famous for its object-relational mapper (ORM), an optional component that provides the data mapper pattern, where classes can be mapped to the database in open ended, multiple ways - allowing the object model and database schema to develop in a cleanly decoupled way from the beginning.</p>
<footer><strong>SQLAlchemy</strong><cite><a href="https://www.sqlalchemy.org/">www.sqlalchemy.org</a></cite></footer></blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install SQLAlchemy</span><br></pre></td></tr></table></figure>
<h1 id="table-define">Table Define</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># database.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, DateTime</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"><span class="comment">## Optional: for your custom schema</span></span><br><span class="line"><span class="comment"># Base.metadata.schema = &#x27;myschema&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;my_task&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String)</span><br><span class="line">    created_at = Column(DateTime)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">engine = create_engine(config.DATABASE_URI, echo=<span class="literal">True</span>)</span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="example">Example</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> database <span class="keyword">import</span> Session, Task</span><br><span class="line"></span><br><span class="line">session = Session()</span><br><span class="line">first_task = session.query(Task).first()</span><br><span class="line">print(first_task)</span><br><span class="line"></span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>SQLAlchemy</tag>
        <tag>ORM</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas Efficient Data Storage Benchmark</title>
    <url>/2021/07/10/Pandas-Efficient-Data-Storage-Benchmark/</url>
    <content><![CDATA[<p>Do you agree that dealing with large data file is such a painful task? If yes, then you shouldn't ignore this post! In this post, I'll show you which is the best storage format to work with if you are using <code>Pandas</code>. Is it <code>csv</code>, <code>hdf5</code> or <code>parquet</code>? Let's find out.</p>
<p>First of all, we import some python packages that we will use in this benchmark</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="comment"># Store the result</span></span><br><span class="line">resutls = &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>Let's define this function to generate random data</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_test_data</span>(<span class="params">nrows=<span class="number">10000</span>, numerical_cols=<span class="number">2000</span>, text_cols=<span class="number">0</span>, text_length=<span class="number">10</span></span>):</span></span><br><span class="line">    s = <span class="string">&quot;&quot;</span>.join([random.choice(string.ascii_letters)</span><br><span class="line">                 <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(text_length)])</span><br><span class="line">    data = pd.concat([pd.DataFrame(np.random.random(size=(nrows, numerical_cols))),</span><br><span class="line">                      pd.DataFrame(np.full(shape=(nrows, text_cols), fill_value=s))],</span><br><span class="line">                     axis=<span class="number">1</span>, ignore_index=<span class="literal">True</span>)</span><br><span class="line">    data.columns = [<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> data.columns]</span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>
<h1 id="mixed-data-type">1. Mixed Data Type</h1>
<p>The first benchmark uses data that contains both text and numeric values.</p>
<h2 id="generate-test-data">1.1. Generate test data</h2>
<p>Now generate 50,000 rows, 1000 cols (500 is numerical, 500 is text)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;  df = generate_test_data(nrows=<span class="number">50000</span>, numerical_cols=<span class="number">500</span>, text_cols=<span class="number">500</span>)</span><br><span class="line">&gt;  df.info()</span><br><span class="line"></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"><span class="title">RangeIndex</span>:</span> <span class="number">50000</span> entries, <span class="number">0</span> to <span class="number">49999</span></span><br><span class="line">Columns: <span class="number">1000</span> entries, <span class="number">0</span> to <span class="number">999</span></span><br><span class="line">dtypes: float64(<span class="number">500</span>), <span class="built_in">object</span>(<span class="number">500</span>)</span><br><span class="line">memory usage: <span class="number">381.5</span>+ MB</span><br></pre></td></tr></table></figure>
<h2 id="parquet">1.2. Parquet</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parquet_file = Path(<span class="string">&#x27;test.parquet&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="file-size">File Size</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.to_parquet(parquet_file)</span><br><span class="line">size = parquet_file.stat().st_size</span><br></pre></td></tr></table></figure>
<h3 id="read">Read</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%timeit -o</span><br><span class="line">df = pd.read_parquet(parquet_file)</span><br></pre></td></tr></table></figure>
<p><em>2.54 s ± 137 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Record the read result</span></span><br><span class="line">read = _</span><br><span class="line"></span><br><span class="line"><span class="comment"># Delete the test file</span></span><br><span class="line">parquet_file.unlink()</span><br></pre></td></tr></table></figure>
<h3 id="write">Write</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%timeit -o</span><br><span class="line"></span><br><span class="line">df.to_parquet(parquet_file)</span><br><span class="line">parquet_file.unlink()</span><br></pre></td></tr></table></figure>
<p><em>11.1 s ± 154 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Record the write result</span></span><br><span class="line">write = _</span><br></pre></td></tr></table></figure>
<h3 id="results">Results</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results[<span class="string">&#x27;Parquet&#x27;</span>] = &#123;</span><br><span class="line">    <span class="string">&#x27;read&#x27;</span>: np.mean(read.all_runs), </span><br><span class="line">    <span class="string">&#x27;write&#x27;</span>: np.mean(write.all_runs), </span><br><span class="line">    <span class="string">&#x27;size&#x27;</span>: size&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;Parquet&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">2.5449909000002924</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">11.076020042857376</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">250677616</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="hdf5">1.3. HDF5</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_store = Path(<span class="string">&#x27;index.h5&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="fixed-format">1.3.1. Fixed Format</h3>
<p>Support fast writing/reading. Not-appendable, nor searchable.</p>
<h4 id="file-size-1">File Size</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> pd.HDFStore(test_store) <span class="keyword">as</span> store:</span><br><span class="line">    store.put(<span class="string">&#x27;file&#x27;</span>, df)</span><br><span class="line">size = test_store.stat().st_size</span><br></pre></td></tr></table></figure>
<h4 id="read-1">Read</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%timeit -o</span><br><span class="line"><span class="keyword">with</span> pd.HDFStore(test_store) <span class="keyword">as</span> store:</span><br><span class="line">    store.get(<span class="string">&#x27;file&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><em>2min 6s ± 1.41 s per loop (mean ± std. dev. of 7 runs, 1 loop each)</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">read = _</span><br><span class="line">test_store.unlink()</span><br></pre></td></tr></table></figure>
<h4 id="write-1">Write</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%timeit -r <span class="number">1</span> -o</span><br><span class="line"><span class="keyword">with</span> pd.HDFStore(test_store) <span class="keyword">as</span> store:</span><br><span class="line">    store.put(<span class="string">&#x27;file&#x27;</span>, df)</span><br><span class="line">test_store.unlink()</span><br></pre></td></tr></table></figure>
<p><em>18.1 s ± 0 ns per loop (mean ± std. dev. of 1 run, 1 loop each)</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">write = _</span><br></pre></td></tr></table></figure>
<h4 id="results-1">Results</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results[<span class="string">&#x27;HDF Fixed&#x27;</span>] = &#123;</span><br><span class="line">    <span class="string">&#x27;read&#x27;</span>: np.mean(read.all_runs), </span><br><span class="line">    <span class="string">&#x27;write&#x27;</span>: np.mean(write.all_runs), </span><br><span class="line">    <span class="string">&#x27;size&#x27;</span>: size&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;Parquet&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">2.5449909000002924</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">11.076020042857376</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">250677616</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;HDF Fixed&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">126.0261167285714</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">18.103147300000273</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">526559612</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="table-format">1.3.2 Table Format</h3>
<p>Write as a PyTables Table structure which may perform worse but allow more flexible operations like searching / selecting subsets of the data.</p>
<h4 id="file-size-2">File Size</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> pd.HDFStore(test_store) <span class="keyword">as</span> store:</span><br><span class="line">    store.append(<span class="string">&#x27;file&#x27;</span>, df, <span class="built_in">format</span>=<span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">size = test_store.stat().st_size  </span><br></pre></td></tr></table></figure>
<h4 id="read-2">Read</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%timeit -o</span><br><span class="line"><span class="keyword">with</span> pd.HDFStore(test_store) <span class="keyword">as</span> store:</span><br><span class="line">    df = store.get(<span class="string">&#x27;file&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><em>36.9 s ± 174 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">read = _</span><br><span class="line">test_store.unlink()</span><br></pre></td></tr></table></figure>
<h4 id="write-2">Write</h4>
<p>Note that <code>write</code> in table format does not work with text data.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%timeit -r <span class="number">1</span> -o</span><br><span class="line"><span class="keyword">with</span> pd.HDFStore(test_store) <span class="keyword">as</span> store:</span><br><span class="line">    store.append(<span class="string">&#x27;file&#x27;</span>, df, <span class="built_in">format</span>=<span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">test_store.unlink() </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><em>50.7 s ± 0 ns per loop (mean ± std. dev. of 1 run, 1 loop each)</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">write = _</span><br></pre></td></tr></table></figure>
<h4 id="results-2">Results</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results[<span class="string">&#x27;HDF Table&#x27;</span>] = &#123;<span class="string">&#x27;read&#x27;</span>: np.mean(read.all_runs), <span class="string">&#x27;write&#x27;</span>: np.mean(write.all_runs), <span class="string">&#x27;size&#x27;</span>: size&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;Parquet&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">2.5449909000002924</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">11.076020042857376</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">250677616</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;HDF Fixed&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">126.0261167285714</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">18.103147300000273</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">526559612</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;HDF Table&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">36.89537138571411</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">50.74519110000074</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">450753287</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="csv">1.4. CSV</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_csv = Path(<span class="string">&#x27;test.csv&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="file-size-3">File Size</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.to_csv(test_csv)</span><br><span class="line">test_csv.stat().st_size</span><br></pre></td></tr></table></figure>
<h3 id="read-3">Read</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%timeit -o</span><br><span class="line">df = pd.read_csv(test_csv)</span><br></pre></td></tr></table></figure>
<p><em>19.2 s ± 642 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">read = _</span><br><span class="line">test_csv.unlink()  </span><br></pre></td></tr></table></figure>
<h3 id="write-3">Write</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%timeit -o</span><br><span class="line">df.to_csv(test_csv)</span><br><span class="line">test_csv.unlink()</span><br></pre></td></tr></table></figure>
<p><em>1min 25s ± 307 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">write = _</span><br></pre></td></tr></table></figure>
<h3 id="results-3">Results</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results[<span class="string">&#x27;CSV&#x27;</span>] = &#123;<span class="string">&#x27;read&#x27;</span>: np.mean(read.all_runs), <span class="string">&#x27;write&#x27;</span>: np.mean(write.all_runs), <span class="string">&#x27;size&#x27;</span>: size&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;Parquet&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">2.5449909000002924</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">11.076020042857376</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">250677616</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;HDF Fixed&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">126.0261167285714</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">18.103147300000273</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">526559612</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;HDF Table&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">36.89537138571411</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">50.74519110000074</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">450753287</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;CSV&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">19.198365685714375</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">85.28064355714274</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">757038275</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="save-the-results">1.5. Save the results</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.DataFrame(results).assign(Data=<span class="string">&#x27;Mixed&#x27;</span>).to_csv(<span class="string">f&#x27;Mixed.csv&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="numeric-data-type">2. Numeric Data Type</h1>
<p>The second benchmark uses only numeric data types.</p>
<h2 id="generate-test-data-1">2.1. Generate test data</h2>
<p>Now generate 50,000 rows, 1000 numeric cols</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;  df = generate_test_data(nrows=<span class="number">50000</span>, numerical_cols=<span class="number">1000</span>, text_cols=<span class="number">0</span>)</span><br><span class="line">&gt;  df.info()</span><br><span class="line"></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"><span class="title">RangeIndex</span>:</span> <span class="number">50000</span> entries, <span class="number">0</span> to <span class="number">49999</span></span><br><span class="line">Columns: <span class="number">1000</span> entries, <span class="number">0</span> to <span class="number">999</span></span><br><span class="line">dtypes: float64(<span class="number">1000</span>)</span><br><span class="line">memory usage: <span class="number">381.5</span> MB</span><br></pre></td></tr></table></figure>
<h2 id="parquet-1">2.2. Parquet</h2>
<blockquote>
<p>Similar to 1.2</p>
</blockquote>
<h3 id="results-4">Results</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;Parquet&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">3.6358330142858386</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">8.220626242857179</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">500764950</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="hdfs">2.3. HDFS</h2>
<h3 id="fixed-format-1">2.3.1. Fixed Format</h3>
<blockquote>
<p>Similar to 1.3.1</p>
</blockquote>
<h4 id="results-5">Results</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;Parquet&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">3.6358330142858386</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">8.220626242857179</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">500764950</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;HDF Fixed&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">2.215434942857038</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">2.988903299999947</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">400411192</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="table-format-1">2.3.2. Table Format</h3>
<blockquote>
<p>Similar to 1.3.2</p>
</blockquote>
<h4 id="results-6">Results</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;Parquet&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">3.6358330142858386</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">8.220626242857179</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">500764950</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;HDF Fixed&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">2.215434942857038</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">2.988903299999947</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">400411192</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;HDF Table&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">1.9255916428573983</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">4.61305960000027</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">400649196</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="csv-1">2.4. CSV</h2>
<blockquote>
<p>Similar to 1.4</p>
</blockquote>
<h3 id="results-7">Results</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;Parquet&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">3.6358330142858386</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">8.220626242857179</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">500764950</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;HDF Fixed&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">2.215434942857038</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">2.988903299999947</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">400411192</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;HDF Table&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">1.9255916428573983</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">4.61305960000027</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">400649196</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;CSV&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">19.857885385714585</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">126.95752420000021</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">963788438</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<h1 id="results-8">3. Results</h1>
<h2 id="visualization">3.1. Visualization</h2>
<h3 id="read-4">Read</h3>
<p><img height="320" src="/images/2021-07-10/001.png"></p>
<h3 id="write-4">Write</h3>
<p><img height="320" src="/images/2021-07-10/002.png"></p>
<h3 id="file-size-4">File Size</h3>
<p><img height="320" src="/images/2021-07-10/003.png"></p>
<h2 id="so-what">3.2. So what?</h2>
<ul>
<li><code>Parquet</code> is the best option if your data is mixed.</li>
<li><code>HDF5</code> if your data only contains numeric data type.</li>
</ul>
]]></content>
      <categories>
        <category>Benchmark</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pandas</tag>
        <tag>HDF5</tag>
        <tag>Parquet</tag>
        <tag>CSV</tag>
        <tag>Benchmark</tag>
      </tags>
  </entry>
  <entry>
    <title>Schedule Task Runner with Celery</title>
    <url>/2020/11/27/Schedule-Task-Runner-with-Celery/</url>
    <content><![CDATA[<blockquote><p>Celery is a task queue with batteries included. It’s easy to use so that you can get started without learning the full complexities of the problem it solves. It’s designed around best practices so that your product can scale and integrate with other languages, and it comes with the tools and support you need to run such a system in production.</p>
<footer><strong>Celery</strong><cite><a href="https://docs.celeryproject.org/en/master/getting-started/first-steps-with-celery.html">docs.celeryproject.org/en/master/getting-started/first-steps-with-celery.html</a></cite></footer></blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install celery</span><br></pre></td></tr></table></figure>
<h1 id="choosing-a-broker">Choosing a Broker</h1>
<p>Celery requires a solution to send and receive messages; usually this comes in the form of a separate service called a message broker. In this example, I use RabbitMQ on docker for the most simple experiment.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 5672:5672 rabbitmq</span><br></pre></td></tr></table></figure>
<h1 id="the-application">The Application</h1>
<ul>
<li><p>Python code to define the task to run <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ./tasks.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">&#x27;tasks&#x27;</span>, broker=<span class="string">&#x27;amqp://localhost&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br></pre></td></tr></table></figure></p></li>
<li><p>Run the worker <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">celery -A tasks worker -l info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------- celery@Lap-012 v5.0.2 (singularity)</span><br><span class="line">--- ***** ----- </span><br><span class="line">-- ******* ---- Linux-5.4.0-54-generic-x86_64-with-debian-bullseye-sid 2020-11-27 10:13:21</span><br><span class="line">- *** --- * --- </span><br><span class="line">- ** ---------- [config]</span><br><span class="line">- ** ---------- .&gt; app:         tasks:0x7f5b26a11750</span><br><span class="line">- ** ---------- .&gt; transport:   amqp://guest:**@localhost:5672//</span><br><span class="line">- ** ---------- .&gt; results:     disabled://</span><br><span class="line">- *** --- * --- .&gt; concurrency: 8 (prefork)</span><br><span class="line">-- ******* ---- .&gt; task events: OFF (enable -E to monitor tasks in this worker)</span><br><span class="line">--- ***** ----- </span><br><span class="line"> -------------- [queues]</span><br><span class="line">                .&gt; celery           exchange=celery(direct) key=celery</span><br><span class="line">                </span><br><span class="line">[tasks]</span><br><span class="line">  . tasks.add</span><br><span class="line"></span><br><span class="line">[2020-11-27 10:13:21,496: INFO/MainProcess] Connected to amqp://guest:**@127.0.0.1:5672//</span><br><span class="line">[2020-11-27 10:13:21,506: INFO/MainProcess] mingle: searching for neighbors</span><br><span class="line">[2020-11-27 10:13:22,528: INFO/MainProcess] mingle: all alone</span><br><span class="line">[2020-11-27 10:13:22,568: INFO/MainProcess] celery@Lap-012 ready.</span><br></pre></td></tr></table></figure></p></li>
<li><p>The Scheduler, let add few more code to config schedule task <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ./tasks.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">&#x27;tasks&#x27;</span>, broker=<span class="string">&#x27;amqp://localhost&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">app.conf.beat_schedule = &#123;</span><br><span class="line">    <span class="string">&#x27;add-every-30-seconds&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;tasks.add&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;schedule&#x27;</span>: <span class="number">30.0</span>,</span><br><span class="line">        <span class="string">&#x27;args&#x27;</span>: (<span class="number">16</span>, <span class="number">16</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">app.conf.timezone = <span class="string">&#x27;UTC&#x27;</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>Run the scheduler, open new terminal and run <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">celery -A tasks beat -l info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">celery beat v5.0.2 (singularity) is starting.</span><br><span class="line">__    -    ... __   -        _</span><br><span class="line">LocalTime -&gt; 2020-11-27 10:18:19</span><br><span class="line">Configuration -&gt;</span><br><span class="line">    . broker -&gt; amqp://guest:**@localhost:5672//</span><br><span class="line">    . loader -&gt; celery.loaders.app.AppLoader</span><br><span class="line">    . scheduler -&gt; celery.beat.PersistentScheduler</span><br><span class="line">    . db -&gt; celerybeat-schedule</span><br><span class="line">    . logfile -&gt; [stderr]@%INFO</span><br><span class="line">    . maxinterval -&gt; 5.00 minutes (300s)</span><br><span class="line">[2020-11-27 10:18:19,508: INFO/MainProcess] beat: Starting...</span><br><span class="line">[2020-11-27 10:18:49,552: INFO/MainProcess] Scheduler: Sending due task add-every-30-seconds (tasks.add)</span><br></pre></td></tr></table></figure></p></li>
<li><p>You can check whether the worker is running on the terminal log <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[2020-11-27 10:19:19,546: INFO/MainProcess] Received task: tasks.add[b09eb21e-3e9f-459a-8069-d41b068d02c4]  </span><br><span class="line">[2020-11-27 10:19:19,549: INFO/ForkPoolWorker-5] Task tasks.add[b09eb21e-3e9f-459a-8069-d41b068d02c4] succeeded in 0.00027026102179661393s: 32</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h1 id="organize-all-together-using-docker-compose">Organize all together using docker-compose</h1>
<ul>
<li><p>./Dockerfile <figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install celery</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>./docker-compose.yml <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">rabbitmq:3.7</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">worker:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">MQ_HOST=rabbitmq</span></span><br><span class="line">    <span class="attr">depends_on:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">rabbitmq</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">celery</span> <span class="string">-A</span> <span class="string">tasks</span> <span class="string">worker</span> <span class="string">-l</span> <span class="string">info</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">sched:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">MQ_HOST=rabbitmq</span></span><br><span class="line">    <span class="attr">depends_on:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">rabbitmq</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">worker</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">celery</span> <span class="string">-A</span> <span class="string">tasks</span> <span class="string">beat</span> <span class="string">-l</span> <span class="string">info</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>./tasks.py <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">MQ_HOST = os.environ.get(<span class="string">&#x27;MQ_HOST&#x27;</span>, <span class="string">&#x27;localhost&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">&#x27;tasks&#x27;</span>, broker=<span class="string">f&#x27;amqp://<span class="subst">&#123;MQ_HOST&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">app.conf.beat_schedule = &#123;</span><br><span class="line">    <span class="string">&#x27;add-every-30-seconds&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;tasks.add&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;schedule&#x27;</span>: <span class="number">30.0</span>,</span><br><span class="line">        <span class="string">&#x27;args&#x27;</span>: (<span class="number">16</span>, <span class="number">16</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">app.conf.timezone = <span class="string">&#x27;UTC&#x27;</span></span><br></pre></td></tr></table></figure></p></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Celery</tag>
        <tag>Cronjob</tag>
        <tag>Docker</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Setup Apache Airflow Using Docker Compose</title>
    <url>/2021/05/08/Setup-Apache-Airflow-Using-Docker-Compose/</url>
    <content><![CDATA[<p><img width="480" src="/images/2021-05-08/001.png" /></p>
<p>Do you find it so complicated to set up <a href="https://airflow.apache.org/">Apache Airflow</a> for using right away? Don't worry, I can show you a simple and fast way! Are you ready? Then please take a look the instruction below.</p>
<h1 id="getting-started">Getting Started</h1>
<ul>
<li>Install <a href="https://docs.docker.com/engine/install/">docker</a> if you haven't.</li>
<li>Install <a href="https://docs.docker.com/compose/install/">Docker Compose &gt;= v1.27.0</a></li>
</ul>
<h1 id="download-docker-compose.yml">Download <code>docker-compose.yml</code></h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -LfO &#x27;https://airflow.apache.org/docs/apache-airflow/2.0.2/docker-compose.yaml&#x27;</span><br></pre></td></tr></table></figure>
<p>The <code>docker-compose.yml</code> file will look like this</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment"># or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment"># distributed with this work for additional information</span></span><br><span class="line"><span class="comment"># regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment"># to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment"># &quot;License&quot;); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment"># with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing,</span></span><br><span class="line"><span class="comment"># software distributed under the License is distributed on an</span></span><br><span class="line"><span class="comment"># &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span><br><span class="line"><span class="comment"># KIND, either express or implied.  See the License for the</span></span><br><span class="line"><span class="comment"># specific language governing permissions and limitations</span></span><br><span class="line"><span class="comment"># under the License.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING: This configuration is for local development. Do not use it in a production deployment.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This configuration supports basic configuration using environment variables or an .env file</span></span><br><span class="line"><span class="comment"># The following variables are supported:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># AIRFLOW_IMAGE_NAME         - Docker image name used to run Airflow.</span></span><br><span class="line"><span class="comment">#                              Default: apache/airflow:master-python3.8</span></span><br><span class="line"><span class="comment"># AIRFLOW_UID                - User ID in Airflow containers</span></span><br><span class="line"><span class="comment">#                              Default: 50000</span></span><br><span class="line"><span class="comment"># AIRFLOW_GID                - Group ID in Airflow containers</span></span><br><span class="line"><span class="comment">#                              Default: 50000</span></span><br><span class="line"><span class="comment"># _AIRFLOW_WWW_USER_USERNAME - Username for the administrator account.</span></span><br><span class="line"><span class="comment">#                              Default: airflow</span></span><br><span class="line"><span class="comment"># _AIRFLOW_WWW_USER_PASSWORD - Password for the administrator account.</span></span><br><span class="line"><span class="comment">#                              Default: airflow</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Feel free to modify this file to suit your needs.</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">x-airflow-common:</span></span><br><span class="line">  <span class="string">&amp;airflow-common</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">$&#123;AIRFLOW_IMAGE_NAME:-apache/airflow:2.0.2&#125;</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="string">&amp;airflow-common-env</span></span><br><span class="line">    <span class="attr">AIRFLOW__CORE__EXECUTOR:</span> <span class="string">CeleryExecutor</span></span><br><span class="line">    <span class="attr">AIRFLOW__CORE__SQL_ALCHEMY_CONN:</span> <span class="string">postgresql+psycopg2://airflow:airflow@postgres/airflow</span></span><br><span class="line">    <span class="attr">AIRFLOW__CELERY__RESULT_BACKEND:</span> <span class="string">db+postgresql://airflow:airflow@postgres/airflow</span></span><br><span class="line">    <span class="attr">AIRFLOW__CELERY__BROKER_URL:</span> <span class="string">redis://:@redis:6379/0</span></span><br><span class="line">    <span class="attr">AIRFLOW__CORE__FERNET_KEY:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION:</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">    <span class="attr">AIRFLOW__CORE__LOAD_EXAMPLES:</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">    <span class="attr">AIRFLOW__API__AUTH_BACKEND:</span> <span class="string">&#x27;airflow.api.auth.backend.basic_auth&#x27;</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./dags:/opt/airflow/dags</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./logs:/opt/airflow/logs</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./plugins:/opt/airflow/plugins</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">&quot;$&#123;AIRFLOW_UID:-50000&#125;:$&#123;AIRFLOW_GID:-50000&#125;&quot;</span></span><br><span class="line">  <span class="attr">depends_on:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">condition:</span> <span class="string">service_healthy</span></span><br><span class="line">    <span class="attr">postgres:</span></span><br><span class="line">      <span class="attr">condition:</span> <span class="string">service_healthy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">postgres:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:13</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">POSTGRES_USER:</span> <span class="string">airflow</span></span><br><span class="line">      <span class="attr">POSTGRES_PASSWORD:</span> <span class="string">airflow</span></span><br><span class="line">      <span class="attr">POSTGRES_DB:</span> <span class="string">airflow</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">postgres-db-volume:/var/lib/postgresql/data</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;pg_isready&quot;</span>, <span class="string">&quot;-U&quot;</span>, <span class="string">&quot;airflow&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">5s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6379</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;redis-cli&quot;</span>, <span class="string">&quot;ping&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">5s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">30s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">airflow-webserver:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*airflow-common</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">webserver</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;--fail&quot;</span>, <span class="string">&quot;http://localhost:8080/health&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">airflow-scheduler:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*airflow-common</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">scheduler</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">airflow-worker:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*airflow-common</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">celery</span> <span class="string">worker</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">airflow-init:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*airflow-common</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">version</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="string">&lt;&lt;:</span> <span class="string">*airflow-common-env</span></span><br><span class="line">      <span class="attr">_AIRFLOW_DB_UPGRADE:</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      <span class="attr">_AIRFLOW_WWW_USER_CREATE:</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      <span class="attr">_AIRFLOW_WWW_USER_USERNAME:</span> <span class="string">$&#123;_AIRFLOW_WWW_USER_USERNAME:-airflow&#125;</span></span><br><span class="line">      <span class="attr">_AIRFLOW_WWW_USER_PASSWORD:</span> <span class="string">$&#123;_AIRFLOW_WWW_USER_PASSWORD:-airflow&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">flower:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*airflow-common</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">celery</span> <span class="string">flower</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5555</span><span class="string">:5555</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;--fail&quot;</span>, <span class="string">&quot;http://localhost:5555/&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">postgres-db-volume:</span></span><br></pre></td></tr></table></figure>
<h1 id="initialize-the-environment">Initialize the environment</h1>
<ul>
<li>Prepare some folders to store application data and script</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir ./dags ./logs ./plugins</span><br><span class="line"></span><br><span class="line">echo -e &quot;AIRFLOW_UID=$(id -u)\nAIRFLOW_GID=0&quot; &gt; .env</span><br></pre></td></tr></table></figure>
<ul>
<li>Initialize database</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up airflow-init</span><br></pre></td></tr></table></figure>
<ul>
<li>Use the login user <code>airflow</code> and the password <code>airflow</code>.</li>
</ul>
<h1 id="start-the-application">Start the application</h1>
<ul>
<li>Start all containers defined in the docker-compose.yml</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure>
<ul>
<li>Access the web interface <code>http://localhost:8080</code></li>
</ul>
<h1 id="how-to-install-additional-python-packages">How to install additional python packages</h1>
<ul>
<li>Create new file <code>Dockerfile</code> to customize airflow image based on <code>apache/airflow:2.0.2</code></li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> apache/airflow:<span class="number">2.0</span>.<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Now install the pandas package</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install pandas</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Or install all packages from requirements.txt</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> requirements.txt requirements.txt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install -r requirements.txt</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Update the <code>docker-compose.yml</code></li>
</ul>
<p>Change the line <code>image: $&#123;AIRFLOW_IMAGE_NAME:-apache/airflow:2.0.2&#125;</code> to <code>build: .</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">x-airflow-common:</span></span><br><span class="line">  <span class="string">&amp;airflow-common</span></span><br><span class="line">  <span class="comment"># image: $&#123;AIRFLOW_IMAGE_NAME:-apache/airflow:2.0.2&#125;</span></span><br><span class="line">  <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><p>Build the image by run the command <code>docker-compose build</code></p></li>
<li><p>Run the updated image <code>docker-compose up</code></p></li>
</ul>
<h1 id="reference">Reference</h1>
<ul>
<li><a href="https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html">Airflow Docs</a></li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Docker</tag>
        <tag>Airflow</tag>
        <tag>docker-compose</tag>
      </tags>
  </entry>
  <entry>
    <title>The First Birthday of Donnie</title>
    <url>/2021/05/14/The-First-Birthday-of-Donnie/</url>
    <content><![CDATA[<p><img src="/images/2021-05-14/001.jpg"></p>
<p>That was a day of summer, our son turned one and enjoyed his very first birthday from when his new journey began. He also got a new nickname - Donnie, actually the nickname came from his previous one, Dino (Dinosaur). He's growing as fast as the waterfall of time, just a glance and now he can walk by his own, he can say "papa", "mama", "mum mum"... Sooner or later, Donnie will attend the preschool program. I'm writing this blog to save the date Donnie had his first birthday.</p>
<p>The first birthday of every baby is an important occasion, marking a new period of its life has just begun. In Vietnamese, this ceremony is called "Lễ Thôi Nôi" or "Lễ Đầy Năm", originally come from Chinese culture since Chinese people immigrated to Vietnam. However, the ceremony can be different depending on each family's tradition and origins. For example, the first birthday ceremony of my family members is very simple, some other families even don't celebrate it until their babies turn two or three years old. For my son's ceremony, we decided to celebrate fully as Vietnamese culture. The purpose of the ceremony is expressing gratefulness to Twelve Goddesses (12 Bà Mụ) and Three Gods (3 Đức Thầy), who have been blessing our son's growth and future career, then we all pray the best wishes for him. There is an interesting part of the ceremony, every baby will pick or choose one of many different items that can predict his or her future career, which is considered to be pretty accurate.</p>
<p>Due to the complicated situation of Covid-19, we couldn't set up a big party and invite relatives and friends to join us. We preparing everything for the ceremony, including food, fruits, offerings, decoration and birthday cake. Food includes boiled chicken, pork, rice soup, white cow-bean sweet gruel, 4-color sticky rice. For decorating, she purchased many lovely blue and grey balloons, blowing them all, then hanging on the wall to form cloud of balloons, which created a stunning background for shooting photos. My wife got up early and displayed the food and offerings on a table, lighting up candles and incense for the ceremony to start. We pray to Goddesses and Gods with respect to bless our little Donnie. The ceremony finished as soon as the incense fired to the end. Donnie started stepping forward to pick up one item that represents the future career. In front of him, there were a laptop, a notebook, a pen, a ruler, a box of English flashcards, etc. Can you guess Which one he would choose? Surprisingly, he picked up the pen! The pen can represent for creative jobs, such as writer, author, novelist, journalist, composer, script writer, etc. or even artist! There were 13 dishes of sticky rice, 13 bowls of sweet bean gruel, and 13 bowls of rice soup. My wife shared the sticky rice and sweet bean gruel to our neighbors as special gifts. We took some photos of Donnie with the balloons background, and that was all.</p>
<p>You see how time flies no matter what happens. Looking at Donnie growing day by day, it reminds me the song "Slipping through my fingers" by ABBA. Let's take some times to listen to this song, you will know what I mean ;) It's great song, and you can feel it when you have children too. Oh believe me, I'm not a cheesy person, but the older we grow, the deeper we think and feel. Finally to our son, be strong and happy, Donnie! We're always by your side and always love you more than 3000 times!</p>
<div class="video-container"><iframe src="https://www.youtube.com/embed/lQj_DtAwmeM" frameborder="0" loading="lazy" allowfullscreen></iframe></div>
]]></content>
      <categories>
        <category>Living</category>
      </categories>
      <tags>
        <tag>Living</tag>
        <tag>Family</tag>
        <tag>My Life Story</tag>
      </tags>
  </entry>
  <entry>
    <title>Use Vagrant for cross environment development</title>
    <url>/2020/12/28/Use-Vagrant-for-cross-environment-development/</url>
    <content><![CDATA[<blockquote><h4>
What's Vagrant?
</h4>
<p>Vagrant is a tool for building and managing virtual machine environments in a single workflow. With an easy-to-use workflow and focus on automation, Vagrant lowers development environment setup time, increases production parity, and makes the "works on my machine" excuse a relic of the past.</p>
<h4>
Why Vagrant?
</h4>
<p>Vagrant provides easy to configure, reproducible, and portable work environments built on top of industry-standard technology and controlled by a single consistent workflow to help maximize the productivity and flexibility of you and your team.</p>
<footer><strong>Vagrant</strong><cite><a href="https://www.vagrantup.com/intro">www.vagrantup.com/intro</a></cite></footer></blockquote>
<h1 id="getting-started">Getting Started</h1>
<ul>
<li><a href="https://www.virtualbox.org/wiki/Downloads">Download</a> VirtualBox for virtualization</li>
<li><a href="https://www.vagrantup.com/downloads">Download</a> and install Vagrant</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install virtualbox</span><br><span class="line"></span><br><span class="line">curl -O https://releases.hashicorp.com/vagrant/2.2.9/vagrant_2.2.9_x86_64.deb</span><br><span class="line">sudo apt install ./vagrant_2.2.9_x86_64.deb</span><br></pre></td></tr></table></figure>
<h1 id="init-environment">Init environment</h1>
<p>Run the command to init a new vagrant development environment using <code>ubuntu 20.04</code>.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vagrant init bento/ubuntu-20.04</span><br></pre></td></tr></table></figure>
<p>The script will generate a initial <code>Vagrantfile</code>.</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># All Vagrant configuration is done below. The &quot;2&quot; in Vagrant.configure</span></span><br><span class="line"><span class="comment"># configures the configuration version (we support older styles for</span></span><br><span class="line"><span class="comment"># backwards compatibility). Please don&#x27;t change it unless you know what</span></span><br><span class="line"><span class="comment"># you&#x27;re doing.</span></span><br><span class="line">Vagrant.configure(<span class="string">&quot;2&quot;</span>) <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">  <span class="comment"># The most common configuration options are documented and commented below.</span></span><br><span class="line">  <span class="comment"># For a complete reference, please see the online documentation at</span></span><br><span class="line">  <span class="comment"># https://docs.vagrantup.com.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Every Vagrant development environment requires a box. You can search for</span></span><br><span class="line">  <span class="comment"># boxes at https://vagrantcloud.com/search.</span></span><br><span class="line">  config.vm.box = <span class="string">&quot;bento/ubuntu-20.04&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Disable automatic box update checking. If you disable this, then</span></span><br><span class="line">  <span class="comment"># boxes will only be checked for updates when the user runs</span></span><br><span class="line">  <span class="comment"># `vagrant box outdated`. This is not recommended.</span></span><br><span class="line">  <span class="comment"># config.vm.box_check_update = false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Create a forwarded port mapping which allows access to a specific port</span></span><br><span class="line">  <span class="comment"># within the machine from a port on the host machine. In the example below,</span></span><br><span class="line">  <span class="comment"># accessing &quot;localhost:8080&quot; will access port 80 on the guest machine.</span></span><br><span class="line">  <span class="comment"># <span class="doctag">NOTE:</span> This will enable public access to the opened port</span></span><br><span class="line">  <span class="comment"># config.vm.network &quot;forwarded_port&quot;, guest: 80, host: 8080</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Create a forwarded port mapping which allows access to a specific port</span></span><br><span class="line">  <span class="comment"># within the machine from a port on the host machine and only allow access</span></span><br><span class="line">  <span class="comment"># via 127.0.0.1 to disable public access</span></span><br><span class="line">  <span class="comment"># config.vm.network &quot;forwarded_port&quot;, guest: 80, host: 8080, host_ip: &quot;127.0.0.1&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Create a private network, which allows host-only access to the machine</span></span><br><span class="line">  <span class="comment"># using a specific IP.</span></span><br><span class="line">  <span class="comment"># config.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.10&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Create a public network, which generally matched to bridged network.</span></span><br><span class="line">  <span class="comment"># Bridged networks make the machine appear as another physical device on</span></span><br><span class="line">  <span class="comment"># your network.</span></span><br><span class="line">  <span class="comment"># config.vm.network &quot;public_network&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Share an additional folder to the guest VM. The first argument is</span></span><br><span class="line">  <span class="comment"># the path on the host to the actual folder. The second argument is</span></span><br><span class="line">  <span class="comment"># the path on the guest to mount the folder. And the optional third</span></span><br><span class="line">  <span class="comment"># argument is a set of non-required options.</span></span><br><span class="line">  <span class="comment"># config.vm.synced_folder &quot;../data&quot;, &quot;/vagrant_data&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Provider-specific configuration so you can fine-tune various</span></span><br><span class="line">  <span class="comment"># backing providers for Vagrant. These expose provider-specific options.</span></span><br><span class="line">  <span class="comment"># Example for VirtualBox:</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># config.vm.provider &quot;virtualbox&quot; do |vb|</span></span><br><span class="line">  <span class="comment">#   # Display the VirtualBox GUI when booting the machine</span></span><br><span class="line">  <span class="comment">#   vb.gui = true</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#   # Customize the amount of memory on the VM:</span></span><br><span class="line">  <span class="comment">#   vb.memory = &quot;1024&quot;</span></span><br><span class="line">  <span class="comment"># end</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># View the documentation for the provider you are using for more</span></span><br><span class="line">  <span class="comment"># information on available options.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Enable provisioning with a shell script. Additional provisioners such as</span></span><br><span class="line">  <span class="comment"># Ansible, Chef, Docker, Puppet and Salt are also available. Please see the</span></span><br><span class="line">  <span class="comment"># documentation for more information about their specific syntax and use.</span></span><br><span class="line">  <span class="comment"># config.vm.provision &quot;shell&quot;, inline: &lt;&lt;-SHELL</span></span><br><span class="line">  <span class="comment">#   apt-get update</span></span><br><span class="line">  <span class="comment">#   apt-get install -y apache2</span></span><br><span class="line">  <span class="comment"># SHELL</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Enable <code>config.vm.synced_folder "./", "/vagrant_data"</code> to share folder with the virtual machine.</li>
<li>Enable <code>config.vm.network "forwarded_port", guest: 80, host: 8080</code> to expose virtual machine port <code>80</code> to <code>localhost:8080</code></li>
<li>To install required packages on init. Enable:</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">config.vm.provision <span class="string">&quot;shell&quot;</span>, <span class="symbol">inline:</span> &lt;&lt;-SHELL</span><br><span class="line">  apt-get update</span><br><span class="line">  apt-get install url -y </span><br><span class="line">  curl <span class="symbol">https:</span>/<span class="regexp">/raw.githubusercontent.com/creationix</span><span class="regexp">/nvm/master</span><span class="regexp">/install.sh | bash</span></span><br><span class="line"><span class="regexp">SHELL</span></span><br></pre></td></tr></table></figure>
<h1 id="up-and-run">Up and run</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vagrant up</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Bringing machine &#x27;default&#x27; up with &#x27;virtualbox&#x27; provider...</span><br><span class="line">==&gt; default: Box &#x27;bento/ubuntu-20.04&#x27; could not be found. Attempting to find and install...</span><br><span class="line">    default: Box Provider: virtualbox</span><br><span class="line">    default: Box Version: &gt;= 0</span><br><span class="line">==&gt; default: Loading metadata for box &#x27;bento/ubuntu-20.04&#x27;</span><br><span class="line">    default: URL: https://vagrantcloud.com/bento/ubuntu-20.04</span><br><span class="line">==&gt; default: Adding box &#x27;bento/ubuntu-20.04&#x27; (v202012.23.0) for provider: virtualbox</span><br><span class="line">    default: Downloading: https://vagrantcloud.com/bento/boxes/ubuntu-20.04/versions/202012.23.0/providers/virtualbox.box</span><br><span class="line">==&gt; default: Box download is resuming from prior download progress</span><br><span class="line">Download redirected to host: vagrantcloud-files-production.s3.amazonaws.com</span><br><span class="line">Progress: 0% (Rate: 215k/s, Estimated time remaining: 0:34:56)</span><br></pre></td></tr></table></figure>
<h1 id="connect-to-the-vm">Connect to the VM</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vagrant ssh</span><br></pre></td></tr></table></figure>
<h1 id="stop-the-vm">Stop the VM</h1>
<ul>
<li>Stop without destroy the VM</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vagrant halt</span><br></pre></td></tr></table></figure>
<ul>
<li>Stop and destroy the VM</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vagrant destroy</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Productivity</tag>
        <tag>VirtualBox</tag>
      </tags>
  </entry>
  <entry>
    <title>How to replace environment variables in a file</title>
    <url>/2021/01/28/how-to-replace-environment-variables-in-a-file/</url>
    <content><![CDATA[<h1 id="load-environment-from-.env-file">1. Load environment from <code>.env</code> file</h1>
<ul>
<li><p>Let say we have a <code>.env</code> file: <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">WEBSITE_URL=https://hienhoang.ml</span><br><span class="line">USERNAME=hienhoang</span><br><span class="line">PASSWORD=p@ssword</span><br></pre></td></tr></table></figure></p></li>
<li><p>Then run this script will load all environment variables to current shell terminal <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export $(grep -v &#x27;^#&#x27; .env | xargs)</span><br></pre></td></tr></table></figure></p></li>
<li><p>You can also unset variables using below script <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unset $(grep -v &#x27;^#&#x27; .env | sed -E &#x27;s/(.*)=.*/\1/&#x27; | xargs)</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h1 id="substitute-all-environment-variables-in-a-file">2. Substitute all environment variables in a file</h1>
<ul>
<li><p><code>template.yml</code> <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">website:</span> $&#123;WEBSITE_URL&#125;</span><br><span class="line"><span class="symbol">username:</span> $&#123;USERNAME&#125;</span><br><span class="line"><span class="symbol">password:</span> $&#123;PASSWORD&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>Run this script to substitute variable in the <code>template.yml</code> file and output to <code>config.yml</code> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">envsubst &lt; template.yml &gt; config.yml</span><br></pre></td></tr></table></figure></p></li>
<li><p>Result is the <code>config.yml</code> <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">website:</span> <span class="symbol">https:</span>/<span class="regexp">/hienhoang.ml</span></span><br><span class="line"><span class="regexp">username: hienhoang</span></span><br><span class="line"><span class="regexp">password: p@ssword</span></span><br></pre></td></tr></table></figure></p></li>
</ul>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
        <tag>Script</tag>
      </tags>
  </entry>
  <entry>
    <title>Visualize high-dimensional dataset in a 2D Chart.</title>
    <url>/2020/10/23/how-to-visualize-your-dataset-in-a-2d-or-3d-chart/</url>
    <content><![CDATA[<p><img src="/images/2020-10-23/001.png" /> In this post, I'll use a well known dataset <a href="http://yann.lecun.com/exdb/mnist/">MINIST handwritten</a>. There are <code>70,000</code> images, each image in this dataset is of size <code>28x28</code>.</p>
<h4 id="first-import-the-libraries-we-are-going-to-use.">First, import the libraries we are going to use.</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> manifold</span><br><span class="line"></span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure>
<p>I'm using <code>matplotlib</code> and <code>seaborn</code> for visualization. <code>numpy</code> and <code>pandas</code> to handle numerical arrays and dataframe. I'm also use <code>scikit-learn</code> to get the data and perform <code>t-SNE</code>.</p>
<h4 id="download-the-dataset">Download the dataset</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = datasets.fetch_openml(<span class="string">&#x27;mnist_784&#x27;</span>, version=<span class="number">1</span>, return_X_y=<span class="literal">True</span>)</span><br><span class="line">pixel_values, targets = data</span><br><span class="line">targets = targets.astype(<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">print(pixel_values.shape)</span><br></pre></td></tr></table></figure>
<p><strong>(70000, 784)</strong></p>
<p>The dataset downloaded has 70,000 records, each record has 784 columns.</p>
<h4 id="lets-plot-an-image-to-see-what-does-it-look-like">Let's plot an image to see what does it look like</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">image = pixel_values[<span class="number">0</span>, :].reshape(<span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line">plt.imshow(image, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br></pre></td></tr></table></figure>

<div style="display:flex;align-items:start"><img src="/images/2020-10-23/002.png" /></div>

<p>The image in the dataset has size <code>768</code>, so I need convert it to <code>28x28</code>.</p>
<h4 id="now-the-importance-part-compute-t-sne">Now the importance part, compute t-SNE</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tsne = manifold.TSNE(n_components=<span class="number">2</span>, random_state=<span class="number">42</span>)</span><br><span class="line">transformed_data = tsne.fit_transform(pixel_values[:<span class="number">6000</span>, :])</span><br><span class="line"></span><br><span class="line">print(transformed_data.shape)</span><br></pre></td></tr></table></figure>
<p><strong>(6000, 2)</strong></p>
<p>In this example, I using only <code>6000</code> rows, and reduce the columns from <code>768</code> to <code>2</code>. Enough for plotting the data to 2D chart.</p>
<h4 id="lets-visualize-the-transformed-dataset">Let's visualize the transformed dataset</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tsne_df = pd.DataFrame(np.column_stack((transformed_data, targets[:<span class="number">6000</span>])), columns=[<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;targets&#x27;</span>])</span><br><span class="line">tsne_df.loc[:, <span class="string">&#x27;targets&#x27;</span>] = tsne_df.targets.astype(<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">grid = sns.FacetGrid(tsne_df, hue=<span class="string">&#x27;targets&#x27;</span>, height=<span class="number">8</span>)</span><br><span class="line">grid.<span class="built_in">map</span>(plt.scatter, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>).add_legend()</span><br></pre></td></tr></table></figure>

<div style="display:flex;align-items:start"><img src="/images/2020-10-23/003.png" /></div>

<p>This is one way to visualize dataset. By plotting the dataset in the chart, we can see that, the number <code>0</code> and <code>6</code> are distinguishable easily. The number <code>4</code> and <code>9</code> are harder to distinguish.</p>
]]></content>
      <categories>
        <category>Analytics</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Data visualization</tag>
        <tag>Chart</tag>
        <tag>Decomposition</tag>
        <tag>t-SNE</tag>
        <tag>Jupyter Notebook</tag>
        <tag>MNIST</tag>
        <tag>Matplotlib</tag>
        <tag>Seaborn</tag>
      </tags>
  </entry>
  <entry>
    <title>The Chinese Double Ninth Festival</title>
    <url>/2020/10/26/the-chinese-double-ninth-festival/</url>
    <content><![CDATA[<p><img src="/images/2020-10-26/001.jpg" /></p>
<p>Hey, how do you do? Today I'm going to tell you about one of many traditional Chinese festival, which is called The Double Ninth Festival (<strong>Chong Yang</strong> Festival or <strong>Chung Yeung</strong> Festival in China, Hong Kong, Macao and Taiwan, Vietnamese: <strong>Tết Trùng Cửu</strong> or <strong>Tết Trùng Dương</strong>), as it occurs on the ninth day of the ninth month of the Chinese calendar. I possess the Guangdong origin, so to me and many other Guangdong people, it's a special occasion to visit our ancestors, tidy up their graves and express our respects and gratefulness. It happens every year with the same ceremony, but my feelings change every time I experience the festival. Last Saturday, I caught the bus that took me almost 8 hours, for about 300km from Ho Chi Minh City to my home town in Lam Dong Province, to attend The Double Ninth Festival on Sunday. This time brought to me some emotional moments that I wanted to share to you guys as soon as I went back to the city. So, are you ready for what I'm going to tell you now? Ok, scroll down to read more!</p>
<p>After 8 hours on the bus, I finally arrived home in the late evening, about 7:30pm. I made a video call to my wife to say I was safe and sound at home already. This time I went back to my hometown without her, as she needs to take care our 5-month-old baby. So, I just felt a little empty there, but after the festival, I would see her on Monday.</p>
<p>Waking up in the Sunday morning embraced by the cool atmosphere, I felt relax and time seemed to fly slowly. I made myself a cup of coffee, oh I really miss the taste of coffee that my wife preopares for me every morning. I have never found anyone making coffee more stunning than she does, even including me. She usually says the secret recipe is her love for me that make the coffee's flavor more beautiful. You see, I totally completely agree!</p>
<p>After breakfast, my mom and I were ready to go to the cemetery for the Chinese ancestors. My mom had prepared all the worship things, such as boiled chicken &amp; pork, wine, cooked rice, bunch of incense, votive paper, etc., all for the ceremony. We would visit my grandpa's grave first, then my dad's as usual. The road led to the cemetary hadn't been upgraded yet so it was still rocky and wild. Luckily, it was sunny on that day so the road was easy for people to move. Weeds were almost everywhere in the cemetery, covering my grandpa's and dad's graves. As my grandpa's one were built with cement, under the changes of weather with rainy and sunny days, it became mossy and ancient. My cleared up the weeds while my mom setting up all the worship things in front of the grave. In the cemetery, there were not only us, but also other families. The smoke of burned incenses spreaded in the air, following the wind up to the sky, which made the whole scene there more magical and emotional. I remember many years ago, when I was little boy just started having memory, my grandpa was a gentle man who also love drinking coffee like me today. Once I watched him making a cup of coffee with glittering eyes, he turned and said to me with a smile on his face, "You are not old enough to drink coffee, kid." Such a lovely memory, right!</p>
<p>About an hour later, we walked to my dad's grave. Unlike my grandpa's, his grave was smaller and hadn't been built with cement yet, just been covered with earth where weeds were overgrown. I used a hoe to tidy up those weeds, at the same time, my mom arranged worship things in front of the grave. The incense again spreaded in the air. It was nearly noon, hot but windy, I was standing there, looking at my dad's photo on the cold gravestone, I realized that I a little bit missed him. There was a farm next to the cemetery, which reminded me the moments when he had been with me. At that time, I was still a little boy, following him to our coffee farm on a hill by bikes. In order to get there, we had to came across a stream. That was my first time going there, he had told me to stop and go off the bike, then walk across the stream. However, it was a new adventure for a boy, I was so excited that I forgot what he had told. I came across the stream with all my wild heart and spirit, my bike cut through the stream without a second of hesitation, making water splashed on both sides, then bumping into my dad's bike. He was panic a little bit, while I was laughing out loud. Another hour passed, we packed the food and went home, left behind the incense smoke...</p>
<p>Memory of childhood is something beautiful to me. Life is short, so treasure our present before it turns to memory that would make we smile when we getting old. One day of The Double Ninth Festival was over. We went home to have lunch and take a rest. I came back to Ho Chi Minh city on that night with lots of feelings. Maybe I have grown up a little bit. Maybe I learned something in my life. Finally, thank you all for reading up to this line. Bye and enjoy!</p>
]]></content>
      <categories>
        <category>Living</category>
      </categories>
      <tags>
        <tag>Living</tag>
        <tag>My Life Story</tag>
        <tag>Chung Yeung</tag>
        <tag>Anniversary</tag>
      </tags>
  </entry>
  <entry>
    <title>When I become Daddy</title>
    <url>/2020/11/14/when-i-become-father/</url>
    <content><![CDATA[<p>Hello there, how are you today? My answer is <strong>"Better than good"</strong> if you ask :) Today I would like to tell you about how I have changed since I knew I was going to be called <em>Daddy</em>. That is one of the most beautiful stories in my life. After 5 years together, we finally have a baby. At this time last year, I spent a trip to Dalat City in Lam Dong, for my wife as her birthday gift, when we had no idea that our baby was about 2 months old. Until we came back to work, she got a health check, then the baby turned 3 months. WOW, yeah, she texted me that amazing good news when I was working in the office. I knew, from that moment, my life - our lives - started changing to be better and happier with the new beloved member.</p>
<p><img src="/images/2020-12-15/001.jpg"></p>
<p>My wife got a warning from a doctor because she missed the previous health checks for the baby, which made her worried for a while. She likes drinking chill beers and some kinds of alcohol, but don't get me wrong, she enjoys its tastes, not a kind of alcoholic. When we were in Dalat City, we had a night in a bar, drinking some cocktail. Therefore, she was worried for the baby's development. As the result, after a full health check, our baby was fine. I realized that I must have changed to be stronger than ever, in both financial as well as emotional aspects, in order to take care of her and our baby better.</p>
<p>That the night my wife gave birth to our baby was also so unforgetable to us. Two days before the surgery date, after the midnight, she was unexpectedly in travail, rupture of amniotic fluid. We rushed to the international hospital that was 14km in distance, where she had registered to get surgery. It was 3:00 am, luckily, the street was empty throughout the way we went. We sat in the taxi and prayed. I prayed everything would be fine, my wife and our baby could come over this situation without hurt. At 5:18am, our baby was born, safe and sound!</p>
<p>"Oh Congratulation! Here you are, a football player!", the doctor said with a smile.</p>
<p>It was funny that we hadn't known our baby's gender until that moment came. We had a son! His crying sound was lovely and special to me! He was laying on his mother's chest and crying out loud gently. I was so happy that almost forgot to take pictures, a nurse kindly reminded me. After 9 months, we finally met each other, son! 15 minutes later, our son was brought to warming room. When I hold him im my arms, I felt amazing, unbelievable, sweet and complete. He was strong, healthy, sleeping like an angel. Since then, our lives routine changed quite much to take care of him.</p>
<p><img src="/images/2020-12-15/002.jpg"></p>
<p>I would like to share top things I have changed since my wife got pregnant.</p>
<ol type="1">
<li>Doing houseworks in smart way</li>
</ol>
<p>After knowing my wife got pregnant, I started looking for a bigger and more convenient apartment for her to live. The one we chose was 63m2 with kitchen and two private rooms. My wife enjoyed cooking quite much so when there was the kitchen there, she could cooked healthy fresh dishes for us, espcially for the baby as well. I wasn't good at cooking but I could support her in washing dishes after meals, cleaning the floors, carrying heavy stuffs, etc. Doing lots of houseworks made me realize that how incredible my wife got through all everyday while she was still going to work. Unexpectedly, there was a big changes in human resource in my wife's company, because of her pregnancy, she had to leave the position according to the new company policy. Then my wife stayed at home alone and relaxed, while I was still working during the Covid-19. I bought her a washing dishes machine, a portable vacuum cleaner, and a pressure cooker to help things done faster and easier. Shortly after that, due to the growth of Covid-19, the government asked people to work from home, I could stay with my wife. It was a very good news to my wife, because she had someone to talk and take care of her.</p>
<ol start="2" type="1">
<li>Being a better listener</li>
</ol>
<p>I admit that I am not a good listener, but for my wife, I am trying to learn how to be her listener. Pregnant women are usually sensitive, grumpy and have a lot of thoughts. Fortunately, although my wife is open-minded and she seemed to be happier after having the baby, she still had some negative thoughts and fears inside. So I needed to be her mental support, reading her emotions and listening to her thoughts without any judgment. Especially after she gave birth to our baby, she faced huge changes in both physical and mental. I have been always by her side to help easing her bad feelings, together taking care of the baby.</p>
<ol start="3" type="1">
<li>Leanring to become richer. Being more mature and responsible</li>
</ol>
<p>Small renting rooms are not suitable for us anymore. Now we have a child, he needs a better environemnt for living and growing, for example, better educations, better neighbors, better health care etc. Therefore, we become more serious about the future with bigger houses and greater amount of assets. I began watching videos from rich successful people, learning their mindsets and taking their advices, then improving our values to get better chances in lives. Having baby motivates us so much to do harder to get richer and richer. And we strongly believe that we will soon have a beautiful villa and high standard living conditions.</p>
<p>Some of my friends told me that I have looked more mature or older after having baby. I consider it as a praise. I want to be a great and responsible dad to guide our child to become an excellent person too.</p>
<ol start="4" type="1">
<li>Habbits &amp; Hobbies</li>
</ol>
<p>There are some new habits approaching me after our son was born. For instance, shooting photos of my litlle family to save the simple beautiful moments of our daily life with our son. He is super cute and growing so fast that we want to keep those sweet memories forever. I bought a new camera and we are saving budget to travel together and capture beautiful scenes. I didnot have that habit before.</p>
<p>Now, everyday I have felt more excited when coming back home from work. I never knew that becoming father brings many positive feelings and thinking like that - a complete family. Love you all, my wife and little son.</p>
<p><img src="/images/2020-12-15/003.jpg"></p>
]]></content>
      <categories>
        <category>Living</category>
      </categories>
      <tags>
        <tag>Living</tag>
        <tag>Family</tag>
        <tag>My Life Story</tag>
      </tags>
  </entry>
  <entry>
    <title>Setup your VPN server the easy way using docker</title>
    <url>/2020/10/30/setup-self-openvpn-server/</url>
    <content><![CDATA[<p><img src="/images/2020-10-30/004.png" /></p>
<p>In this post, I will show you how to setup your own VPN server in a few simple steps.</p>
<h2 id="setup">## 1. Setup</h2>
<h3 id="step-1---create-a-docker-volume-to-save-configuration">Step 1 - Create a docker volume to save configuration</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker volume create --name ovpn-data</span></span><br></pre></td></tr></table></figure>
<h3 id="step-2---generate-config">Step 2 - Generate config</h3>
<p>This step will pull the docker image <code>kylemanna/openvpn:2.3</code> and run command <code>ovpn_genconfig</code>. The <strong>IP_ADDRESS</strong> or <strong>DOMAIN</strong> is your public ip address, eg <code>udp://vpn.hienhoang.ml</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -v ovpn-data:/etc/openvpn --log-driver=none --rm kylemanna/openvpn:2.3 ovpn_genconfig -u udp://&#123;&#123;IP_ADDRESS | DOMAIN&#125;&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="step-3---generate-public-private-key">Step 3 - Generate public private key</h3>
<p>This step will generate public private key. You must type in 4 to 1023 characters when ask for PEM pass phrase. This will take a few minutes to generate a strong private key. <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -v ovpn-data:/etc/openvpn --log-driver=none --rm -it kylemanna/openvpn:2.3 ovpn_initpki</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> init-pki complete; you may now create a CA or requests.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Your newly created PKI dir is: /etc/openvpn/pki</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Generating a 2048 bit RSA private key</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> .......................................................................+++</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> .....................................+++</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> writing new private key to <span class="string">&#x27;/etc/openvpn/pki/private/ca.key.XXXXlNLGLn&#x27;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Enter PEM pass phrase:</span></span><br></pre></td></tr></table></figure></p>
<p>Next command is to generate client key <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -v ovpn-data:/etc/openvpn -d -p 1194:1194/udp --cap-add=NET_ADMIN kylemanna/openvpn:2.3</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -v ovpn-data:/etc/openvpn --log-driver=none --rm -it kylemanna/openvpn:2.3 easyrsa build-client-full my_vpn nopass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Generating a 2048 bit RSA private key</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ...................+++</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ........+++</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> writing new private key to <span class="string">&#x27;/etc/openvpn/pki/private/my_vpn.key.XXXXpkifIk&#x27;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> -----</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Using configuration from /usr/share/easy-rsa/openssl-1.0.cnf</span></span><br></pre></td></tr></table></figure></p>
<h3 id="step-4---export-the-ovpn-file">Step 4 - Export the ovpn file</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -v ovpn-data:/etc/openvpn --log-driver=none --rm kylemanna/openvpn:2.3 ovpn_getclient my_vpn &gt; my_vpn.ovpn</span></span><br></pre></td></tr></table></figure>
<p>That's it. <code>my_vpn.ovpn</code> is what you need to connect to this VPN server.</p>
<h2 id="usage">## 2. Usage</h2>
<h3 id="check-your-vpn-server-running">Check your VPN server running</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> CONTAINER ID        IMAGE                   COMMAND             CREATED             STATUS              PORTS                    NAMES</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 04002f98ff76        kylemanna/openvpn:2.3   <span class="string">&quot;ovpn_run&quot;</span>          4 minutes ago       Up 4 minutes        0.0.0.0:1194-&gt;1194/udp   strange_wilbur</span></span><br></pre></td></tr></table></figure>
<h3 id="import-the-.ovpn-file-using-openvpn-client">Import the .ovpn file using openvpn client</h3>
<p><code>Import profile</code> -&gt; <code>FILE</code> <img src="/images/2020-10-30/001.png" /></p>
<p>Open the <code>.ovpn</code> file you generated above. <img src="/images/2020-10-30/002.png" /></p>
<p>Then click <code>Add</code> and Connect <img src="/images/2020-10-30/003.png" /></p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Docker</tag>
        <tag>VPN</tag>
        <tag>DIY</tag>
      </tags>
  </entry>
  <entry>
    <title>Year End 2020</title>
    <url>/2021/02/01/year-end-2020/</url>
    <content><![CDATA[<p>Hey, how do you do? Hope you had a good time in 2020.</p>
<p><img src="/images/2021-02-01/004.jpg"></p>
<p>I’ve spent two days and one night at last weekend for the company trip to Ho Coc - Ho Tram in Ba Ria - Vung Tau, where I had a great time with my family and colleagues by attending many team building activities and the happy year end party. That was the occasion for us to release the stress, laugh and play, then to look back what we experienced and achieved through out the difficult year 2020 due to Covid-19.</p>
<p>The trip started early on Sat 30 Jan 2021, at 5am, with nearly 100 attendees, including me and my family. I wanted to introduce the sunshine as well as the ocean waves on the long beach to my little son, so I brought my wife and him along the trip. He just turned 8 months old and he had been so curious about everything in this world. I had also felt excited and looked forward to going there. That was the first time I came to Ho Tram beach.</p>
<p>After about 3 hours, we finally got there. YAY~ ..... BUT! We had to complete the team building activities designed by the tour company before we were free to do whatever we liked. Team building activities were action games on the beach that required the team players’ unity spirit, strength and strategy. I found those games interesting but they took lots of efforts to win. Everyone felt tired but satisfied after the games. Then we went to stay at a resort nearby, waiting for the Year End Party in the evening.</p>
<div class="video-container"><iframe src="https://www.youtube.com/embed/ZuCm-tahGbM?t=58" frameborder="0" loading="lazy" allowfullscreen></iframe></div>
<p>In the afternoon, I took my wife and little son to the beach to play on the sand under the warm sun. It was windy and the waves were big and strong, the water was cool, which seemed not to be an ideal condition for swimming or soaking. That was my son’s first time putting his little feet in the sea waves coming in and seeing the sand moving when the waves coming out.</p>
<p><img src="/images/2021-02-01/001.jpeg"></p>
<p>Like any other babies, he liked to play with water a lot. When the waves turned bigger, we moved to the dry place and built the sand castle. I was surprised that he didn’t put the sand in his mouth, such a smart guy haha. After a while, he fell asleep in his mommy’s arms. Looking my wife hugging him, laying on the chair under the beautiful golden sunshine, listening to the endless ocean waves, I found the peaceful and happiness from the bottom of my heart.</p>
<p><img src="/images/2021-02-01/002.jpeg"></p>
<p>At that time I understood what it meant by saying the time seemed to pause for a moment. We went back to our room as the sun started setting to the west, preparing for the Year End Party.</p>
<p>The purpose of the party was to flashback what happened in last year 2020, honoring those who contributed great values to the company, and cheer up with the music shows and delicious food at the same time. Unexpectedly, I was called to the stage and received two awards, which were <strong>The Best Trainer</strong> and The Promotion from a Senior Software Engineer to <strong>Principal Software Engineer</strong>. What a big surprised to me.</p>
<p><img src="/images/2021-02-01/003.jpeg"></p>
<p>What a meaningful company trip! My wife said that she had been very happy as well as proud of me. The party went on in the warm atmosphere that people sang, danced, laughed and drunk beers. My little son fell asleep in his mommy’s arms again. He seemed to prefer sleeping in the noisy places haha. So, as soon as we finished the meal, we went back to the room and rested. That were all for the first day of the trip, also the important one. Next day, we had breakfast at the resort’s restaurant. Then we checked out at 11:30am. Our trip ended.</p>
<p>To me, although that trip was short but it brought to me many unforgettable moments with family and friends. Life is full of unexpectation, and I’m happy with it. After the trip, Tet holiday is coming to town! I will update our new journeys and share to you guys soon~!</p>
<p>Thanks for reading up to this line!</p>
]]></content>
      <categories>
        <category>Living</category>
      </categories>
      <tags>
        <tag>Living</tag>
        <tag>Family</tag>
        <tag>My Life Story</tag>
      </tags>
  </entry>
  <entry>
    <title>Run Headless Chrome Browser Inside a Docker Container</title>
    <url>/2020/11/20/run-headless-chrome-inside-a-docker-container/</url>
    <content><![CDATA[<h1 id="overview">1. Overview</h1>
<p>This is a simple example of how to config your own headless chrome browser inside a docker container. Then use a simple Python web application to say hello world with python selenium.</p>
<p>Project structure: - app.py - Dockerfile - bin/ + chromedriver + google-chrome-87_amd64.deb</p>
<p>Source code on <a href="https://github.com/hoangchunghien/headless-browser-docker-example">GitHub</a></p>
<h1 id="coding">2. Coding</h1>
<ul>
<li><code>Dockerfile</code></li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install manually all the missing libraries</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install -y gconf-service libasound2 libatk1.0-0 libcairo2 libcups2 libfontconfig1 libgdk-pixbuf2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libxss1 fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install libgbm1 -y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Chrome</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> bin/chromedriver /usr/bin/chromedriver</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> bin/google-chrome-87_amd64.deb .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> dpkg -i google-chrome-87_amd64.deb; apt-get -fy install</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Allow statements and log messages to immediately appear in the Knative logs</span></span><br><span class="line"><span class="keyword">ENV</span> PYTHONUNBUFFERED True</span><br><span class="line"><span class="keyword">ENV</span> PORT <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install gunicorn</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Python dependencies.</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> requirements.txt requirements.txt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Copy local code to the container image.</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> app.py /app/app.py</span></span><br><span class="line"><span class="keyword">ENV</span> APP_HOME /app</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$APP_HOME</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Run the web service on container startup.</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">exec</span> gunicorn --<span class="built_in">bind</span> :<span class="variable">$PORT</span> --workers 1 --threads 8 --timeout 0 app:app</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>app.py</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, send_file</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">options = Options()</span><br><span class="line">options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">options.add_argument(<span class="string">&quot;--disable-gpu&quot;</span>)</span><br><span class="line">options.add_argument(<span class="string">&quot;--disable-dev-shm-usage&quot;</span>)</span><br><span class="line">options.add_argument(<span class="string">&quot;--no-sandbox&quot;</span>)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;, methods=[&#x27;GET&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>():</span></span><br><span class="line">    driver = webdriver.Chrome(chrome_options=options)</span><br><span class="line">    driver.get(<span class="string">&#x27;https://www.google.com&#x27;</span>)</span><br><span class="line">    driver.save_screenshot(<span class="string">&quot;screenshot.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> send_file(<span class="string">&quot;screenshot.png&quot;</span>, mimetype=<span class="string">&#x27;image/png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="built_in">int</span>(os.environ.get(<span class="string">&#x27;PORT&#x27;</span>, <span class="number">5000</span>)))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="test-it">3. Test it</h1>
<ul>
<li>Build the docker image</li>
</ul>
<p><code>docker build -t headless .</code></p>
<ul>
<li>Run the docker container</li>
</ul>
<p><code>docker run -it -p 5000:5000 headless</code></p>
<ul>
<li>Open the link <a href="http://localhost:5000">http://localhost:5000</a></li>
</ul>
<p><img src="/images/2020-11-20/001.png"></p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Python</tag>
        <tag>Docker</tag>
        <tag>Selenium</tag>
        <tag>Headless Browser</tag>
      </tags>
  </entry>
  <entry>
    <title>Build a Search Engine with TF-IDF</title>
    <url>/2020/11/22/Build-a-Search-Engine-with-TF-IDF/</url>
    <content><![CDATA[<blockquote><p>TF-IDF short for term frequency – inverse document frequency, is a numerical statistic that is intended to reflect how important a word is to a document in a collection or corpus. It is often used as a weighting factor in searches of information retrieval, text mining, and user modeling. The tf–idf value increases proportionally to the number of times a word appears in the document and is offset by the number of documents in the corpus that contain the word, which helps to adjust for the fact that some words appear more frequently in general. tf–idf is one of the most popular term-weighting schemes today.</p>
<footer><strong>Wikipedia</strong><cite><a href="https://en.wikipedia.org/wiki/Tf–idf">en.wikipedia.org/wiki/Tf–idf</a></cite></footer></blockquote>
<h2 id="bag-of-words">1. Bag of words</h2>
<h3 id="tokenize-a-sentence">Tokenize a sentence</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk.tokenize <span class="keyword">import</span> TreebankWordTokenizer</span><br><span class="line"></span><br><span class="line">sentence = <span class="string">&quot;The faster Harry got to the store, the faster Harry, the faster, would get home.&quot;</span></span><br><span class="line">tokenizer = TreebankWordTokenizer()</span><br><span class="line">token_sequence = tokenizer.tokenize(sentence.lower())</span><br><span class="line">print(token_sequence)</span><br></pre></td></tr></table></figure>
<div style="font-size:14px">
['the', 'faster', 'harry', 'got', 'to', 'the', 'store', ',', 'the', 'faster', 'harry', ',', 'the', 'faster', ',', 'would', 'get', 'home', '.']
</div>
<h3 id="tokens-counter">Tokens counter</h3>
<p>We only care about the unique words and how many times a word occurs in the sentence.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">bag_of_words = Counter(token_sequence)</span><br><span class="line">print(bag_of_words)</span><br></pre></td></tr></table></figure>
<div style="font-size:14px">
Counter({'the': 4, 'faster': 3, ',': 3, 'harry': 2, 'got': 1, 'to': 1, 'store': 1, 'would': 1, 'get': 1, 'home': 1, '.': 1})
</div>
<p>What is the most common words?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">word_list = bag_of_words.most_common()</span><br><span class="line">print(word_list)</span><br></pre></td></tr></table></figure>
<div style="font-size:14px">
[('the', 4), ('faster', 3), (',', 3), ('harry', 2), ('got', 1), ('to', 1), ('store', 1), ('would', 1), ('get', 1), ('home', 1), ('.', 1)]
</div>
<p>The number of times a word occurs in a document is called <em>term frequency</em> or <em>TF</em>. Let compute one example.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">harry_count = bag_of_words[<span class="string">&#x27;harry&#x27;</span>]</span><br><span class="line">unique_words = <span class="built_in">len</span>(bag_of_words)</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">round</span>(harry_count / unique_words, <span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<div style="font-size:14px">
<p>0.1818</p>
</div>
<p>Let compute with another example. Take a look at below document.</p>
<div style="font-size: 14px;font-family:tahoma">
<p>
A kite is traditionally a tethered heavier-than-air craft with wing surfaces that react against the air to create lift and drag. A kite consists of wings, tethers, and anchors. Kites often have a bridle to guide the face of the kite at the correct angle so the wind can lift it. A kite’s wing also may be so designed so a bridle is not needed; when kiting a sailplane for launch, the tether meets the wing at a single point. A kite may have fixed or moving anchors. Untraditionally in technical kiting, a kite consists of tether-set-coupled wing sets; even in technical kiting, though, a wing in the system is still often called the kite.
</p>
<p>
The lift that sustains the kite in flight is generated when air flows around the kite’s surface, producing low pressure above and high pressure below the wings. The interaction with the wind also generates horizontal drag along the direction of the wind. The resultant force vector from the lift and drag force components is opposed by the tension of one or more of the lines or tethers to which the kite is attached. The anchor point of the kite line may be static or moving (such as the towing of a kite by a running person, boat, free-falling anchors as in paragliders and fugitive parakites or vehicle).
</p>
<p>
The same principles of fluid flow apply in liquids and kites are also used under water. A hybrid tethered craft comprising both a lighter-than-air balloon as well as a kite lifting surface is called a kytoon.
</p>
<p>
Kites have a long and varied history and many different types are flown individually and at festivals worldwide. Kites may be flown for recreation, art or other practical uses. Sport kites can be flown in aerial ballet, sometimes as part of a competition. Power kites are multi-line steerable kites designed to generate large forces which can be used to power activities such as kite surfing, kite landboarding, kite fishing, kite buggying and a new trend snow kiting. Even Man-lifting kites have been made.
</p>
</div>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">kite_text = <span class="string">&quot;A kite is traditionally a tethered heavier-than-air craft with wing surfaces that react against the air to create lift and drag. A kite consists of wings, tethers, and anchors. Kites often have a bridle to guide the face of the kite at the correct angle so the wind can lift it. A kite&#x27;s wing also may be so designed so a bridle is not needed; when kiting a sailplane for launch, the tether meets the wing at a single point. A kite may have fixed or moving anchors. Untraditionally in technical kiting, a kite consists of tether-set-coupled wing sets; even in technical kiting, though, a wing in the system is still often called the kite. The lift that sustains the kite in flight is generated when air flows around the kite&#x27;s surface, producing low pressure above and high pressure below the wings. The interaction with the wind also generates horizontal drag along the direction of the wind. The resultant force vector from the lift and drag force components is opposed by the tension of one or more of the lines or tethers to which the kite is attached. The anchor point of the kite line may be static or moving (e.g., the towing of a kite by a running person, boat, free-falling anchors as in paragliders and fugitive parakites or vehicle). The same principles of fluid flow apply in liquids and kites are also used under water. A hybrid tethered craft comprising both a lighter-than-air balloon as well as a kite lifting surface is called a kytoon. Kites have a long and varied history and many different types are flown individually and at festivals worldwide. Kites may be flown for recreation, art or other practical uses. Sport kites can be flown in aerial ballet, sometimes as part of a competition. Power kites are multi-line steerable kites designed to generate large forces which can be used to power activities such as kite surfing, kite landboarding, kite fishing, kite buggying and a new trend snow kiting. Even Man-lifting kites have been made.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">from</span> nltk.tokenize <span class="keyword">import</span> TreebankWordTokenizer</span><br><span class="line">tokenizer = TreebankWordTokenizer()</span><br><span class="line">tokens = tokenizer.tokenize(kite_text.lower())</span><br><span class="line">token_count = Counter(tokens)</span><br><span class="line">print(token_count)</span><br></pre></td></tr></table></figure>
<div style="font-size:12px;">
<p>Counter({'the': 26, 'a': 20, 'kite': 16, ',': 15, 'and': 10, 'of': 10, 'kites': 8, 'is': 7, 'in': 7, 'or': 6, 'wing': 5, 'to': 5, 'be': 5, 'as': 5, 'lift': 4, 'have': 4, 'may': 4, 'at': 3, 'so': 3, 'can': 3, 'also': 3, 'kiting': 3, 'are': 3, 'flown': 3, 'tethered': 2, 'craft': 2, 'with': 2, 'that': 2, 'air': 2, 'consists': 2, 'tethers': 2, 'anchors.': 2, 'often': 2, 'bridle': 2, 'wind': 2, "'s": 2, 'designed': 2, ';': 2, 'when': 2, 'for': 2, 'moving': 2, 'technical': 2, 'even': 2, 'called': 2, 'surface': 2, 'pressure': 2, 'drag': 2, 'force': 2, 'by': 2, 'which': 2, '.': 2, 'used': 2, 'power': 2, 'traditionally': 1, 'heavier-than-air': 1, 'surfaces': 1, 'react': 1, 'against': 1, 'create': 1, 'drag.': 1, 'wings': 1, 'guide': 1, 'face': 1, 'correct': 1, 'angle': 1, 'it.': 1, 'not': 1, 'needed': 1, 'sailplane': 1, 'launch': 1, 'tether': 1, 'meets': 1, 'single': 1, 'point.': 1, 'fixed': 1, 'untraditionally': 1, 'tether-set-coupled': 1, 'sets': 1, 'though': 1, 'system': 1, 'still': 1, 'kite.': 1, 'sustains': 1, 'flight': 1, 'generated': 1, 'flows': 1, 'around': 1, 'producing': 1, 'low': 1, 'above': 1, 'high': 1, 'below': 1, 'wings.': 1, 'interaction': 1, 'generates': 1, 'horizontal': 1, 'along': 1, 'direction': 1, 'wind.': 1, 'resultant': 1, 'vector': 1, 'from': 1, 'components': 1, 'opposed': 1, 'tension': 1, 'one': 1, 'more': 1, 'lines': 1, 'attached.': 1, 'anchor': 1, 'point': 1, 'line': 1, 'static': 1, '(': 1, 'e.g.': 1, 'towing': 1, 'running': 1, 'person': 1, 'boat': 1, 'free-falling': 1, 'anchors': 1, 'paragliders': 1, 'fugitive': 1, 'parakites': 1, 'vehicle': 1, ')': 1, 'same': 1, 'principles': 1, 'fluid': 1, 'flow': 1, 'apply': 1, 'liquids': 1, 'under': 1, 'water.': 1, 'hybrid': 1, 'comprising': 1, 'both': 1, 'lighter-than-air': 1, 'balloon': 1, 'well': 1, 'lifting': 1, 'kytoon.': 1, 'long': 1, 'varied': 1, 'history': 1, 'many': 1, 'different': 1, 'types': 1, 'individually': 1, 'festivals': 1, 'worldwide.': 1, 'recreation': 1, 'art': 1, 'other': 1, 'practical': 1, 'uses.': 1, 'sport': 1, 'aerial': 1, 'ballet': 1, 'sometimes': 1, 'part': 1, 'competition.': 1, 'multi-line': 1, 'steerable': 1, 'generate': 1, 'large': 1, 'forces': 1, 'activities': 1, 'such': 1, 'surfing': 1, 'landboarding': 1, 'fishing': 1, 'buggying': 1, 'new': 1, 'trend': 1, 'snow': 1, 'kiting.': 1, 'man-lifting': 1, 'been': 1, 'made': 1})</p>
</div>
<p>Hmm, you can see that <code>the</code>, <code>a</code>, <code>and</code> and many other stop-words occurs too much. How about apply stopwords clean up.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> nltk</span><br><span class="line"></span><br><span class="line">nltk.download(<span class="string">&#x27;stopwords&#x27;</span>, quiet=<span class="literal">True</span>)</span><br><span class="line">stopwords = nltk.corpus.stopwords.words(<span class="string">&#x27;english&#x27;</span>)</span><br><span class="line">tokens = [x <span class="keyword">for</span> x <span class="keyword">in</span> tokens <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> stopwords]</span><br><span class="line">kite_counts = Counter(tokens)</span><br><span class="line">print(kite_counts)</span><br></pre></td></tr></table></figure>
<div style="font-size:13px;font-family:tahoma">
<p>Counter({'kite': 16, ',': 15, 'kites': 8, 'wing': 5, 'lift': 4, 'may': 4, 'also': 3, 'kiting': 3, 'flown': 3, 'tethered': 2, 'craft': 2, 'air': 2, 'consists': 2, 'tethers': 2, 'anchors.': 2, 'often': 2, 'bridle': 2, 'wind': 2, "'s": 2, 'designed': 2, ';': 2, 'moving': 2, 'technical': 2, 'even': 2, 'called': 2, 'surface': 2, 'pressure': 2, 'drag': 2, 'force': 2, '.': 2, 'used': 2, 'power': 2, 'traditionally': 1, 'heavier-than-air': 1, 'surfaces': 1, 'react': 1, 'create': 1, 'drag.': 1, 'wings': 1, 'guide': 1, 'face': 1, 'correct': 1, 'angle': 1, 'it.': 1, 'needed': 1, 'sailplane': 1, 'launch': 1, 'tether': 1, 'meets': 1, 'single': 1, 'point.': 1, 'fixed': 1, 'untraditionally': 1, 'tether-set-coupled': 1, 'sets': 1, 'though': 1, 'system': 1, 'still': 1, 'kite.': 1, 'sustains': 1, 'flight': 1, 'generated': 1, 'flows': 1, 'around': 1, 'producing': 1, 'low': 1, 'high': 1, 'wings.': 1, 'interaction': 1, 'generates': 1, 'horizontal': 1, 'along': 1, 'direction': 1, 'wind.': 1, 'resultant': 1, 'vector': 1, 'components': 1, 'opposed': 1, 'tension': 1, 'one': 1, 'lines': 1, 'attached.': 1, 'anchor': 1, 'point': 1, 'line': 1, 'static': 1, '(': 1, 'e.g.': 1, 'towing': 1, 'running': 1, 'person': 1, 'boat': 1, 'free-falling': 1, 'anchors': 1, 'paragliders': 1, 'fugitive': 1, 'parakites': 1, 'vehicle': 1, ')': 1, 'principles': 1, 'fluid': 1, 'flow': 1, 'apply': 1, 'liquids': 1, 'water.': 1, 'hybrid': 1, 'comprising': 1, 'lighter-than-air': 1, 'balloon': 1, 'well': 1, 'lifting': 1, 'kytoon.': 1, 'long': 1, 'varied': 1, 'history': 1, 'many': 1, 'different': 1, 'types': 1, 'individually': 1, 'festivals': 1, 'worldwide.': 1, 'recreation': 1, 'art': 1, 'practical': 1, 'uses.': 1, 'sport': 1, 'aerial': 1, 'ballet': 1, 'sometimes': 1, 'part': 1, 'competition.': 1, 'multi-line': 1, 'steerable': 1, 'generate': 1, 'large': 1, 'forces': 1, 'activities': 1, 'surfing': 1, 'landboarding': 1, 'fishing': 1, 'buggying': 1, 'new': 1, 'trend': 1, 'snow': 1, 'kiting.': 1, 'man-lifting': 1, 'made': 1})</p>
</div>
<p>Look better, you can easily see that there are some importance terms <code>kite</code>, <code>kites</code>, <code>wing</code>, <code>lift</code>. Just by looking purely at this, you will learn something about this document.</p>
<h2 id="vectorizing">2. Vectorizing</h2>
<h3 id="how-to-compute-document-vector">How to compute document vector?</h3>
<p>Document vector on the kite example</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">document_vector = []</span><br><span class="line">doc_length = <span class="built_in">len</span>(tokens)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> kite_counts.most_common():</span><br><span class="line">    document_vector.append(value / doc_length)</span><br><span class="line"></span><br><span class="line">document_vector</span><br></pre></td></tr></table></figure>
<div style="font-size:13px">
<p>[0.07207207207207207,<br/> 0.06756756756756757,<br/> 0.036036036036036036,<br/> ...<br/> 0.0045045045045045045,<br/> 0.0045045045045045045,<br/> 0.0045045045045045045]</p>
</div>
<p>Hmm, interesting. This is one vector of a document. We might need more than one document to do math on. Let build another simple example. Let's say I have this three documents.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">doc_0 = <span class="string">&quot;The faster Harry got to the store, the faster Harry, the faster, would get home.&quot;</span></span><br><span class="line">doc_1 = <span class="string">&quot;Harry is hairy and faster than Jill.&quot;</span></span><br><span class="line">doc_2 = <span class="string">&quot;Jill is not as hairy as Harry.&quot;</span></span><br></pre></td></tr></table></figure>
<p>Now, convert those docs to tokens</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tokens_0 = tokenizer.tokenize(doc_0.lower())</span><br><span class="line">tokens_1 = tokenizer.tokenize(doc_1.lower())</span><br><span class="line">tokens_2 = tokenizer.tokenize(doc_2.lower())</span><br><span class="line">lexicon = <span class="built_in">set</span>(tokens_0 + tokens_1 + tokens_2)</span><br><span class="line"></span><br><span class="line">print(lexicon)</span><br><span class="line">print(<span class="built_in">len</span>(lexicon))</span><br></pre></td></tr></table></figure>
<div style="font-size:13px">
<p>{'hairy', 'jill', 'harry', 'faster', 'the', 'would', 'get', 'is', 'got', 'and', 'than', ',', '.', 'not', 'as', 'store', 'home', 'to'}<br/> 18</p>
</div>
<p>All of this three documents must have the same length, that is <code>18</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line"><span class="comment"># I create a zero vector as a template for all the vectors in this example</span></span><br><span class="line">zero_vector = OrderedDict((token, <span class="number">0</span>) <span class="keyword">for</span> token <span class="keyword">in</span> lexicon)</span><br><span class="line">zero_vector</span><br></pre></td></tr></table></figure>
<div style="font-size:13px">
<p>OrderedDict([('hairy', 0), ('jill', 0), ('harry', 0), ('faster', 0), ('the', 0), ('would', 0), ('get', 0), ('is', 0), ('got', 0), ('and', 0), ('than', 0), (',', 0), ('.', 0), ('not', 0), ('as', 0), ('store', 0), ('home', 0), ('to', 0)])</p>
</div>
<p>Here a how three document vectors created <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">document_vectors = []</span><br><span class="line"><span class="keyword">for</span> doc <span class="keyword">in</span> [doc_0, doc_1, doc_2]:</span><br><span class="line">    <span class="comment"># Don&#x27;t edit directly on the template, just clone one for new vector</span></span><br><span class="line">    vec = copy.copy(vector_template)</span><br><span class="line"></span><br><span class="line">    tokens = tokenizer.tokenize(doc.lower())</span><br><span class="line">    token_counts = Counter(tokens)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> token_counts.items():</span><br><span class="line">        <span class="comment"># compute TF</span></span><br><span class="line">        vec[key] = value / <span class="built_in">len</span>(lexicon)</span><br><span class="line">    document_vectors.append(vec)</span><br></pre></td></tr></table></figure></p>
<h3 id="what-is-vector">What is vector?</h3>
<div class="video-container"><iframe src="https://www.youtube.com/embed/fNk_zzaMoSs" frameborder="0" loading="lazy" allowfullscreen></iframe></div>
<h3 id="cosine-similarity-implementation">Cosine Similarity Implementation</h3>
<p><span class="math display">\[\begin{align*}
\cos \theta &amp;= \frac{A \cdot B}{|A| |B|}
\end{align*}\]</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cosine_sim</span>(<span class="params">vec1, vec2</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Since our vectors are dictionaries, lets convert them to lists for easier mathing.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    vec1 = [val <span class="keyword">for</span> val <span class="keyword">in</span> vec1.values()]</span><br><span class="line">    vec2 = [val <span class="keyword">for</span> val <span class="keyword">in</span> vec2.values()]</span><br><span class="line">    </span><br><span class="line">    dot_prod = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(vec1):</span><br><span class="line">        dot_prod += v * vec2[i]</span><br><span class="line">        </span><br><span class="line">    mag_1 = math.sqrt(<span class="built_in">sum</span>([x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> vec1]))</span><br><span class="line">    mag_2 = math.sqrt(<span class="built_in">sum</span>([x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> vec2]))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dot_prod / (mag_1 * mag_2)</span><br></pre></td></tr></table></figure>
<p>A consine similarity of <strong>1</strong> represents vectors that point in the exactly same direction. In NLP, that mean two documents have the same meaning.</p>
<p>A cosine similarity of <strong>0</strong> represent two vectors share no components. They are orthogonal.</p>
<p>A consine similarty of <strong>-1</strong> represents two vectors that are anti-similar, they are pointing in the opposite. Or NLP, two documents talking about the opposite things. But, we never see the opposite direction in TF vectors, because counting words can never be negative.</p>
<p>So, let go to verify the above three vectors</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(cosine_sim(document_vectors[<span class="number">0</span>], document_vectors[<span class="number">1</span>]))</span><br><span class="line">print(cosine_sim(document_vectors[<span class="number">0</span>], document_vectors[<span class="number">2</span>]))</span><br><span class="line">print(cosine_sim(document_vectors[<span class="number">1</span>], document_vectors[<span class="number">2</span>]))</span><br></pre></td></tr></table></figure>
<div style="font-size:13px">
<p>0.3162277660168379<br/> 0.14142135623730948<br/> 0.5590169943749475</p>
</div>
<p>We can easily see that, doc1 and doc2 have much similar score. They are talking something similar.</p>
<h2 id="topic-modeling">3. Topic Modeling</h2>
<p>Word counts are useful, but it doesn't tell much more information and the relative with all other documents in the corpus. Inverse Document Frequency (IDF), compute on documents count in the entire corpus.</p>
<p><span class="math display">\[\begin{align*}
tf(t, d) &amp;= \frac{count(t)}{count(d)}
\end{align*}\]</span></p>
<p><span class="math display">\[\begin{align*}
idf(t, D) &amp;= \log \frac{count(D)}{count(D_t)}
\end{align*}\]</span></p>
<p><span class="math display">\[\begin{align*}
tfidf(t, d, D) &amp;= tf(t, d) * idf(t, D)
\end{align*}\]</span></p>
<p>The more time a word appear in a document, the important it is in a document. On the other hand, the number of documents contains a word, the less important it is in the entire corpus.</p>
<p>Compute the tfidf on the above example <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">document_tfidf_vectors = []</span><br><span class="line">documents = [doc_0, doc_1, doc_2]</span><br><span class="line"><span class="keyword">for</span> doc <span class="keyword">in</span> documents:</span><br><span class="line"></span><br><span class="line">    vec = copy.copy(vector_template)</span><br><span class="line"></span><br><span class="line">    tokens = tokenizer.tokenize(doc.lower())</span><br><span class="line">    token_counts = Counter(tokens)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> token_counts.items():</span><br><span class="line">        docs_containing_key = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> _doc <span class="keyword">in</span> documents:</span><br><span class="line">            <span class="keyword">if</span> key <span class="keyword">in</span> _doc:</span><br><span class="line">                docs_containing_key += <span class="number">1</span></span><br><span class="line">        tf = value / <span class="built_in">len</span>(lexicon)</span><br><span class="line">        <span class="keyword">if</span> docs_containing_key:</span><br><span class="line">            idf = <span class="built_in">len</span>(documents) / docs_containing_key</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            idf = <span class="number">0</span></span><br><span class="line">        vec[key] = tf * idf </span><br><span class="line">    document_tfidf_vectors.append(vec)</span><br></pre></td></tr></table></figure></p>
Let try with a simple query <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">documents = [doc_0, doc_1, doc_2]</span><br><span class="line">query = <span class="string">&quot;How long does it take to get to the store?&quot;</span></span><br><span class="line">query_vec = copy.copy(vector_template) </span><br><span class="line"></span><br><span class="line">query_vec = copy.copy(vector_template)</span><br><span class="line"></span><br><span class="line">tokens = tokenizer.tokenize(query.lower())</span><br><span class="line">token_counts = Counter(tokens)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> token_counts.items():</span><br><span class="line">    docs_containing_key = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _doc <span class="keyword">in</span> documents:</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> _doc.lower():</span><br><span class="line">            docs_containing_key += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> docs_containing_key == <span class="number">0</span>:  <span class="comment"># We didn&#x27;t find that token in the lexicon go to next key</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    tf = value / <span class="built_in">len</span>(tokens)</span><br><span class="line">    idf = <span class="built_in">len</span>(documents) / docs_containing_key </span><br><span class="line">    query_vec[key] = tf * idf </span><br><span class="line"></span><br><span class="line">print(cosine_sim(query_vec, document_tfidf_vectors[<span class="number">0</span>]))</span><br><span class="line">print(cosine_sim(query_vec, document_tfidf_vectors[<span class="number">1</span>]))</span><br><span class="line">print(cosine_sim(query_vec, document_tfidf_vectors[<span class="number">2</span>]))</span><br></pre></td></tr></table></figure>
<div style="font-size:13px">
<p>0.5235048549676834<br/> 0.0<br/> 0.0</p>
</div>
<p>This is clearly that, the <code>doc0</code> is the only documents that match with the query. <code>The faster Harry got to the store, the faster Harry, the faster, would get home</code>.</p>
<p>What an interesting algorithm to search for relevant documents. This searching algorithm had to evaluate the entire corpus. That O(N) algorithm. Not bad isn't it?</p>
<h2 id="tools">4. Tools</h2>
<p>Let simpler our implementation by using tools.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfVectorizer</span><br><span class="line"></span><br><span class="line">corpus = docs</span><br><span class="line">vectorizer = TfidfVectorizer(min_df=<span class="number">1</span>)</span><br><span class="line">model = vectorizer.fit_transform(corpus)</span><br><span class="line"></span><br><span class="line">print(model.todense().<span class="built_in">round</span>(<span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<div style="font-size:13px">
<p>[[0.16 0. 0.48 0.21 0.21 0. 0.25 0.21 0. 0. 0. 0.21 0. 0.64 0.21 0.21]<br/> [0.37 0. 0.37 0. 0. 0.37 0.29 0. 0.37 0.37 0. 0. 0.49 0. 0. 0. ]<br/> [0. 0.75 0. 0. 0. 0.29 0.22 0. 0.29 0.29 0.38 0. 0. 0. 0. 0. ]]</p>
</div>
]]></content>
      <categories>
        <category>Natural Language Processing</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>TF-IDF</tag>
        <tag>NLP</tag>
        <tag>Search Engine</tag>
        <tag>Bag of Words</tag>
        <tag>BOW</tag>
        <tag>Information Retrieval</tag>
        <tag>Scikit-Learn</tag>
      </tags>
  </entry>
  <entry>
    <title>Image Semantic Segmentation</title>
    <url>/2021/04/21/Image-Semantic-Segmentation/</url>
    <content><![CDATA[<h1 id="overview">1. Overview</h1>
<p><img src="https://www.robots.ox.ac.uk/~vgg/data/pets/pet_annotations.jpg"></p>
<p>Source: https://www.robots.ox.ac.uk/~vgg/data/pets/</p>
<h1 id="fully-convolution-network-fcn">2. Fully Convolution Network (FCN)</h1>
<h2 id="dataset">2.1. Dataset</h2>
<p>In this example, I will use <code>Oxford-IIIT Pet</code> dataset. We can access it by using <code>tensorflow-datasets</code> package.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install tensorflow-datasets</span><br></pre></td></tr></table></figure>
<p>Now load the data</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow_datasets <span class="keyword">as</span> tfds</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">dataset, info = tfds.load(<span class="string">&#x27;oxford_iiit_pet&#x27;</span>, with_info=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">TRAIN_SIZE = info.splits[<span class="string">&#x27;train&#x27;</span>].num_examples</span><br><span class="line">VALIDATION_SIZE = info.splits[<span class="string">&#x27;test&#x27;</span>].num_examples</span><br><span class="line"></span><br><span class="line">BATCH_SIZE = <span class="number">32</span></span><br><span class="line">BUFFER_SIZE = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize</span>(<span class="params">input_image, input_mask</span>):</span></span><br><span class="line">    input_image = tf.cast(input_image, tf.float32) / <span class="number">255.0</span></span><br><span class="line">    input_mask -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> input_image, input_mask</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_image</span>(<span class="params">dataset_element</span>):</span></span><br><span class="line">    input_image = tf.image.resize(dataset_element[<span class="string">&#x27;image&#x27;</span>], (<span class="number">256</span>, <span class="number">256</span>))</span><br><span class="line">    input_mask = tf.image.resize(dataset_element[<span class="string">&#x27;segmentation_mask&#x27;</span>], (<span class="number">256</span>, <span class="number">256</span>))</span><br><span class="line">    input_image, input_mask = normalize(input_image, input_mask)</span><br><span class="line">    <span class="keyword">return</span> input_image, input_mask</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">train_dataset = (dataset[<span class="string">&#x27;train&#x27;</span>]</span><br><span class="line">                 .<span class="built_in">map</span>(load_image, num_parallel_calls=tf.data.experimental.AUTOTUNE)</span><br><span class="line">                 .shuffle(BUFFER_SIZE)</span><br><span class="line">                 .batch(BATCH_SIZE)</span><br><span class="line">                 .prefetch(tf.data.experimental.AUTOTUNE))</span><br><span class="line"></span><br><span class="line">test_dataset = (dataset[<span class="string">&#x27;test&#x27;</span>]</span><br><span class="line">                .<span class="built_in">map</span>(load_image, num_parallel_calls=tf.data.experimental.AUTOTUNE)</span><br><span class="line">                .batch(BATCH_SIZE))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="define-the-model">2.2. Define the model</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">inputs = tf.keras.layers.Input(shape=(<span class="number">256</span>, <span class="number">256</span>, <span class="number">3</span>))</span><br><span class="line">x = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">64</span>, </span><br><span class="line">    kernel_size=(<span class="number">3</span>, <span class="number">3</span>), </span><br><span class="line">    activation=<span class="string">&#x27;relu&#x27;</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    name=<span class="string">&#x27;block1_conv1&#x27;</span>)(inputs)</span><br><span class="line">x = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">64</span>, </span><br><span class="line">    kernel_size=(<span class="number">3</span>, <span class="number">3</span>), </span><br><span class="line">    activation=<span class="string">&quot;relu&quot;</span>, </span><br><span class="line">    padding=<span class="string">&quot;same&quot;</span>, </span><br><span class="line">    name=<span class="string">&quot;block1_conv2&quot;</span>)(x)</span><br><span class="line">x = tf.keras.layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=<span class="number">2</span>, name=<span class="string">&#x27;block1_pool&#x27;</span>)(x)</span><br><span class="line"></span><br><span class="line">x = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">128</span>, </span><br><span class="line">    kernel_size=(<span class="number">3</span>, <span class="number">3</span>), </span><br><span class="line">    activation=<span class="string">&#x27;relu&#x27;</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    name=<span class="string">&#x27;block2_conv1&#x27;</span>)(x)</span><br><span class="line">x = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">128</span>, </span><br><span class="line">    kernel_size=(<span class="number">3</span>, <span class="number">3</span>), </span><br><span class="line">    activation=<span class="string">&#x27;relu&#x27;</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    name=<span class="string">&#x27;block2_conv2&#x27;</span>)(x)</span><br><span class="line">x = tf.keras.layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=<span class="number">2</span>, name=<span class="string">&#x27;block2_pool&#x27;</span>)(x)</span><br><span class="line"></span><br><span class="line">x = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">256</span>,</span><br><span class="line">    kernel_size=(<span class="number">3</span>, <span class="number">3</span>), </span><br><span class="line">    activation=<span class="string">&#x27;relu&#x27;</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    name=<span class="string">&#x27;block3_conv1&#x27;</span>)(x)</span><br><span class="line">x = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">256</span>, </span><br><span class="line">    kernel_size=(<span class="number">3</span>, <span class="number">3</span>), </span><br><span class="line">    activation=<span class="string">&#x27;relu&#x27;</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    name=<span class="string">&#x27;block3_conv2&#x27;</span>)(x)</span><br><span class="line">x = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">256</span>, </span><br><span class="line">    kernel_size=(<span class="number">3</span>, <span class="number">3</span>), </span><br><span class="line">    activation=<span class="string">&#x27;relu&#x27;</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    name=<span class="string">&#x27;block3_conv3&#x27;</span>)(x)</span><br><span class="line">x = tf.keras.layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=<span class="number">2</span>, name=<span class="string">&#x27;block3_pool&#x27;</span>)(x)</span><br><span class="line">block3_pool = x</span><br><span class="line"></span><br><span class="line">x = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">512</span>, </span><br><span class="line">    kernel_size=(<span class="number">3</span>, <span class="number">3</span>), </span><br><span class="line">    activation=<span class="string">&#x27;relu&#x27;</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    name=<span class="string">&#x27;block4_conv1&#x27;</span>)(x)</span><br><span class="line">x = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">512</span>, </span><br><span class="line">    kernel_size=(<span class="number">3</span>, <span class="number">3</span>), </span><br><span class="line">    activation=<span class="string">&#x27;relu&#x27;</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    name=<span class="string">&#x27;block4_conv2&#x27;</span>)(x)</span><br><span class="line">x = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">512</span>, </span><br><span class="line">    kernel_size=(<span class="number">3</span>, <span class="number">3</span>), </span><br><span class="line">    activation=<span class="string">&#x27;relu&#x27;</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    name=<span class="string">&#x27;block4_conv3&#x27;</span>)(x)</span><br><span class="line">x = tf.keras.layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=<span class="number">2</span>, name=<span class="string">&#x27;block4_pool&#x27;</span>)(x)</span><br><span class="line">block4_pool = x</span><br><span class="line"></span><br><span class="line">x = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">512</span>, </span><br><span class="line">    kernel_size=(<span class="number">3</span>, <span class="number">3</span>), </span><br><span class="line">    activation=<span class="string">&#x27;relu&#x27;</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    name=<span class="string">&#x27;block5_conv1&#x27;</span>)(x)</span><br><span class="line">x = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">512</span>, </span><br><span class="line">    kernel_size=(<span class="number">3</span>, <span class="number">3</span>), </span><br><span class="line">    activation=<span class="string">&#x27;relu&#x27;</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    name=<span class="string">&#x27;block5_conv2&#x27;</span>)(x)</span><br><span class="line">x = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">512</span>, </span><br><span class="line">    kernel_size=(<span class="number">3</span>, <span class="number">3</span>), </span><br><span class="line">    activation=<span class="string">&#x27;relu&#x27;</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    name=<span class="string">&#x27;block5_conv3&#x27;</span>)(x)</span><br><span class="line">x = tf.keras.layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=<span class="number">2</span>, name=<span class="string">&#x27;block5_pool&#x27;</span>)(x)</span><br><span class="line">block5_pool = x</span><br><span class="line"></span><br><span class="line">outputs = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">3</span>, </span><br><span class="line">    kernel_size=(<span class="number">7</span>, <span class="number">7</span>), </span><br><span class="line">    activation=<span class="string">&#x27;relu&#x27;</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    name=<span class="string">&#x27;conv6&#x27;</span>)(block5_pool)</span><br><span class="line">conv6_4 = tf.keras.layers.Conv2DTranspose(</span><br><span class="line">    filters=<span class="number">3</span>, </span><br><span class="line">    kernel_size=(<span class="number">4</span>, <span class="number">4</span>), </span><br><span class="line">    strides=<span class="number">4</span>, </span><br><span class="line">    use_bias=<span class="literal">False</span>)(outputs)</span><br><span class="line"></span><br><span class="line">pool4_n = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">3</span>, </span><br><span class="line">    kernel_size=(<span class="number">1</span>, <span class="number">1</span>), </span><br><span class="line">    activation=<span class="string">&#x27;relu&#x27;</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    name=<span class="string">&#x27;pool4_n&#x27;</span>)(block4_pool)</span><br><span class="line">pool4_n_2 = tf.keras.layers.Conv2DTranspose(</span><br><span class="line">    filters=<span class="number">3</span>, </span><br><span class="line">    kernel_size=(<span class="number">2</span>, <span class="number">2</span>), </span><br><span class="line">    strides=<span class="number">2</span>, </span><br><span class="line">    use_bias=<span class="literal">False</span>)(pool4_n)</span><br><span class="line"></span><br><span class="line">pool3_n = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">3</span>, </span><br><span class="line">    kernel_size=(<span class="number">3</span>, <span class="number">3</span>), </span><br><span class="line">    activation=<span class="string">&#x27;relu&#x27;</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    name=<span class="string">&#x27;pool3_n&#x27;</span>)(block3_pool)</span><br><span class="line"></span><br><span class="line">output = tf.keras.layers.Add(name=<span class="string">&#x27;add&#x27;</span>)([pool4_n_2, pool3_n, conv6_4])</span><br><span class="line">output = tf.keras.layers.Conv2DTranspose(filters=<span class="number">3</span>, kernel_size=(<span class="number">8</span>, <span class="number">8</span>), strides=<span class="number">8</span>, use_bias=<span class="literal">False</span>)(output)</span><br><span class="line">output = tf.keras.layers.Softmax()(output)</span><br><span class="line"></span><br><span class="line">fcn_model = tf.keras.models.Model(inputs, output)</span><br><span class="line"></span><br><span class="line">fcn_model.<span class="built_in">compile</span>(</span><br><span class="line">    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">True</span>), </span><br><span class="line">    optimizer=tf.keras.optimizers.RMSprop(), </span><br><span class="line">    metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line">fcn_model.summary()</span><br></pre></td></tr></table></figure>
<p>In this step, we use <code>SparseCategoricalCrossentropy</code> as loss function for pixel classification task. The output channels here are 3 because each pixel can be categorized into one of three classes.</p>
<p>The network summary</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">Model: &quot;functional<span class="emphasis">_1&quot;</span></span><br><span class="line"><span class="emphasis"><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">Layer (type)                    Output Shape         Param #     Connected to                     </span></span></span><br><span class="line"><span class="emphasis"><span class="strong">==================================================================================================</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">input<span class="emphasis">_2 (InputLayer)            [(None, 256, 256, 3) 0                                            </span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">block1<span class="emphasis">_conv1 (Conv2D)           (None, 256, 256, 64) 1792        input_</span>2[<span class="string">0</span>][<span class="symbol">0</span>]                    </span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis">block1_</span>conv2 (Conv2D)           (None, 256, 256, 64) 36928       block1<span class="emphasis">_conv1[<span class="string">0</span>][<span class="symbol">0</span>]               </span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">block1<span class="emphasis">_pool (MaxPooling2D)      (None, 128, 128, 64) 0           block1_</span>conv2[<span class="string">0</span>][<span class="symbol">0</span>]               </span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis">block2_</span>conv1 (Conv2D)           (None, 128, 128, 128 73856       block1<span class="emphasis">_pool[<span class="string">0</span>][<span class="symbol">0</span>]                </span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">block2<span class="emphasis">_conv2 (Conv2D)           (None, 128, 128, 128 147584      block2_</span>conv1[<span class="string">0</span>][<span class="symbol">0</span>]               </span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis">block2_</span>pool (MaxPooling2D)      (None, 64, 64, 128)  0           block2<span class="emphasis">_conv2[<span class="string">0</span>][<span class="symbol">0</span>]               </span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">block3<span class="emphasis">_conv1 (Conv2D)           (None, 64, 64, 256)  295168      block2_</span>pool[<span class="string">0</span>][<span class="symbol">0</span>]                </span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis">block3_</span>conv2 (Conv2D)           (None, 64, 64, 256)  590080      block3<span class="emphasis">_conv1[<span class="string">0</span>][<span class="symbol">0</span>]               </span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">block3<span class="emphasis">_conv3 (Conv2D)           (None, 64, 64, 256)  590080      block3_</span>conv2[<span class="string">0</span>][<span class="symbol">0</span>]               </span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis">block3_</span>pool (MaxPooling2D)      (None, 32, 32, 256)  0           block3<span class="emphasis">_conv3[<span class="string">0</span>][<span class="symbol">0</span>]               </span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">block4<span class="emphasis">_conv1 (Conv2D)           (None, 32, 32, 512)  1180160     block3_</span>pool[<span class="string">0</span>][<span class="symbol">0</span>]                </span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis">block4_</span>conv2 (Conv2D)           (None, 32, 32, 512)  2359808     block4<span class="emphasis">_conv1[<span class="string">0</span>][<span class="symbol">0</span>]               </span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">block4<span class="emphasis">_conv3 (Conv2D)           (None, 32, 32, 512)  2359808     block4_</span>conv2[<span class="string">0</span>][<span class="symbol">0</span>]               </span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis">block4_</span>pool (MaxPooling2D)      (None, 16, 16, 512)  0           block4<span class="emphasis">_conv3[<span class="string">0</span>][<span class="symbol">0</span>]               </span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">block5<span class="emphasis">_conv1 (Conv2D)           (None, 16, 16, 512)  2359808     block4_</span>pool[<span class="string">0</span>][<span class="symbol">0</span>]                </span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis">block5_</span>conv2 (Conv2D)           (None, 16, 16, 512)  2359808     block5<span class="emphasis">_conv1[<span class="string">0</span>][<span class="symbol">0</span>]               </span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">block5<span class="emphasis">_conv3 (Conv2D)           (None, 16, 16, 512)  2359808     block5_</span>conv2[<span class="string">0</span>][<span class="symbol">0</span>]               </span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis">block5_</span>pool (MaxPooling2D)      (None, 8, 8, 512)    0           block5<span class="emphasis">_conv3[<span class="string">0</span>][<span class="symbol">0</span>]               </span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">pool4<span class="emphasis">_n (Conv2D)                (None, 16, 16, 3)    1539        block4_</span>pool[<span class="string">0</span>][<span class="symbol">0</span>]                </span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis">conv6 (Conv2D)                  (None, 8, 8, 3)      75267       block5_</span>pool[<span class="string">0</span>][<span class="symbol">0</span>]                </span></span></span><br><span class="line"><span class="emphasis"><span class="strong">__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span></span></span><br><span class="line"><span class="emphasis">conv2d_</span>transpose<span class="emphasis">_1 (Conv2DTrans (None, 32, 32, 3)    36          pool4_</span>n[<span class="string">0</span>][<span class="symbol">0</span>]                    </span><br><span class="line"><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__</span></span><br><span class="line"><span class="strong">pool3<span class="emphasis">_n (Conv2D)                (None, 32, 32, 3)    6915        block3_</span>pool[<span class="string">0</span>][<span class="symbol">0</span>]                </span></span><br><span class="line"><span class="strong">__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span></span><br><span class="line">conv2d<span class="emphasis">_transpose (Conv2DTranspo (None, 32, 32, 3)    144         conv6[<span class="string">0</span>][<span class="symbol">0</span>]                      </span></span><br><span class="line"><span class="emphasis"><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">add (Add)                       (None, 32, 32, 3)    0           conv2d<span class="emphasis">_transpose_</span>1[<span class="string">0</span>][<span class="symbol">0</span>]         </span></span></span><br><span class="line"><span class="emphasis"><span class="strong">                                                                 pool3<span class="emphasis">_n[<span class="string">0</span>][<span class="symbol">0</span>]                    </span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis">                                                                 conv2d_</span>transpose[<span class="string">0</span>][<span class="symbol">0</span>]           </span></span></span><br><span class="line"><span class="emphasis"><span class="strong">__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span></span></span><br><span class="line"><span class="emphasis">conv2d_</span>transpose<span class="emphasis">_2 (Conv2DTrans (None, 256, 256, 3)  576         add[<span class="string">0</span>][<span class="symbol">0</span>]                        </span></span><br><span class="line"><span class="emphasis"><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">softmax (Softmax)               (None, 256, 256, 3)  0           conv2d<span class="emphasis">_transpose_</span>2[<span class="string">0</span>][<span class="symbol">0</span>]         </span></span></span><br><span class="line"><span class="emphasis"><span class="strong">==================================================================================================</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">Total params: 14,799,165</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">Trainable params: 14,799,165</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">Non-trainable params: 0</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span></span></span><br></pre></td></tr></table></figure>
<h2 id="training">2.3. Training</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(</span><br><span class="line">    filepath=<span class="string">&#x27;./model.best.hdf5&#x27;</span>, </span><br><span class="line">    save_weights_only=<span class="literal">False</span>, </span><br><span class="line">    save_best_only=<span class="literal">True</span>,</span><br><span class="line">    monitor=<span class="string">&#x27;val_loss&#x27;</span>)</span><br><span class="line"></span><br><span class="line">hist = fcn_model.fit(</span><br><span class="line">    train_dataset, </span><br><span class="line">    epochs=<span class="number">120</span>,  </span><br><span class="line">    validation_data=test_dataset, </span><br><span class="line">    callbacks=[model_checkpoint_callback])</span><br></pre></td></tr></table></figure>
<h2 id="experiment">2.4. Experiment</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_mask</span>(<span class="params">prediction_mask</span>):</span></span><br><span class="line">    prediction_mask = tf.argmax(prediction_mask, axis=<span class="number">-1</span>)</span><br><span class="line">    prediction_mask = prediction_mask[..., tf.newaxis]</span><br><span class="line">    <span class="keyword">return</span> prediction_mask</span><br><span class="line"></span><br><span class="line">batch = <span class="built_in">next</span>(<span class="built_in">iter</span>(test_dataset))</span><br><span class="line">results = fcn_model.predict(batch)</span><br><span class="line">images, masks = batch</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> image, mask, result <span class="keyword">in</span> <span class="built_in">zip</span>(images, masks, results):</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    image = tf.keras.preprocessing.image.array_to_img(image)</span><br><span class="line">    mask = tf.keras.preprocessing.image.array_to_img(mask)</span><br><span class="line">    output = tf.keras.preprocessing.image.array_to_img(create_mask(result))</span><br><span class="line">    </span><br><span class="line">    image.save(<span class="string">f&#x27;image.<span class="subst">&#123;i:<span class="number">02</span>d&#125;</span>.jpg&#x27;</span>)</span><br><span class="line">    mask.save(<span class="string">f&#x27;mask.<span class="subst">&#123;i:<span class="number">02</span>d&#125;</span>.jpg&#x27;</span>)</span><br><span class="line">    output.save(<span class="string">f&#x27;output.<span class="subst">&#123;i:<span class="number">02</span>d&#125;</span>.jpg&#x27;</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<p>Some results</p>
<table>
<thead>
<tr class="header">
<th>ID</th>
<th>Raw Image</th>
<th>Ground truth</th>
<th>Predicted</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td><img src="/images/2021-04-21/image.01.jpg" /></td>
<td><img src="/images/2021-04-21/mask.01.jpg" /></td>
<td><img src="/images/2021-04-21/output.01.jpg" /></td>
</tr>
<tr class="even">
<td>2</td>
<td><img src="/images/2021-04-21/image.02.jpg" /></td>
<td><img src="/images/2021-04-21/mask.02.jpg" /></td>
<td><img src="/images/2021-04-21/output.02.jpg" /></td>
</tr>
<tr class="odd">
<td>3</td>
<td><img src="/images/2021-04-21/image.03.jpg" /></td>
<td><img src="/images/2021-04-21/mask.03.jpg" /></td>
<td><img src="/images/2021-04-21/output.03.jpg" /></td>
</tr>
<tr class="even">
<td>4</td>
<td><img src="/images/2021-04-21/image.04.jpg" /></td>
<td><img src="/images/2021-04-21/mask.04.jpg" /></td>
<td><img src="/images/2021-04-21/output.04.jpg" /></td>
</tr>
</tbody>
</table>
<p>Read more about FCN <a href="https://arxiv.org/abs/1411.4038">here</a></p>
<h1 id="u-net">3. U-Net</h1>
<h2 id="dataset-1">3.1. Dataset</h2>
<p>I will use the same dataset <code>Oxford-IIIT Pet</code> in this example.</p>
<h2 id="define-the-model-1">3.2. Define the model</h2>
<p>We will need some building block</p>
<ul>
<li>Down sampling block use normal convolution to down sample it inputs</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">down_sample</span>(<span class="params">filters, kernel_size, batch_norm=<span class="literal">True</span></span>):</span></span><br><span class="line">    initializer = tf.random_normal_initializer(<span class="number">0.0</span>, <span class="number">0.02</span>)</span><br><span class="line">    layers = tf.keras.Sequential()</span><br><span class="line">    layers.add(tf.keras.layers.Conv2D(</span><br><span class="line">        filters=filters, </span><br><span class="line">        kernel_size=kernel_size, </span><br><span class="line">        strides=<span class="number">2</span>, </span><br><span class="line">        padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">        kernel_initializer=initializer, </span><br><span class="line">        use_bias=<span class="literal">False</span>)</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> batch_norm:</span><br><span class="line">        layers.add(tf.keras.layers.BatchNormalization())</span><br><span class="line">    </span><br><span class="line">    layers.add(tf.keras.layers.LeakyReLU())</span><br><span class="line">    <span class="keyword">return</span> layers</span><br></pre></td></tr></table></figure>
<ul>
<li>Up sampling block use transpose convolution to up sample it inputs</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">up_sample</span>(<span class="params">filters, kernel_size, dropout=<span class="literal">False</span></span>):</span></span><br><span class="line">    initializer = tf.random_normal_initializer(<span class="number">0.0</span>, <span class="number">0.02</span>)</span><br><span class="line">    layers = tf.keras.Sequential()</span><br><span class="line">    layers.add(tf.keras.layers.Conv2DTranspose(</span><br><span class="line">        filters=filters, </span><br><span class="line">        kernel_size=kernel_size, </span><br><span class="line">        strides=<span class="number">2</span>, </span><br><span class="line">        padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">        kernel_initializer=initializer, </span><br><span class="line">        use_bias=<span class="literal">False</span>)</span><br><span class="line">    )</span><br><span class="line">    layers.add(tf.keras.layers.BatchNormalization())</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> dropout:</span><br><span class="line">        layers.add(tf.keras.layers.Dropout(<span class="number">0.5</span>))</span><br><span class="line">    </span><br><span class="line">    layers.add(tf.keras.layers.ReLU())</span><br><span class="line">    <span class="keyword">return</span> layers</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>Construct the U-Net model</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">down_stack = [down_sample(<span class="number">64</span>, <span class="number">4</span>, batch_norm=<span class="literal">False</span>)]</span><br><span class="line"><span class="keyword">for</span> filters <span class="keyword">in</span> [<span class="number">128</span>, <span class="number">256</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>]:</span><br><span class="line">    down_stack.append(down_sample(filters, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">up_stack = []</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    up_stack.append(up_sample(<span class="number">512</span>, <span class="number">4</span>, dropout=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> filters <span class="keyword">in</span> [<span class="number">512</span>, <span class="number">256</span>, <span class="number">128</span>, <span class="number">64</span>]:</span><br><span class="line">    up_stack.append(up_sample(filters, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inputs = tf.keras.layers.Input(shape=(<span class="number">256</span>, <span class="number">256</span>, <span class="number">3</span>))</span><br><span class="line">x = inputs</span><br><span class="line">skip_layers = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> down <span class="keyword">in</span> down_stack:</span><br><span class="line">    x = down(x)</span><br><span class="line">    skip_layers.append(x)</span><br><span class="line"></span><br><span class="line">skip_layers = <span class="built_in">reversed</span>(skip_layers[:<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># We use skip connection to avoid vanishing gradient problem</span></span><br><span class="line"><span class="keyword">for</span> up, skip_connection <span class="keyword">in</span> <span class="built_in">zip</span>(up_stack, skip_layers):</span><br><span class="line">    x = up(x)</span><br><span class="line">    x = tf.keras.layers.Concatenate()([x, skip_connection])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N_CLASSES = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">initializer = tf.random_normal_initializer(<span class="number">0.0</span>, <span class="number">0.02</span>)</span><br><span class="line">outputs = tf.keras.layers.Conv2DTranspose(</span><br><span class="line">    filters=N_CLASSES, </span><br><span class="line">    kernel_size=<span class="number">3</span>, </span><br><span class="line">    strides=<span class="number">2</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    kernel_initializer=initializer)(x)</span><br><span class="line"></span><br><span class="line">model = tf.keras.models.Model(inputs=inputs, outputs=outputs)</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">True</span>), </span><br><span class="line">    optimizer=tf.keras.optimizers.RMSprop(), </span><br><span class="line">    metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br></pre></td></tr></table></figure>
<h2 id="training-1">3.3. Training</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(</span><br><span class="line">    filepath=<span class="string">&#x27;./unet.&#123;val_loss:.9f&#125;.hdf5&#x27;</span>, </span><br><span class="line">    save_weights_only=<span class="literal">False</span>, </span><br><span class="line">    save_best_only=<span class="literal">True</span>,</span><br><span class="line">    monitor=<span class="string">&#x27;val_loss&#x27;</span>)</span><br><span class="line"></span><br><span class="line">model.fit(train_dataset, epochs=<span class="number">50</span>, validation_data=test_dataset, callbacks=[model_checkpoint_callback])</span><br></pre></td></tr></table></figure>
<h2 id="experiment-1">3.4. Experiment</h2>
<p>Some results</p>
<table>
<thead>
<tr class="header">
<th>ID</th>
<th>Raw Image</th>
<th>Ground truth</th>
<th>Predicted</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td><img src="/images/2021-04-21/unet_image.01.jpg" /></td>
<td><img src="/images/2021-04-21/unet_mask.01.jpg" /></td>
<td><img src="/images/2021-04-21/unet_output.01.jpg" /></td>
</tr>
<tr class="even">
<td>2</td>
<td><img src="/images/2021-04-21/unet_image.02.jpg" /></td>
<td><img src="/images/2021-04-21/unet_mask.02.jpg" /></td>
<td><img src="/images/2021-04-21/unet_output.02.jpg" /></td>
</tr>
<tr class="odd">
<td>3</td>
<td><img src="/images/2021-04-21/unet_image.03.jpg" /></td>
<td><img src="/images/2021-04-21/unet_mask.03.jpg" /></td>
<td><img src="/images/2021-04-21/unet_output.03.jpg" /></td>
</tr>
<tr class="even">
<td>4</td>
<td><img src="/images/2021-04-21/unet_image.04.jpg" /></td>
<td><img src="/images/2021-04-21/unet_mask.04.jpg" /></td>
<td><img src="/images/2021-04-21/unet_output.04.jpg" /></td>
</tr>
</tbody>
</table>
<h2 id="how-it-works">3.5. How it works?</h2>
<p>To understand more about vanishing gradient, click <a href="https://en.wikipedia.org/wiki/Vanishing_gradient_problem">here</a></p>
<p>Read more about <a href="https://arxiv.org/abs/1505.04597">U-Net</a></p>
<h1 id="u-net-with-pretrain">4. U-Net With Pretrain</h1>
<h2 id="dataset-2">4.1. Dataset</h2>
<p>I will use the same dataset <code>Oxford-IIIT Pet</code> in this example.</p>
<h2 id="define-model">4.2. Define model</h2>
<ul>
<li>The pretrain model <a href="https://keras.io/api/applications/mobilenet/#mobilenetv2-function">MobileNetV2</a> will be used in this example.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pretrain_model = tf.keras.applications.MobileNetV2(</span><br><span class="line">    input_shape=(<span class="number">256</span>, <span class="number">256</span>, <span class="number">3</span>), </span><br><span class="line">    include_top=<span class="literal">False</span>, </span><br><span class="line">    weights=<span class="string">&#x27;imagenet&#x27;</span>)</span><br><span class="line"></span><br><span class="line">target_values = [</span><br><span class="line">    <span class="string">&#x27;block_1_expand_relu&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;block_3_expand_relu&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;block_6_expand_relu&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;block_13_expand_relu&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;block_16_project&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">layers = [pretrain_model.get_layer(layer).output <span class="keyword">for</span> layer <span class="keyword">in</span> target_values]</span><br><span class="line"></span><br><span class="line">down_stack = tf.keras.models.Model(inputs=pretrain_model.<span class="built_in">input</span>, outputs=layers)</span><br><span class="line">down_stack.trainable = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">up_stack = []</span><br><span class="line"><span class="keyword">for</span> filters <span class="keyword">in</span> [<span class="number">512</span>, <span class="number">256</span>, <span class="number">128</span>, <span class="number">64</span>]:</span><br><span class="line">    up_stack.append(up_sample(filters, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">inputs = tf.keras.layers.Input(shape=(<span class="number">256</span>, <span class="number">256</span>, <span class="number">3</span>))</span><br><span class="line">x = inputs</span><br><span class="line"></span><br><span class="line">skip_layers = down_stack(x)</span><br><span class="line"></span><br><span class="line">x = skip_layers[<span class="number">-1</span>]</span><br><span class="line">skip_layers = <span class="built_in">reversed</span>(skip_layers[:<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> up, skip_connection <span class="keyword">in</span> <span class="built_in">zip</span>(up_stack, skip_layers):</span><br><span class="line">    x = up(x)</span><br><span class="line">    x = tf.keras.layers.Concatenate()([x, skip_connection])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N_CLASSES = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">initializer = tf.random_normal_initializer(<span class="number">0.0</span>, <span class="number">0.02</span>)</span><br><span class="line">outputs = tf.keras.layers.Conv2DTranspose(</span><br><span class="line">    filters=N_CLASSES, </span><br><span class="line">    kernel_size=<span class="number">3</span>, </span><br><span class="line">    strides=<span class="number">2</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    kernel_initializer=initializer)(x)</span><br><span class="line"></span><br><span class="line">model = tf.keras.models.Model(inputs=inputs, outputs=outputs)</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(</span><br><span class="line">    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">True</span>), </span><br><span class="line">    optimizer=tf.keras.optimizers.RMSprop(), </span><br><span class="line">    metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br></pre></td></tr></table></figure>
<h2 id="training-2">4.3. Training</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(</span><br><span class="line">    filepath=<span class="string">&#x27;./unet.pretrain.&#123;val_loss:.9f&#125;.hdf5&#x27;</span>, </span><br><span class="line">    save_weights_only=<span class="literal">False</span>, </span><br><span class="line">    save_best_only=<span class="literal">True</span>,</span><br><span class="line">    monitor=<span class="string">&#x27;val_loss&#x27;</span>)</span><br><span class="line"></span><br><span class="line">hist = model.fit(</span><br><span class="line">    train_dataset, </span><br><span class="line">    epochs=<span class="number">50</span>, </span><br><span class="line">    validation_data=test_dataset, </span><br><span class="line">    callbacks=[model_checkpoint_callback])</span><br></pre></td></tr></table></figure>
<h2 id="experiment-2">4.4. Experiment</h2>
<p>Some results</p>
<table>
<thead>
<tr class="header">
<th>ID</th>
<th>Raw Image</th>
<th>Ground truth</th>
<th>Predicted</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td><img src="/images/2021-04-21/image.01.jpg" /></td>
<td><img src="/images/2021-04-21/mask.01.jpg" /></td>
<td><img src="/images/2021-04-21/pretrain_output.01.jpg" /></td>
</tr>
<tr class="even">
<td>2</td>
<td><img src="/images/2021-04-21/image.02.jpg" /></td>
<td><img src="/images/2021-04-21/mask.02.jpg" /></td>
<td><img src="/images/2021-04-21/pretrain_output.02.jpg" /></td>
</tr>
<tr class="odd">
<td>3</td>
<td><img src="/images/2021-04-21/image.03.jpg" /></td>
<td><img src="/images/2021-04-21/mask.03.jpg" /></td>
<td><img src="/images/2021-04-21/pretrain_output.03.jpg" /></td>
</tr>
<tr class="even">
<td>4</td>
<td><img src="/images/2021-04-21/image.04.jpg" /></td>
<td><img src="/images/2021-04-21/mask.04.jpg" /></td>
<td><img src="/images/2021-04-21/pretrain_output.04.jpg" /></td>
</tr>
</tbody>
</table>
<h1 id="mask-rcnn">5. Mask-RCNN</h1>
<h2 id="load-pretrain-model-from-tensorflow-hub">5.1. Load pretrain model from tensorflow hub</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow_hub <span class="keyword">as</span> hub</span><br><span class="line"></span><br><span class="line">MODEL_PATH = (<span class="string">&#x27;https://tfhub.dev/tensorflow/mask_rcnn/inception_resnet_v2_1024x1024/1&#x27;</span>)</span><br><span class="line">mask_rcnn = hub.load(MODEL_PATH)</span><br></pre></td></tr></table></figure>
<h2 id="install-visualization-utils-from-tensorflow-models">5.2. Install visualization utils from tensorflow models</h2>
<ul>
<li>Shell script</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone –-depth 1 https://github.com/tensorflow/models</span><br><span class="line">sudo apt install -y protobuf-compiler</span><br><span class="line">cd models/research</span><br><span class="line">protoc object_detection/protos/*.proto --python_out=.</span><br><span class="line">cp object_detection/packages/tf2/setup.py .</span><br><span class="line">python -m pip install -q .</span><br></pre></td></tr></table></figure>
<ul>
<li>Import visualization package</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> object_detection.utils <span class="keyword">import</span> ops</span><br><span class="line"><span class="keyword">from</span> object_detection.utils <span class="keyword">import</span> visualization_utils <span class="keyword">as</span> viz</span><br><span class="line"><span class="keyword">from</span> object_detection.utils.label_map_util <span class="keyword">import</span> create_category_index_from_labelmap</span><br></pre></td></tr></table></figure>
<h2 id="experiment-3">5.3. Experiment</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = mask_rcnn(image)</span><br><span class="line">model_output = &#123;k: v.numpy() <span class="keyword">for</span> k, v <span class="keyword">in</span> results.items()&#125;</span><br><span class="line"></span><br><span class="line">detection_masks = model_output[<span class="string">&#x27;detection_masks&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">detection_masks = tf.convert_to_tensor(detection_masks)</span><br><span class="line"></span><br><span class="line">detection_boxes = model_output[<span class="string">&#x27;detection_boxes&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">detection_boxes = tf.convert_to_tensor(detection_boxes)</span><br><span class="line"></span><br><span class="line">detection_masks_reframed = ops.reframe_box_masks_to_image_masks(</span><br><span class="line">    detection_masks, </span><br><span class="line">    detection_boxes, </span><br><span class="line">    image.shape[<span class="number">1</span>], </span><br><span class="line">    image.shape[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">detection_masks_reframed = tf.cast(detection_masks_reframed &gt; <span class="number">0.5</span>, tf.uint8)</span><br><span class="line"></span><br><span class="line">model_output[<span class="string">&#x27;detection_masks_reframed&#x27;</span>] = detection_masks_reframed.numpy()</span><br><span class="line"></span><br><span class="line">boxes = model_output[<span class="string">&#x27;detection_boxes&#x27;</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">classes = model_output[<span class="string">&#x27;detection_classes&#x27;</span>][<span class="number">0</span>].astype(<span class="string">&#x27;int&#x27;</span>)</span><br><span class="line">scores = model_output[<span class="string">&#x27;detection_scores&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">masks = model_output[<span class="string">&#x27;detection_masks_reframed&#x27;</span>]</span><br><span class="line"></span><br><span class="line">image_with_mask = image.copy()</span><br><span class="line">viz.visualize_boxes_and_labels_on_image_array(</span><br><span class="line">    image=image_with_mask[<span class="number">0</span>], </span><br><span class="line">    boxes=boxes,</span><br><span class="line">    classes=classes,</span><br><span class="line">    scores=scores,</span><br><span class="line">    category_index=CATEGORY_IDX,</span><br><span class="line">    use_normalized_coordinates=<span class="literal">True</span>,</span><br><span class="line">    max_boxes_to_draw=<span class="number">200</span>,</span><br><span class="line">    min_score_thresh=<span class="number">0.30</span>,</span><br><span class="line">    agnostic_mode=<span class="literal">False</span>,</span><br><span class="line">    instance_masks=masks,</span><br><span class="line">    line_thickness=<span class="number">5</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">24</span>, <span class="number">32</span>))</span><br><span class="line">plt.imshow(image_with_mask[<span class="number">0</span>])</span><br><span class="line">plt.savefig(<span class="string">f&#x27;maskrcnn_output.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>Some results</li>
</ul>
<table>
<thead>
<tr class="header">
<th>ID</th>
<th>Raw Image</th>
<th>Ground truth</th>
<th>Predicted</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td><img src="/images/2021-04-21/image.01.jpg" /></td>
<td><img src="/images/2021-04-21/mask.01.jpg" /></td>
<td><img width="256" height="256" src="/images/2021-04-21/maskrcnn_output.01.jpg" /></td>
</tr>
<tr class="even">
<td>2</td>
<td><img src="/images/2021-04-21/image.02.jpg" /></td>
<td><img src="/images/2021-04-21/mask.02.jpg" /></td>
<td><img width="256" height="256" src="/images/2021-04-21/maskrcnn_output.02.jpg" /></td>
</tr>
<tr class="odd">
<td>3</td>
<td><img src="/images/2021-04-21/image.03.jpg" /></td>
<td><img src="/images/2021-04-21/mask.03.jpg" /></td>
<td><img width="256" height="256" src="/images/2021-04-21/maskrcnn_output.03.jpg" /></td>
</tr>
<tr class="even">
<td>4</td>
<td><img src="/images/2021-04-21/image.04.jpg" /></td>
<td><img src="/images/2021-04-21/mask.04.jpg" /></td>
<td><img width="256" height="256" src="/images/2021-04-21/maskrcnn_output.04.jpg" /></td>
</tr>
</tbody>
</table>
<h2 id="see-also">5.4. See also</h2>
<ul>
<li>https://tfhub.dev/tensorflow/mask_rcnn/inception_resnet_v2_1024x1024/1</li>
<li>https://arxiv.org/abs/1703.06870</li>
</ul>
]]></content>
      <categories>
        <category>Machine Learning</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Machine Learning</tag>
        <tag>CNN</tag>
        <tag>Computer Vision</tag>
        <tag>Deep Learning</tag>
        <tag>Tensorflow</tag>
        <tag>Keras</tag>
        <tag>Convolution Neural Network</tag>
        <tag>Image Segmentation</tag>
        <tag>Oxford-IIIT Pet</tag>
        <tag>FCN</tag>
        <tag>U-Net</tag>
        <tag>Mask-RCNN</tag>
        <tag>MobileNet-V2</tag>
        <tag>Pretrain</tag>
        <tag>Fully Convolution Network</tag>
      </tags>
  </entry>
</search>
