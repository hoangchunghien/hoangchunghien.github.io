<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Azure Administrator Associate achievement</title>
    <url>/2021/06/12/Azure-Administrator-achievement/</url>
    <content><![CDATA[<p><a href="https://www.credly.com/badges/cd4b0991-dc38-458b-a010-c91e1c3d6b1d"><img src="/images/2021-06-12/001.jpg"></a></p>
<a id="more"></a>
<p>After getting the first <code>Azure Fundamentals Certificate</code>, I went on studying the higher level to achieve this one as an Administrator Associate. I spent most of my free time to learn <a href="https://docs.microsoft.com/en-us/learn/certifications/azure-administrator/">Microsoft learning website</a> and to do the exercises for about a week, as soon as having full knowledge of the course.</p>
<p>Then I officially took an online exam at home due to the spreading of Covid-19 in the city. The exam lasted for 2 hours in a private quiet room, but to me, I just finished the test in within 1 hour. A check-in progress was required before the exam started (about 30 minutes), including capturing angles of the room, making sure that no sounds happened to disturb the exam, or else candidates could be considered to be fail.</p>
<p>The feeling of taking the online exam at home was pretty awesome and safe. I was confident to pass the test because I had had practiced many many times and learned from them, and you know what, I did it. I passed the exam! The result was announced as soon as the test was submitted, the certification was released in about 30 minutes later. I couldn't wait to publish it on muy Linkedin page! It showed that my studying method was right and useful, which could help me get the certification.</p>
]]></content>
      <categories>
        <category>Certification</category>
      </categories>
      <tags>
        <tag>Microsoft</tag>
        <tag>Azure</tag>
        <tag>Microsoft Certified</tag>
        <tag>Administrator</tag>
      </tags>
  </entry>
  <entry>
    <title>Azure DevOps Engineering Expert achievement</title>
    <url>/2021/06/13/Azure-DevOps-Expert-achievement/</url>
    <content><![CDATA[<p><a href="https://www.credly.com/badges/841717b5-747f-467d-bb68-071edb5ede22"><img src="/images/2021-06-12/002.jpg"></a></p>
<p>To be able to achieve <a href="https://docs.microsoft.com/en-us/learn/certifications/devops-engineer/">Microsoft Azure DevOps Expert Certification</a> you have to achieve <a href="https://docs.microsoft.com/en-us/learn/certifications/azure-administrator/">Azure Administrator Certification</a>. The responsibilities for the DevOps role include designing and implementing strategies for collaboration, code, infrastructure, source control, security, compliance, continuous integration, testing, delivery, monitoring, and feedback.</p>
<p>As part of my role, I have already been familiar with design and implement DevOps pipeline for automation deployment. So it somewhat easy to me to learn the course quickly. Just the <code>Microsoft DevOps Pipeline</code> is the new tool to me, it similar to <code>Gitlab Pipeline</code> or <code>Bitbucket Pipeline</code>. After a few days of practicing exercises, I decide to take the tests online due to the increasing of Covid-19. The process was the same as the last time I had taken the test for Administrator Associate certification. After an hour, I submitted the test and then the result was awesome. Yay, you got it, I passed!</p>
<p>I have felt very happy for what I have had achieved, I must say I'm so proud of myself hohoho. There will be other tests waiting for me to achieve in the near future, so keep following my blog for new updates! Thanks you guys!</p>
]]></content>
      <categories>
        <category>Certification</category>
      </categories>
      <tags>
        <tag>Microsoft</tag>
        <tag>Azure</tag>
        <tag>Microsoft Certified</tag>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>Azure Fundamentals Achievement</title>
    <url>/2021/04/24/Azure-Fundamentals-achievement/</url>
    <content><![CDATA[<p><a href="https://www.credly.com/badges/a7507eae-db25-495e-a3df-30eb9053e389?source=linked_in_profile"><img src="/images/2021-04-24/001.jpeg"></a></p>
<a id="more"></a>
<p>Great engineers always keep on learning and improving knowledge, skills as well as new technologies. Recently, I have just achieved the Microsoft Certified Azure Fundamentals after one-month learning, which provides me the basic understanding of how to work with Microsoft Azure cloud-based solutions and services.</p>
<p>This achievement can open a new opportunity for my career as an software engineer, because nowadays, cloud service has been played the highly important role in digital age. That now everything is on the cloud leads to the demand of human resouces having experiences to build and operate the cloud systems, including networking, storage, compute, application support, and application development. Therefore, to me, the Microsoft Certified Azure Fundamentals is really vital and achieving it can attract more clients.</p>
<p>I started learning the course from 22 Mar 2021 on Microsoft Learn Center Website. After finishing 6 parts in the learning path section, candidates can get the certification once passing an exam registered online at Pearson VUE. It takes $55.00 for candidates in Vietnam. Then, I went to Pearson VUE center in District 1, Ho Chi Minh City, where I took the exam. The result was announced right after submiting the test. And, I passed :)</p>
<p>Last but not least, I would like to show my gratefullness to the company <a href="https://www.tpptechnology.com">TP&amp;P Technology</a> for big supporting, which provided me good studying conditions to achieve the goal. Keep on learning!!!</p>
]]></content>
      <categories>
        <category>Certification</category>
      </categories>
      <tags>
        <tag>Microsoft</tag>
        <tag>Azure</tag>
        <tag>Microsoft Certified</tag>
        <tag>Azure Fundamentals</tag>
      </tags>
  </entry>
  <entry>
    <title>Azure Solution Architect Achievement</title>
    <url>/2021/07/03/Azure-Solution-Architect-Achievement/</url>
    <content><![CDATA[<p><a href="https://www.credly.com/badges/6edc9c29-1037-44f0-bc8a-a36749a57c8e"><img src="/images/2021-07-02/001.jpg"></a></p>
<p>Finally got it, after many days of learning from <a href="https://docs.microsoft.com/en-us/learn/certifications/azure-solutions-architect/">Microsoft Learning</a>.</p>
<p>To be able to earn this certification you should have advanced experience and knowledge of IT operations, including networking, virtualization, identity, security, business continuity, disaster recovery, data platform, budgeting, and governance. In addition, you should have expert-level skills in Azure administration and have experience with development and DevOps processes.</p>
]]></content>
      <categories>
        <category>Certification</category>
      </categories>
      <tags>
        <tag>Microsoft</tag>
        <tag>Azure</tag>
        <tag>Microsoft Certified</tag>
        <tag>DevOps</tag>
        <tag>Solution Architect</tag>
      </tags>
  </entry>
  <entry>
    <title>Bringing Generative AI to Your Desktop: A Developer&#39;s Journey üöÄ</title>
    <url>/2023/12/22/Bringing-Generative-AI-to-Your-Desktop-A-Developer-s-Journey/</url>
    <content><![CDATA[<p>Hey there, fellow devs and tech enthusiasts! üßë‚Äçüíª Today, I'm diving into something super exciting: running generative AI, like the famous ChatGPT and Google Bard, right from our own computers. Yep, you heard that right ‚Äì we're moving beyond the cloud and bringing the power of AI straight to our personal machines. And, let me tell you, it's not just about the cool factor (which, admittedly, is pretty high); it's about privacy üõ°Ô∏è, dodging those annoying 'AI is at capacity' messages, and, of course, the sheer joy of tinkering with cutting-edge tech.</p>
<h2 id="the-essentials-what-you-need-for-local-ai-magic">The Essentials: What You Need for Local AI Magic ‚ú®</h2>
<p>So, what's the secret sauce for getting this up and running? Two things: a reliable program to run the AI and a robust Large Language Model (LLM). If you've been around the AI block, you've probably heard about LLMs. They're the brains behind AI text generators. GPT-4, powering ChatGPT, and Gemini, used by Google Bard, are some of the big players.</p>
<p>In simpler terms, LLMs are like the superheroes of autocorrect ‚Äì trained on tons of data, they excel at figuring out which words go best together to make sentences sound natural and human-like ü§ñ.</p>
<h2 id="the-cool-stuff-llms-you-can-install-locally">The Cool Stuff: LLMs You Can Install Locally üè°</h2>
<a id="more"></a>
<p>This is where it gets exciting! We're not limited to the big tech offerings; there's a variety of AI models out there ripe for the picking. Meta‚Äôs LLaMa is one such example, but there's a whole world of models developed by researchers and open-source heroes. The idea? To drive innovation and transparency in the AI field.</p>
<p><img src="/images/2023-12-22/001.png" style="max-height: 540px;"></p>
<h2 id="my-tool-of-choice-lm-studio">My Tool of Choice: LM Studio üõ†Ô∏è</h2>
<p>For this adventure, I'm picking LM Studio ‚Äì a top-notch, free option compatible with Windows, macOS, and Linux. It‚Äôs like the Swiss Army knife for local AI - versatile and user-friendly. You can get it right <a href="https://lmstudio.ai/">here</a>.</p>
<p><strong>Setting Up Your AI Lab</strong></p>
<p>First off, grab LM Studio from <a href="https://lmstudio.ai/">their official site</a>. But, a word of caution: running LLMs is like feeding a beast ‚Äì it needs power üí™. Think newer PCs with AVX2 support or Apple Silicon Macs, and at least 16GB RAM. And for my fellow PC users, aim for 6GB VRAM at least.</p>
<p>Once you're set up, it's time to choose your LLM. LM Studio makes it a breeze by showcasing 'new and noteworthy' models right on the home screen. It's like being a kid in a candy store ‚Äì so many options, each with its own flavor and style.</p>
<h2 id="the-real-fun-prompting-and-tweaking">The Real Fun: Prompting and Tweaking üéÆ</h2>
<p>With your chosen LLM downloaded, jump into the AI Chat panel. Here‚Äôs where your developer instincts kick in. Choose your model, type in your prompt, and hit Enter. Watching the AI respond is like witnessing a magic trick ‚Äì every single time üé©.</p>
<p>LM Studio offers a bunch of knobs and dials to play with. Adjust response lengths, offload work to your GPU, and even set a 'pre-prompt' for a consistent AI personality.</p>
<p><img src="/images/2023-12-22/002.gif" style="max-height: 540px;"></p>
<h2 id="wrapping-up-your-personal-ai-playground">Wrapping Up: Your Personal AI Playground üåê</h2>
<p>And that‚Äôs it! You‚Äôve now got a powerful AI right at your fingertips. Start fresh conversations, revisit old chats, and experiment to your heart's content. Whether you‚Äôre looking to dive deeper into AI development or just have some nerdy fun, LM Studio makes it all incredibly accessible.</p>
<p>So, there you have it, my fellow code wizards and tech enthusiasts üßô‚Äç‚ôÇÔ∏èüë©‚Äçüíª. The world of local AI is not just fascinating; it's right within our reach. Happy coding, and let's see what amazing things we can create with our new AI buddies!</p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Software Development</category>
        <category>Software Tutorials</category>
      </categories>
      <tags>
        <tag>Generative AI</tag>
        <tag>LMStudio</tag>
        <tag>LLM</tag>
        <tag>Technology Tutorial</tag>
        <tag>ChatGPT</tag>
        <tag>GPT-4</tag>
        <tag>Gemini</tag>
        <tag>Google Bard</tag>
        <tag>Tech DIY</tag>
        <tag>LLaMa</tag>
      </tags>
  </entry>
  <entry>
    <title>Chia S·∫ª V·ªÅ L√†m Vi·ªác Remote t·∫°i ƒê√† L·∫°t</title>
    <url>/2022/06/12/Chia-Se-Ve-Lam-Viec-Remote/</url>
    <content><![CDATA[<p>S·ª± ki·ªán Covid-19 ƒë√£ g√≥p ph·∫ßn t·∫°o ƒëi·ªÅu ki·ªán cho gi·ªõi vƒÉn ph√≤ng c√¥ng s·ªü ti·∫øp c·∫≠n ƒë·∫øn h√¨nh th·ª©c l√†m vi·ªác remote, nghƒ©a l√† l√†m vi·ªác online t·ª´ xa, c√≥ th·ªÉ ·ªü t·∫°i nh√† c√πng v·ªõi chi·∫øc m√°y t√≠nh k·∫øt n·ªëi internet l√† c√≥ th·ªÉ vi vu, trong th·ªùi ƒëi·ªÉm c√°ch ly x√£ h·ªôi. Tuy nhi√™n, giai ƒëo·∫°n c√°ch ly ƒë√£ qua, v√† hi·ªán t·∫°i m·ªçi ng∆∞·ªùi chung tay x√¢y d·ª±ng l·∫°i n·ªÅn kinh t·∫ø, gi·ªõi vƒÉn ph√≤ng c≈©ng quay tr·ªü l·∫°i tr·ª• s·ªü c√¥ng ty ƒë·ªÉ l√†m vi·ªác. Nhi·ªÅu anh em chia s·∫ª r·∫±ng, th·ªùi gian l√†m remote ·ªü nh√† c≈©ng c√≥ c√°i hay v√† c√°i b·∫•t c·∫≠p c·ªßa n√≥, nh∆∞ng n·∫øu bi·∫øt ch·ªß ƒë·ªông th√¨ s·∫Ω kh√¥ng th√†nh v·∫•n ƒë·ªÅ.</p>
<p>Tr∆∞·ªõc khi c·∫£ n∆∞·ªõc ch√≠nh th·ª©c m·ªü c·ª≠a sau gi√£n c√°ch, gia ƒë√¨nh t√¥i ƒë√£ chuy·ªÉn v·ªÅ qu√™ s·ªëng. V·∫≠y n√™n, trong khi b√¢y gi·ªù c√°c anh ch·ªã em ƒë·ªìng nghi·ªáp y√™u qu√Ω ƒë√£ l√™n vƒÉn ph√≤ng ng·ªìi v·ªõi nhau, ch·ªâ c√≥ t√¥i l·∫ª loi ng·ªìi l√†m remote ·ªü qu√™ v√† ng√≥ng ch·ªù vƒÉn ph√≤ng ·ªü ƒê√† L·∫°t m·ªü c·ª≠a v√†o m·ªôt ng√†y kh√¥ng xa. Th√†nh ra t√¥i ƒë√£ v√† ƒëang l√†m remote h∆°n 1 nƒÉm nay r·ªìi, v√† t√¥i s·∫Ω chia s·∫ª cho c√°c b·∫°n v·ªÅ tr·∫£i nghi·ªám l√†m vi·ªác remote t·∫°i nh√† c·ªßa t√¥i ·ªü g·∫ßn th√†nh ph·ªë ƒê√† L·∫°t nh∆∞ th·∫ø n√†o nh√©.</p>
<a id="more"></a>
<p><strong>ƒêi·ªÅu ki·ªán, Trang Thi·∫øt b·ªã l√†m vi·ªác remote</strong></p>
<p>ƒê·ªÉ l√†m vi·ªác online t·∫°i nh√†, ƒë·∫ßu ti√™n kh√¥ng th·ªÉ thi·∫øu ƒë∆∞·ª£c ch√≠nh l√† chi·∫øc m√°y t√≠nh, c√≥ th·ªÉ l√† PC ho·∫∑c l√† laptop, ho·∫∑c c·∫£ hai. N·∫øu d·ª•ng PC th√¨ c·∫ßn trang b·ªã th√™m tai nghe, loa ngo√†i, camera ƒë·ªÉ c√≥ th·ªÉ tham gia trao ƒë·ªïi, h·ªçp h√†nh c√πng ƒë·ªìng nghi·ªáp v√† ƒë·ªëi t√°c.</p>
<p>Ti·∫øp theo kh√¥ng k√©m quan tr·ªçng ch√≠nh l√† k·∫øt n·ªëi m·∫°ng Wifi/Internet si√™u m·∫°nh, gi√∫p cho qu√° tr√¨nh l√†m vi·ªác di·ªÖn ra tr√¥i ch·∫£y. ƒê·∫∑c bi·ªát l√† khi ph·∫£i tham gia c√°c cu·ªôc h·ªçp hay trao ƒë·ªïi v·ªõi ƒë·ªôi nh√≥m, b·∫°n s·∫Ω kh√¥ng b·ªã gi√°n ƒëo·∫°n gi·ªØa ch·ª´ng l√†m phi·ªÅn v√† m·∫•t th·ªùi gian c·ªßa t·∫≠p th·ªÉ.</p>
<p>C√≤n m·ªôt c√°i n·ªØa t√¥i ƒë·∫£m b·∫£o c√°c b·∫°n s·∫Ω kh√¥ng nghƒ© t·ªõi, ch·ªâ c√≥ ng∆∞·ªùi v·ªÅ v√πng qu√™ nh∆∞ ch·ªó t√¥i th√¨ m·ªõi g·∫∑p. ƒê√≥ ch√≠nh l√† ƒëi·ªán. ƒê√∫ng, l√† ƒëi·ªán. Chuy·ªán g√¨ s·∫Ω x·∫£y ra n·∫øu ng√†y l√†m vi·ªác l·∫°i b·ªã c√∫p ƒëi·ªán c·∫£ ng√†y? Ch·∫•p nh·∫≠n b·ªã tr·ª´ l∆∞∆°ng oan ∆∞? Kh√¥ng, kh√¥ng, t√¥i ph·∫£i lu√¥n trong "t∆∞ th·∫ø chu·∫©n b·ªã" nh·ª° m·ªôt mai th·ª©c d·∫≠y ƒëi·ªán b·ªóng ƒëi v·∫Øng. Laptop, ƒëi·ªán tho·∫°i, ipad t√¥i lu√¥n s·∫°c ƒë·∫ßy pin, ngo√†i ra c√≤n c√≥ s·∫°c d·ª± ph√≤ng, sim 4G ho·∫∑c g√≥i c∆∞·ªõc 4G dung l∆∞·ª£ng cao. ·ªû th√†nh ph·ªë, d∆∞·ªùng nh∆∞ ch∆∞a khi n√†o c√∫p ƒëi·ªán v√†o ng√†y l√†m vi·ªác, tr·ª´ khi c√≥ s·ª± c·ªë ƒëi·ªán b·∫•t ng·ªù nh∆∞ng c≈©ng s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω nhanh ch√≥ng trong m·ªôt v√†i ti·∫øng. Nh∆∞ng ·ªü qu√™ n∆°i t√¥i ƒëang ·ªü th√¨ m·ªôt th√°ng c√∫p ƒëi·ªán 1-2 l·∫ßn l√† b√¨nh th∆∞·ªùng, m√† to√†n c√∫p v√†o ng√†y l√†m vi·ªác trong tu·∫ßn, m·ªôt l·∫ßn c√∫p k√©o d√†i 6-12 ti·∫øng. Th·∫ø m·ªõi gh√™. M√† nh√† ƒë√¢u c√≥ ƒëi·ªÅu ki·ªán mua ch·∫°y m√°y ph√°t ƒëi·ªán. Ch∆∞a k·ªÉ hi·ªán t·∫°i gi√° xƒÉng tƒÉng cao, d√πng m√°y ph√°t ƒëi·ªán c≈©ng x√≥t t√∫i l·∫Øm.</p>
<p>Kh√¥ng gian ng·ªìi l√†m vi·ªác tho·∫£i m√°i, y√™n tƒ©nh c≈©ng l√† ƒëi·ªÅu c·∫ßn thi·∫øt.</p>
<p>N·∫øu nh√† c√≥ con nh·ªè ch∆∞a g·ª≠i nh√† tr·∫ª th√¨ n√™n nh·ªù ng∆∞·ªùi chƒÉm ƒë·ªÉ t·∫≠p trung l√†m vi·ªác. V√†o th·ªùi ƒëi·ªÉm gi√£n c√°ch x√£ h·ªôi l·∫ßn 2 nƒÉm ngo√°i, t√¥i ph·ª• tr√°ch ng·ªìi ·ªü nh√† l√†m vi·ªác ki·∫øm ti·ªÅn, c√≤n v·ª£ t√¥i ph·ª• tr√°ch n·ªôi tr·ª£, chƒÉm ch·ªìng chƒÉm con.</p>
<p><strong>Ni·ªÅm Vui khi l√†m vi·ªác Remote</strong></p>
<p>T√¥i kh√¥ng bi·∫øt ng∆∞·ªùi kh√°c l√†m vi·ªác remote s·∫Ω nh∆∞ th·∫ø n√†o, v·ªõi t√¥i th√¨ t√¥i th·∫•y tho·∫£i m√°i l·∫Øm. S·ª± tho·∫£i m√°i ƒë∆∞·ª£c th·ªÉ hi·ªán qua vi·ªác:</p>
<p>ƒÇn m·∫∑c: √°o thun, qu·∫ßn ƒë√πi, c√≥ khi ng√†y h√® n√≥ng n·ª±c ch·∫£ c·∫ßn m·∫∑c √°o hahaha.</p>
<p>ƒÇn u·ªëng: c∆°m nh√† v·ª£ n·∫•u bao no bao ngon v√† dinh d∆∞·ª°ng; c√† ph√™ t·ª± pha v√¥ c√πng ti·∫øt ki·ªám.</p>
<p>ƒêi v·ªá sinh: ƒëang h·ªçp m√† T√†o Th√°o d√≠ th√¨ b∆∞ng c·∫£ c√°i laptop v√†o toilet, ch·∫£ ai bi·∫øt g√¨ ƒë√¢u n√®.</p>
<p>Chill: m·ªü nh·∫°c loa ngo√†i t√πy √Ω th√≠ch ƒë·ªÉ push tinh th·∫ßn c√†y cu·ªëc th√™m high, kh√¥ng s·ª£ l√†m phi·ªÅn ai.</p>
<p>Ngh·ªâ tr∆∞a: ƒë∆∞·ª£c n·∫±m th·∫≥ng l∆∞ng tr√™n gi∆∞·ªùng √™m chƒÉn ·∫•m, y√™n tƒ©nh ch·ª£p m·∫Øt m√† kh√¥ng b·ªã l√†m ·ªìn b·ªüi m√¥i tr∆∞·ªùng nh·ªôn nh·ªãp c√¥ng s·ªü.</p>
<p>Ri√™ng t∆∞: kh√¥ng c√≥ ai v√¥ t√¨nh hay c·ªë √Ω l∆∞·ªõt nh√¨n m√†n h√¨nh hay b√†n l√†m vi·ªác c·ªßa nhau.</p>
<p><strong>Gi·ªõi h·∫°n c·ªßa l√†m vi·ªác remote</strong></p>
<p>Tuy n√≥i l√†m vi·ªác remote t·∫°i nh√† l√† tho·∫£i m√°i nh∆∞ng kh√¥ng t·ª± do nh∆∞ nhi·ªÅu ng∆∞·ªùi l·∫ßm t∆∞·ªüng. B·∫£n th√¢n ng∆∞·ªùi l√†m remote ph·∫£i c√≥ tr√°ch nhi·ªám, t·ª± gi√°c, √Ω th·ª©c trong c√¥ng vi·ªác, v√¨ m·ª•c ti√™u chung cu·ªëi c√πng l√† k·∫øt qu·∫£ l√†m vi·ªác ƒë·∫°t hi·ªáu qu·∫£ t·ªët.</p>
<ol type="1">
<li><p>L√†m remote kh√¥ng ph·∫£i l√† mu·ªën l√†m gi·ªù n√†o th√¨ l√†m ƒë√¢u nh√©, m√† v·∫´n theo gi·ªù l√†m vi·ªác h√†nh ch√≠nh c·ªßa c√¥ng ty, ho·∫∑c theo m√∫i gi·ªù h√†nh ch√≠nh ·ªü ƒë·ªãa ph∆∞∆°ng m√¨nh v·ªõi c√¥ng ty n∆∞·ªõc ngo√†i. M√† c√≥ khi h·∫øt gi·ªù l√†m r·ªìi, vi·ªác ch∆∞a xong th√¨ v·∫´n ph·∫£i c√†y ti·∫øp th√¥i ƒë·ªÉ k·ªãp ti·∫øn ƒë·ªô chung c·ªßa d·ª± √°n.</p></li>
<li><p>Ch·ªß ƒë·ªông b√°o c√°o c√¥ng vi·ªác h√†ng ng√†y cho ng∆∞·ªùi qu·∫£n l√Ω ƒë·ªÉ h·ªç n·∫Øm ƒë∆∞·ª£c kh·ªëi l∆∞·ª£ng c√¥ng vi·ªác, ti·∫øn ƒë·ªô, kh√≥ khƒÉn‚Ä¶ m√† m√¨nh ƒëang l√†m. T·ª´ ƒë√≥ m·ªõi l√†m c∆° s·ªü ƒë·ªÉ ch·∫•m c√¥ng, t√≠nh th∆∞·ªüng, tƒÉng l∆∞∆°ng trong t∆∞∆°ng lai.</p></li>
</ol>
<p>V·ª£ t√¥i t·ª´ng l√†m remote th·ªùi v·ª• cho m·ªôt c√¥ng ty Singapore, h·ªç y√™u c·∫ßu c√†i m·ªôt ch∆∞∆°ng tr√¨nh v√†o m√°y t√≠nh ƒë·ªÉ n√≥ v·ª´a ƒë·∫øm gi·ªù l√†m v√† auto ch·ª•p l·∫°i m√†n h√¨nh l√†m vi·ªác c·ªßa v·ª£ t√¥i v√† l∆∞u l√™n cloud ƒë·ªÉ b√™n ƒë√≥ h·ªç qu·∫£n l√Ω m√¨nh l√†m g√¨. B·∫°n nghƒ© sao v·ªÅ c√°ch gi√°m s√°t nh√¢n vi√™n l√†m vi·ªác remote nh∆∞ th·∫ø n√†y?</p>
<ol start="3" type="1">
<li><p>TƒÉng c∆∞·ªùng t∆∞∆°ng t√°c, giao ti·∫øp, trao ƒë·ªïi ƒë·ªÉ ƒë·ªìng nghi·ªáp v√† qu·∫£n l√Ω bi·∫øt m√¨nh ƒëang c√≥ m·∫∑t, v√† kh√¥ng "qu√™n" s·ª± t·ªìn t·∫°i c·ªßa m·ªôt ng∆∞·ªùi ƒë·ªìng nghi·ªáp ƒë√£ l√¢u kh√¥ng g·∫∑p. Dƒ© nhi√™n kh√¥ng ph·∫£i l√† t√°m ph√©t c√†ng nhi·ªÅu c√†ng t·ªët nha, tr√°nh l√†m phi·ªÅn ƒë·ªìng nghi·ªáp v·ªõi nh·ªØng v·∫•n ƒë·ªÅ ngo√†i c√¥ng vi·ªác. N√≥i ch·ª© dev c√†y s·∫•p m·∫∑t lu√¥n, kh√¥ng c√≥ r√£nh ƒë·ªÉ t√°m chuy·ªán lu√¥n ak. C√°i t√¥i mu·ªën nh·∫•n m·∫°nh ƒë√≥ l√† s·ª± ch·ªß ƒë·ªông giao ti·∫øp ƒë√∫ng vi·ªác, ƒë√∫ng l√∫c, ƒë√∫ng ƒë·ªëi t∆∞·ª£ng, nh∆∞ v·∫≠y s·∫Ω t·∫°o ƒë∆∞·ª£c s·ª± tin c·∫≠y cho ban qu·∫£n l√Ω c√¥ng ty.</p></li>
<li><p>H·ªó tr·ª£ online t·ªën nhi·ªÅu th·ªùi gian h∆°n l√† h·ªó tr·ª£ tr·ª±c ti·∫øp, nh·∫•t l√† v·∫•n ƒë·ªÅ li√™n quan ƒë·∫øn m·∫∑t k·ªπ thu·∫≠t.</p></li>
<li><p>Ng·ªìi l√†m remote ·ªü nh√† s·∫Ω kh√¥ng c√≥ ƒëi·ªÅu ki·ªán ƒë·ªÉ tr√≤ chuy·ªán v√† t∆∞∆°ng t√°c tr·ª±c ti·∫øp v·ªõi ƒë·ªìng nghi·ªáp c√°c b·ªô ph·∫≠n kh√°c nhau, n√™n ƒë√¥i khi b·∫£n th√¢n s·∫Ω c·∫£m th·∫•y thi·∫øu v·∫Øng b·∫°n b√®. T√¥i nh·ªõ v√†o m√πa gi√£n c√°ch nƒÉm ngo√°i, c√≥ l·∫ßn t√¥i ƒë√£ ƒë·ªÅ xu·∫•t "Nh·∫≠u Online" v·ªõi nh√≥m c·ªßa m√¨nh. K·∫øt qu·∫£ c≈©ng c√≥ t·ªïng c·ªông 4 ng∆∞·ªùi tham gia nh√≥m video call nh√¨n nhau c∆∞·ªùi n√≥i qua m√†n h√¨nh nho nh·ªè m√† c·ª•ng ly, ƒÉn m·ªìi.</p></li>
</ol>
<p>N·∫øu ƒë∆∞·ª£c h·ªèi gi·ªØa l√†m remote v√† l√†m t·∫°i vƒÉn ph√≤ng, t√¥i s·∫Ω thi√™n v·ªÅ c√°i n√†o h∆°n. Th√¨ c√≥ l·∫Ω 50-50. M·ªói h√¨nh th·ª©c l√†m vi·ªác ƒë·ªÅu c√≥ m·∫∑t hay v√† gi√° tr·ªã c·ªßa ri√™ng c·ªßa n√≥. H∆°n h·∫øt th·∫£y, l√†m vi·ªác remote kh√¥ng gi·ªõi h·∫°n ch√∫ng ta v·ªÅ m·∫∑t kh√¥ng gian v√† th·ªùi gian, ch√∫ng ta c√≥ th·ªÉ l√†m vi·ªác remote v·ªõi ƒë·ªëi t√°c ·ªü c√°ch ta n·ª≠a v√≤ng ƒë·ªãa c·∫ßu, ho·∫∑c v·ª´a du l·ªãch v·ª´a l√†m vi·ªác.</p>
<p>C√≤n b·∫°n, b·∫°n c√≥ mong mu·ªën m·ªôt c√¥ng vi·ªác remote kh√¥ng? ;)</p>
]]></content>
      <categories>
        <category>Career</category>
      </categories>
      <tags>
        <tag>remote job</tag>
        <tag>viec lam remote</tag>
      </tags>
  </entry>
  <entry>
    <title>Distributed Tasks Processing With Google Pub/Sub</title>
    <url>/2020/12/12/Distributed-Tasks-Processing-With-Google-Pub-Sub/</url>
    <content><![CDATA[<h1 id="what-is-pubsub">What is Pub/Sub?</h1>
<blockquote><p>Pub/Sub is an asynchronous messaging service that decouples services that produce events from services that process events. You can use Pub/Sub as messaging-oriented middleware or event ingestion and delivery for streaming analytics pipelines. Pub/Sub offers durable message storage and real-time message delivery with high availability and consistent performance at scale. Pub/Sub servers run in all Google Cloud regions around the world.</p>
<footer><strong>Google Cloud</strong><cite><a href="https://cloud.google.com/pubsub/docs/overview">cloud.google.com/pubsub/docs/overview</a></cite></footer></blockquote>
<h1 id="core-concepts">Core concepts</h1>
<ul>
<li><strong>Topic</strong>: A named resource to which messages are sent by publishers.</li>
<li><strong>Subscription</strong>: A named resource representing the stream of messages from a single, specific topic, to be delivered to the subscribing application.</li>
<li><strong>Message</strong>: The combination of data and (optional) attributes that a publisher sends to a topic and is eventually delivered to subscribers.</li>
<li><strong>Message attribute</strong>: A key-value pair that a publisher can define for a message. For example, key iana.org/language_tag and value en could be added to messages to mark them as readable by an English-speaking subscriber.</li>
</ul>
<h1 id="install">Install</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install google-cloud-pubsub</span><br></pre></td></tr></table></figure>
<h1 id="task-dispatcher-publisher">Task Dispatcher (Publisher)</h1>
<p>In this example, the publisher will act as a task distributer.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> google.cloud <span class="keyword">import</span> pubsub_v1</span><br><span class="line"></span><br><span class="line">project_id = os.environ.get(<span class="string">&#x27;GCP_PROJECT_ID&#x27;</span>)</span><br><span class="line">topic_id = os.environ.get(<span class="string">&#x27;GCP_PUBSUB_TOPIC_ID&#x27;</span>)</span><br><span class="line"></span><br><span class="line">publisher = pubsub_v1.PublisherClient()</span><br><span class="line"><span class="comment"># The `topic_path` method creates a fully qualified identifier</span></span><br><span class="line"><span class="comment"># in the form `projects/&#123;project_id&#125;/topics/&#123;topic_id&#125;`</span></span><br><span class="line">topic_path = publisher.topic_path(project_id, topic_id)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    data = <span class="string">&quot;Message number &#123;&#125;&quot;</span>.<span class="built_in">format</span>(n)</span><br><span class="line">    <span class="comment"># Data must be a bytestring</span></span><br><span class="line">    data = data.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="comment"># When you publish a message, the client returns a future.</span></span><br><span class="line">    future = publisher.publish(topic_path, data)</span><br><span class="line">    print(future.result())</span><br><span class="line"></span><br><span class="line">print(<span class="string">f&quot;Published messages to <span class="subst">&#123;topic_path&#125;</span>.&quot;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="task-workers-subscribers">Task Workers (Subscribers)</h1>
<p>Multiple workers will subscribe to a same subscriptions to receive difference tasks from a same publisher.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> google.cloud <span class="keyword">import</span> pubsub_v1</span><br><span class="line"></span><br><span class="line">project_id = os.environ.get(<span class="string">&quot;GCP_PROJECT_ID&quot;</span>)</span><br><span class="line">subscription_id = os.environ.get(<span class="string">&quot;GCP_PUBSUB_SUBSCRIPTION_ID&quot;</span>)</span><br><span class="line"></span><br><span class="line">subscriber = pubsub_v1.SubscriberClient()</span><br><span class="line">subscription_path = subscriber.subscription_path(project_id, subscription_id)</span><br><span class="line"></span><br><span class="line">NUM_MESSAGES = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Wrap the subscriber in a &#x27;with&#x27; block to automatically call close() to</span></span><br><span class="line"><span class="comment"># close the underlying gRPC channel when done.</span></span><br><span class="line"><span class="keyword">with</span> subscriber:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># The subscriber pulls a specific number of messages.</span></span><br><span class="line">        print(<span class="string">f&quot;Waiting for a message...&quot;</span>)</span><br><span class="line">        response = subscriber.pull(</span><br><span class="line">            request=&#123;<span class="string">&quot;subscription&quot;</span>: subscription_path, <span class="string">&quot;max_messages&quot;</span>: NUM_MESSAGES&#125;</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> response:</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        ack_ids = []</span><br><span class="line">        <span class="keyword">for</span> received_message <span class="keyword">in</span> response.received_messages:</span><br><span class="line">            print(<span class="string">f&quot;Received: <span class="subst">&#123;received_message.message.data&#125;</span>.&quot;</span>)</span><br><span class="line">            ack_ids.append(received_message.ack_id)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Acknowledges the received messages so they will not be sent again.</span></span><br><span class="line">        subscriber.acknowledge(</span><br><span class="line">            request=&#123;<span class="string">&quot;subscription&quot;</span>: subscription_path, <span class="string">&quot;ack_ids&quot;</span>: ack_ids&#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        print(</span><br><span class="line">            <span class="string">f&quot;Received and acknowledged <span class="subst">&#123;<span class="built_in">len</span>(response.received_messages)&#125;</span> messages from <span class="subst">&#123;subscription_path&#125;</span>.&quot;</span></span><br><span class="line">        )</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Google Cloud</category>
        <category>Pub/Sub</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Pub/Sub</tag>
        <tag>GCP</tag>
        <tag>Google Cloud</tag>
        <tag>Distributed Processing</tag>
        <tag>Minibatch Processing</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Object Level Permission Template</title>
    <url>/2021/01/21/Django-Object-Level-Permission-Templage/</url>
    <content><![CDATA[<p>A template to guide you how to setup a Django Project with Object Level Permission.</p>
<a id="more"></a>
<h2 id="authentication">1. Authentication</h2>
<h3 id="packages">1.1. Packages</h3>
<ul>
<li><p><a href="https://djoser.readthedocs.io/">Djoser</a> provide commonly use authentication functions such as: Sign Up, Login, Change Password, Forgot Password, User Account Activation, User Profile</p></li>
<li><p><a href="https://django-rest-framework-simplejwt.readthedocs.io/">Simple JWT</a> provide Json Web Token authentication method.</p></li>
<li><p><a href="https://github.com/django-guardian/django-guardian">Django Guardian</a> provide object level permission management.</p></li>
</ul>
<h3 id="configuration">1.2. Configuration</h3>
<ul>
<li>JWT authentication is configured in</li>
</ul>
<p><code>core/settings.py</code> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Application definition</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    (...),</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;djoser&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;guardian&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">AUTHENTICATION_BACKENDS = (</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.backends.ModelBackend&#x27;</span>, <span class="comment"># default</span></span><br><span class="line">    <span class="string">&#x27;guardian.backends.ObjectPermissionBackend&#x27;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Configuration for Django Rest Framework</span></span><br><span class="line"><span class="comment"># https://www.django-rest-framework.org/</span></span><br><span class="line"></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: (</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Simple JWT Authentication</span></span><br><span class="line">        <span class="comment"># https://django-rest-framework-simplejwt.readthedocs.io/</span></span><br><span class="line">        <span class="string">&#x27;rest_framework_simplejwt.authentication.JWTAuthentication&#x27;</span>,</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>core/urls.py</code> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    (...),</span><br><span class="line"></span><br><span class="line">    path(<span class="string">&#x27;auth/&#x27;</span>, include(<span class="string">&#x27;djoser.urls&#x27;</span>)),</span><br><span class="line">    path(<span class="string">&#x27;auth/&#x27;</span>, include(<span class="string">&#x27;djoser.urls.jwt&#x27;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<h3 id="data-model">1.3. Data Model</h3>
<h4 id="using-a-custom-model">1.3.1. Using a custom model</h4>
<p>If you‚Äôre starting a new project, it‚Äôs highly recommended to set up a custom user model, even if the default User model is sufficient for you. This model behaves identically to the default user model, but you‚Äôll be able to customize it in the future if the need arises.</p>
<p><code>core/user/models.py</code> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">AbstractUser</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p><code>core/settings.py</code> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AUTH_USER_MODEL = <span class="string">&#x27;user.User&#x27;</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    (...),</span><br><span class="line">    <span class="string">&#x27;core.user&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<h4 id="reusable-apps-and-auth_user_model">1.3.2. Reusable apps and AUTH_USER_MODEL</h4>
<p>Reusable apps shouldn‚Äôt implement a custom user model. A project may use many apps, and two reusable apps that implemented a custom user model couldn‚Äôt be used together. If you need to store per user information in your app, use a <code>ForeignKey</code> or <code>OneToOneField</code> to <code>settings.AUTH_USER_MODEL</code> as described below.</p>
<h5 id="referencing-the-user-model">Referencing the User model</h5>
<p>If you reference <code>User</code> directly (for example, by referring to it in a foreign key), your code will not work in projects where the <code>AUTH_USER_MODEL</code> setting has been changed to a different user model.</p>
<p>Instead of referring to User directly, you should reference the user model using <code>django.contrib.auth.get_user_model()</code>. This method will return the currently active user model ‚Äì the custom user model if one is specified, or User otherwise.</p>
<p>When you define a <code>foreign key</code> or <code>many-to-many</code> relations to the user model, you should specify the custom model using the <code>AUTH_USER_MODEL</code> setting. For example:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    author = models.ForeignKey(</span><br><span class="line">        settings.AUTH_USER_MODEL,</span><br><span class="line">        on_delete=models.CASCADE,</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>
<h3 id="declare-model-permissions">1.4. Declare model permissions</h3>
<h4>
1.4.1 <a href="https://docs.djangoproject.com/en/3.0/topics/auth/default/#permissions-and-authorization">Django builtin permission</a>
</h4>
<p>Django comes with a built-in permissions system. It provides a way to assign permissions to specific users and groups of users.</p>
<p>When <code>django.contrib.auth</code> is listed in your <strong>INSTALLED_APPS</strong> setting, it will ensure that four default permissions ‚Äì <code>add</code>, <code>change</code>, <code>delete</code>, and <code>view</code> ‚Äì are created for each Django model defined in one of your installed applications.</p>
<h4>
1.4.2 Declare new permission
</h4>
<p>Define directly inside model <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Job</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    (...)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        permissions = [(<span class="string">&#x27;review_job&#x27;</span>, <span class="string">&#x27;Can review job (approve or deny)&#x27;</span>)]</span><br></pre></td></tr></table></figure></p>
Define programmatically <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> Job</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> Permission</span><br><span class="line"><span class="keyword">from</span> django.contrib.contenttypes.models <span class="keyword">import</span> ContentType</span><br><span class="line"></span><br><span class="line">content_type = ContentType.objects.get_for_model(Job)</span><br><span class="line">permission = Permission.objects.create(</span><br><span class="line">    codename=<span class="string">&#x27;review_job&#x27;</span>,</span><br><span class="line">    name=<span class="string">&#x27;Can review job (approve or deny)&#x27;</span>,</span><br><span class="line">    content_type=content_type,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h4>
1.4.3 Assign permission to user/group
</h4>
<p><strong>Global Permission</strong> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt; <span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_user_model</span><br><span class="line">&gt;&gt; <span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> Group</span><br><span class="line">&gt;&gt; User = get_user_model()</span><br><span class="line"></span><br><span class="line">&gt;&gt; jack = User.objects.create_user(<span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;jack@example.com&#x27;</span>, <span class="string">&#x27;topsecretagentjack&#x27;</span>)</span><br><span class="line">&gt;&gt; jack.has_perm(<span class="string">&#x27;auth.change_group&#x27;</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="keyword">from</span> guardian.shortcuts <span class="keyword">import</span> assign_perm</span><br><span class="line">&gt;&gt; assign_perm(<span class="string">&#x27;auth.change_group&#x27;</span>, jack)</span><br><span class="line">&gt;&gt; jack.has_perm(<span class="string">&#x27;auth.change_group&#x27;</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></p>
<p><strong>Object Permission</strong> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt; <span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_user_model</span><br><span class="line">&gt;&gt; <span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> Group</span><br><span class="line">&gt;&gt; User = get_user_model()</span><br><span class="line"></span><br><span class="line">&gt;&gt; jack = User.objects.create_user(<span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;jack@example.com&#x27;</span>, <span class="string">&#x27;topsecretagentjack&#x27;</span>)</span><br><span class="line">&gt;&gt; admins = Group.objects.create(name=<span class="string">&#x27;admins&#x27;</span>)</span><br><span class="line">&gt;&gt; jack.has_perm(<span class="string">&#x27;auth.change_group&#x27;</span>, admins)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="keyword">from</span> guardian.shortcuts <span class="keyword">import</span> assign_perm</span><br><span class="line">&gt;&gt; assign_perm(<span class="string">&#x27;auth.change_group&#x27;</span>, jack, admins)</span><br><span class="line">&gt;&gt; jack.has_perm(<span class="string">&#x27;auth.change_group&#x27;</span>, admins)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></p>
<h4>
1.4.4 Retrieve user permitted objects
</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt; <span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_user_model</span><br><span class="line">&gt;&gt; <span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> Group</span><br><span class="line">&gt;&gt; User = get_user_model()</span><br><span class="line"></span><br><span class="line">&gt;&gt; jack = User.objects.create_user(<span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;jack@example.com&#x27;</span>, <span class="string">&#x27;topsecretagentjack&#x27;</span>)</span><br><span class="line">&gt;&gt; admins = Group.objects.create(name=<span class="string">&#x27;admins&#x27;</span>)</span><br><span class="line">&gt;&gt; leaders = Group.objects.create(name=<span class="string">&#x27;leaders&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="keyword">from</span> guardian.shortcuts <span class="keyword">import</span> assign_perm, get_objects_for_user</span><br><span class="line">&gt;&gt; get_objects_for_user(jack, perms=[<span class="string">&#x27;auth.change_group&#x27;</span>],  accept_global_perms=<span class="literal">True</span>)</span><br><span class="line">&lt;QuerySet []&gt;</span><br><span class="line"></span><br><span class="line">&gt;&gt; assign_perm(<span class="string">&#x27;auth.change_group&#x27;</span>, jack, admins)</span><br><span class="line">&gt;&gt; get_objects_for_user(jack, perms=[<span class="string">&#x27;auth.change_group&#x27;</span>],  accept_global_perms=<span class="literal">True</span>)</span><br><span class="line">&lt;QuerySet [&lt;Group: admins&gt;]&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Let try with global permission</span></span><br><span class="line">&gt;&gt; assign_perm(<span class="string">&#x27;auth.change_group&#x27;</span>, jack)</span><br><span class="line">&gt;&gt; get_objects_for_user(jack, perms=[<span class="string">&#x27;auth.change_group&#x27;</span>],  accept_global_perms=<span class="literal">True</span>)</span><br><span class="line">&lt;QuerySet [&lt;Group: admins&gt;, &lt;Group: level1&gt;]&gt;</span><br></pre></td></tr></table></figure>
<h2 id="database">2. Database</h2>
<h3 id="packages-1">2.1. Packages</h3>
<ul>
<li><a href="https://github.com/jacobian/dj-database-url">dj-database-url</a> database connection string parser that is helpful to parse database configuration in a connection string style.</li>
</ul>
<h3 id="supported-url-connection-schema">2.2. Supported URL connection schema</h3>
<table>
<colgroup>
<col style="width: 27%" />
<col style="width: 55%" />
<col style="width: 17%" />
</colgroup>
<thead>
<tr class="header">
<th>Engine</th>
<th>Django Backend</th>
<th>URL</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>SQLite</td>
<td><code>django.db.backends.sqlite3</code></td>
<td><code>sqlite:///PATH</code></td>
</tr>
<tr class="even">
<td>PostgreSQL</td>
<td><code>django.db.backends.postgresql</code></td>
<td><code>postgres://USER:PASSWORD@HOST:PORT/NAME</code></td>
</tr>
<tr class="odd">
<td>PostGIS</td>
<td><code>django.contrib.gis.db.backends.postgis</code></td>
<td><code>postgis://USER:PASSWORD@HOST:PORT/NAME</code></td>
</tr>
<tr class="even">
<td>MSSQL</td>
<td><code>sql_server.pyodbc</code></td>
<td><code>mssql://USER:PASSWORD@HOST:PORT/NAME</code></td>
</tr>
<tr class="odd">
<td>MySQL</td>
<td><code>django.db.backends.mysql</code></td>
<td><code>mysql://USER:PASSWORD@HOST:PORT/NAME</code></td>
</tr>
<tr class="even">
<td>MySQL (GIS)</td>
<td><code>django.contrib.gis.db.backends.mysql</code></td>
<td><code>mysqlgis://USER:PASSWORD@HOST:PORT/NAME</code></td>
</tr>
<tr class="odd">
<td>Oracle</td>
<td><code>django.db.backends.oracle</code></td>
<td><code>oracle://USER:PASSWORD@HOST:PORT/NAME</code></td>
</tr>
<tr class="even">
<td>Oracle (GIS)</td>
<td><code>django.contrib.gis.db.backends.oracle</code></td>
<td><code>oraclegis://USER:PASSWORD@HOST:PORT/NAME</code></td>
</tr>
<tr class="odd">
<td>Redshift</td>
<td><code>django_redshift_backend</code></td>
<td><code>redshift://USER:PASSWORD@HOST:PORT/NAME</code></td>
</tr>
<tr class="even">
<td>SpatiaLite</td>
<td><code>django.contrib.gis.db.backends.spatialite</code></td>
<td><code>spatialite:///PATH</code></td>
</tr>
</tbody>
</table>
<h3 id="configuration-1">2.3. Configuration</h3>
<p>This is configuration for the database, the default database will use sqlite3 for simple to quick to run in development mode. This may conflict with database you run on production mode because some of the funtion sqlite may not support. It is recommended to config the database in development mode have the same database system you run on production. To change the database system, config the environment variable <code>DATABASE_URL</code></p>
<p><code>core/settings.py</code> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> dj_database_url</span><br><span class="line"></span><br><span class="line"><span class="comment"># Database</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/3.0/ref/settings/#databases</span></span><br><span class="line"></span><br><span class="line">DATABASE_URL = os.environ.get(<span class="string">&#x27;DATABASE_URL&#x27;</span>, <span class="string">&#x27;sqlite:///&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.path.join(BASE_DIR, <span class="string">&#x27;db.sqlite3&#x27;</span>)))</span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: dj_database_url.config(default=DATABASE_URL)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h2 id="api-development">3. API Development</h2>
<h3 id="packages-2">3.1. Packages</h3>
<ul>
<li><a href="https://django-rest-framework-json-api.readthedocs.io/en/stable/">djangorestframework-jsonapi</a> provide the implementation of the <a href="http://jsonapi.org/format/">JSON API format specification</a></li>
</ul>
<h3 id="serializers">3.2. Serializers</h3>
<blockquote>
<p>TODO What is serializers, how to code one?</p>
</blockquote>
<h3 id="views">3.3. Views</h3>
<blockquote>
<p>TODO What is views, how to code one?</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>Template</tag>
        <tag>Django Guardian</tag>
        <tag>Djoser</tag>
        <tag>Object Level Permission</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Buildx: Revolutionizing Container Builds Across Multiple Platforms</title>
    <url>/2023/12/19/Docker-Buildx-Revolutionizing-Container-Builds-Across-Multiple-Platforms/</url>
    <content><![CDATA[<h1 id="introduction">Introduction</h1>
<p>In the ever-evolving world of software development, efficiency and flexibility are paramount. Docker, a household name in containerization, has taken a significant leap forward with Docker Buildx. This advanced feature not only enhances the capabilities of the standard Docker build command but revolutionizes how developers approach multi-platform containerization. Let‚Äôs dive into the world of Docker Buildx and explore how it's changing the game.</p>
<p><img src="/images/2023-12-19/infographic.png"> <a id="more"></a></p>
<h1 id="key-features-of-docker-buildx">Key Features of Docker Buildx</h1>
<p><strong>Multi-Platform Support</strong>: Docker Buildx stands out with its ability to build container images for various platforms, like amd64 and arm64, from a single code base. This is a game-changer for developers targeting diverse hardware architectures.</p>
<p><strong>BuildKit Backend</strong>: At its core, Docker Buildx leverages BuildKit, offering superior performance and caching compared to the traditional Docker build. BuildKit's efficiency lies in its parallelized builds, drastically cutting down build times.</p>
<p><strong>Enhanced Caching</strong>: Speed is of the essence, and Buildx‚Äôs advanced caching mechanisms are designed to reuse previous build steps, significantly accelerating the build process.</p>
<p><strong>Remote Building Capabilities</strong>: Docker Buildx isn't limited to local builds. It can seamlessly integrate with remote Docker daemons or cloud-based build services, optimizing resource usage and offering flexibility in build environments.</p>
<p><strong>Flexible Output Options</strong>: It offers a variety of output options, including local file systems, Docker registries, and direct outputs to the Docker daemon.</p>
<h1 id="practical-guide-utilizing-docker-buildx">Practical Guide: Utilizing Docker Buildx</h1>
<ol type="1">
<li><strong>Getting Started: Installation</strong> Docker Buildx comes with Docker 19.03 or later. To ensure it's installed and to set it up, follow these steps:</li>
</ol>
<ul>
<li><strong>Check Docker Version:</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker --version</span><br></pre></td></tr></table></figure>
<p>Ensure that the version is 19.03 or newer.</p>
<ul>
<li><strong>Enable Experimental Features:</strong></li>
</ul>
<p>If not already enabled, you might need to enable Docker's experimental features. This can be done by editing the Docker configuration file (usually located at ~/.docker/config.json) and setting "experimental": "enabled". Alternatively, you can set the environment variable DOCKER_CLI_EXPERIMENTAL=enabled.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;experimental&quot;</span>: <span class="string">&quot;enabled&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li><strong>Creating a Buildx Builder Instance</strong></li>
</ol>
<p>To take full advantage of Docker Buildx, create a new builder instance with the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker buildx create --name mybuilder --use</span><br></pre></td></tr></table></figure>
<p>This command creates a new builder instance named mybuilder and sets it as the current builder.</p>
<ol start="3" type="1">
<li><strong>Building Images</strong></li>
</ol>
<p>Use the docker buildx build command to build images. Here's an example that demonstrates a multi-platform build:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker buildx build --platform linux/amd64,linux/arm64 -t myuser/myapp:latest .</span><br></pre></td></tr></table></figure>
<p>This command builds an image for both amd64 and arm64 platforms, tags it with myuser/myapp:latest, and uses the current directory as the build context.</p>
<ol start="4" type="1">
<li><strong>Pushing to Registries</strong></li>
</ol>
<p>To push the built images to a Docker registry, include the --push flag in the build command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker buildx build --platform linux/amd64,linux/arm64 -t myuser/myapp:latest . --push</span><br></pre></td></tr></table></figure>
<p>This command builds the images and pushes them to the Docker registry with the specified tag.</p>
<p>Note: Replace myuser/myapp:latest with your own Docker Hub username and desired image name.</p>
<h1 id="use-cases-in-the-real-world">Use Cases in the Real World</h1>
<p><strong>Cross-Platform Compatibility</strong>: Create Docker images that work across various systems, from traditional Intel/AMD processors to ARM-based devices like the Raspberry Pi.</p>
<p><strong>Enhancing CI/CD Pipelines</strong>: Integrate Docker Buildx into CI/CD pipelines for automated, multi-platform builds, ensuring consistent and efficient deployment.</p>
<p><strong>Optimizing Local Development</strong>: Benefit from advanced caching and parallel builds, making the development process faster and more efficient.</p>
<h1 id="conclusion">Conclusion</h1>
<p>Docker Buildx is not just a tool; it's a paradigm shift for developers and organizations aiming to optimize their Docker container builds, particularly in multi-platform scenarios. Its synergy with BuildKit ushers in a new era of performance, flexibility, and efficiency, surpassing traditional Docker builds. Whether you're a solo developer or part of a large team, Docker Buildx is poised to become an indispensable part of your development toolkit.</p>
]]></content>
      <categories>
        <category>DevOps</category>
        <category>Cloud Computing</category>
        <category>Software Development</category>
        <category>CI/CD</category>
        <category>Containerization</category>
        <category>Performance Optimization</category>
        <category>Technology Tutorials</category>
        <category>Programming &amp; Tools</category>
        <category>Cross-Platform Development</category>
        <category>Technology Innovations</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Docker</tag>
        <tag>Docker Buildx</tag>
        <tag>Containerization Technology</tag>
        <tag>Multi-Platform Docker Builds</tag>
        <tag>Docker Buildx Tutorial</tag>
        <tag>BuildKit Backend</tag>
        <tag>CI/CD with Docker</tag>
        <tag>Cross-Platform Docker Images</tag>
        <tag>Docker Caching Mechanisms</tag>
        <tag>Remote Docker Builds</tag>
        <tag>Docker CLI Plugin</tag>
        <tag>Efficient Docker Builds</tag>
        <tag>Docker Buildx Features</tag>
        <tag>Docker Build Optimization</tag>
        <tag>Software Development</tag>
      </tags>
  </entry>
  <entry>
    <title>DynamoDB Scan vs Query: Choosing the Right Operation for Your Data</title>
    <url>/2023/12/20/DynamoDB-Scan-vs-Query-Choosing-the-Right-Operation-for-Your-Data/</url>
    <content><![CDATA[<p>When working with AWS DynamoDB, one of the key decisions you'll face is whether to use a Scan or a Query operation. Understanding the differences between these two operations is crucial for efficient database management and cost-effective operations. In this post, we'll explore the distinctions between Scan and Query in DynamoDB, and guide you on when to use each.</p>
<p><img src="/images/2023-12-20/002.png" style="max-height: 540px;"></p>
<h1 id="understanding-dynamodb-scan">Understanding DynamoDB Scan</h1>
<p>The Scan operation in DynamoDB is straightforward but comes with a significant cost, especially for larger tables.</p>
<h3 id="what-is-a-scan">What is a Scan?</h3>
<a id="more"></a>
<p><strong>Function</strong>: Scan reads every item in the table. It does not use the primary key or secondary indexes and simply examines all the data.</p>
<h3 id="performance-considerations">Performance Considerations</h3>
<p><strong>Efficiency</strong>: Scan is less efficient as it goes through every item in the table, consuming more read capacity units.</p>
<p><strong>Suitability</strong>: It's suitable when you need to retrieve all data or when your criteria cannot be addressed by a Query operation.</p>
<h3 id="cost-implications">Cost Implications</h3>
<p><strong>Expense</strong>: Scan can be more expensive, particularly for larger tables, due to higher read capacity usage.</p>
<h1 id="understanding-dynamodb-query">Understanding DynamoDB Query</h1>
<p>The Query operation, on the other hand, is more efficient and often the preferred choice for frequent data retrieval tasks.</p>
<h2 id="what-is-a-query">What is a Query?</h2>
<p><strong>Function</strong>: Query finds items using the primary key attribute and a specific value. It is much faster as it only retrieves selective items.</p>
<h3 id="performance-considerations-1">Performance Considerations</h3>
<p><strong>Efficiency</strong>: Query leverages primary keys or secondary indexes for efficient data retrieval.</p>
<p><strong>Suitability</strong>: Ideal for frequent operations where you know the exact item or range of items you're searching for.</p>
<h3 id="cost-implications-1">Cost Implications</h3>
<p><strong>Expense</strong>: Generally more cost-effective due to lower read capacity consumption.</p>
<h1 id="key-differences-between-scan-and-query">Key Differences Between Scan and Query</h1>
<p><strong>Efficiency</strong>: Query outperforms Scan in efficiency, especially for large datasets.</p>
<p><strong>Speed</strong>: Query operations are faster, utilizing primary keys or indexes.</p>
<p><strong>Use Cases</strong>: Query is best for precise lookups, while Scan is for more comprehensive data retrievals.</p>
<p><strong>Cost</strong>: Query is typically more cost-effective than Scan.</p>
<h1 id="when-to-use-scan-vs-query">When to Use Scan vs Query</h1>
<p><strong>Use Scan when:</strong></p>
<ul>
<li><p>You need to retrieve all the data from a table.</p></li>
<li><p>Your search criteria do not align with the capabilities of a Query operation.</p></li>
</ul>
<p><strong>Use Query when:</strong></p>
<ul>
<li><p>You need to perform frequent lookups.</p></li>
<li><p>You know the specific item(s) you are looking for.</p></li>
<li><p>You are dealing with large datasets and require efficiency.</p></li>
</ul>
<h1 id="conclusion">Conclusion</h1>
<p>Choosing between Scan and Query in DynamoDB depends on the specific requirements of your task. For efficient and cost-effective operations, prefer Query for its speed and precise data retrieval capabilities. Reserve Scan for scenarios where you need a complete overview of your data and where efficiency is not a primary concern.</p>
<p>Understanding these operations and using them wisely will significantly impact the performance and cost of your DynamoDB usage. Remember, the right choice leads to better performance and optimized costs.</p>
]]></content>
      <categories>
        <category>Cloud Computing</category>
        <category>Database Management</category>
        <category>AWS Services</category>
        <category>Data Engineering</category>
        <category>Big Data</category>
      </categories>
      <tags>
        <tag>DynamoDB Scan</tag>
        <tag>DynamoDB Query</tag>
        <tag>AWS DynamoDB</tag>
        <tag>NoSQL Database Operations</tag>
        <tag>Database Performance Optimization</tag>
        <tag>AWS Database Services</tag>
        <tag>Read Capacity Management</tag>
        <tag>Data Retrieval in DynamoDB</tag>
        <tag>Efficient Database Queries</tag>
        <tag>Scalable Database Solutions</tag>
        <tag>Cloud Database Management</tag>
        <tag>DynamoDB Best Practices</tag>
        <tag>Key-Value Store Optimization</tag>
        <tag>Cost-Effective Database Operations</tag>
        <tag>DynamoDB Data Access Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>Encode image using Autoencoders</title>
    <url>/2021/04/17/Encode-your-image-using-Autoencoders/</url>
    <content><![CDATA[<h1 id="overview">1. Overview</h1>
<blockquote><p>An autoencoder is a type of artificial neural network used to learn efficient data codings in an unsupervised manner. The aim of an autoencoder is to learn a representation (encoding) for a set of data, typically for dimensionality reduction, by training the network to ignore signal ‚Äúnoise‚Äù. Along with the reduction side, a reconstructing side is learned, where the autoencoder tries to generate from the reduced encoding a representation as close as possible to its original input, hence its name.</p>
<footer><strong>Wiki</strong><cite><a href="https://en.wikipedia.org/wiki/Autoencoder">en.wikipedia.org/wiki/Autoencoder</a></cite></footer></blockquote>
<p><img height="320" src="https://upload.wikimedia.org/wikipedia/commons/2/28/Autoencoder_structure.png"></p>
<a id="more"></a>
<h1 id="create-a-simple-autoencoder">2. Create a simple autoencoder</h1>
<h2 id="dataset">2.1. Dataset</h2>
<p>In this simple example, I will use <a href="https://www.kaggle.com/zalando-research/fashionmnist">Fashion-MNIST</a> dataset. <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.datasets <span class="keyword">import</span> fashion_mnist</span><br></pre></td></tr></table></figure></p>
<h2 id="define-model">2.2. Define model</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">INPUT_DIM = <span class="number">784</span></span><br><span class="line">ENCODE_DIM = <span class="number">128</span></span><br><span class="line"></span><br><span class="line">inputs = tf.keras.layers.Input(shape=(INPUT_DIM,))</span><br><span class="line">encoder = tf.keras.layers.Dense(units=<span class="number">512</span>)(inputs)</span><br><span class="line">encoder = tf.keras.layers.ReLU()(encoder)</span><br><span class="line">encoder = tf.keras.layers.Dense(units=<span class="number">256</span>)(encoder)</span><br><span class="line">encoder = tf.keras.layers.ReLU()(encoder)</span><br><span class="line">encoder = tf.keras.layers.Dense(ENCODE_DIM)(encoder)</span><br><span class="line"></span><br><span class="line">encoding = tf.keras.layers.ReLU()(encoder)</span><br><span class="line"></span><br><span class="line">decoder = tf.keras.layers.Dense(units=<span class="number">256</span>)(encoding)</span><br><span class="line">decoder = tf.keras.layers.ReLU()(decoder)</span><br><span class="line">decoder = tf.keras.layers.Dense(units=<span class="number">512</span>)(decoder)</span><br><span class="line">decoder = tf.keras.layers.ReLU()(decoder)</span><br><span class="line">decoder = tf.keras.layers.Dense(units=INPUT_DIM)(decoder)</span><br><span class="line">outputs = tf.keras.layers.Activation(<span class="string">&#x27;sigmoid&#x27;</span>)(decoder)</span><br><span class="line"></span><br><span class="line">model = tf.keras.models.Model(inputs=inputs, outputs=outputs)</span><br></pre></td></tr></table></figure>
<h2 id="training">2.3. Training</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># We use only the image data</span></span><br><span class="line">(X_train, _), (X_test, _) = fashion_mnist.load_data()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Normalize</span></span><br><span class="line">X_train = X_train.astype(<span class="string">&#x27;float32&#x27;</span>) / <span class="number">255.0</span></span><br><span class="line">X_test = X_test.astype(<span class="string">&#x27;float32&#x27;</span>) / <span class="number">255.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Reshape to (?, 768)</span></span><br><span class="line">X_train = X_train.reshape((X_train.shape[<span class="number">0</span>], <span class="number">-1</span>))</span><br><span class="line">X_test = X_test.reshape((X_test.shape[<span class="number">0</span>], <span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compile the model</span></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=<span class="string">&#x27;mse&#x27;</span>)</span><br><span class="line"></span><br><span class="line">EPOCHS = <span class="number">300</span></span><br><span class="line">BATCH_SIZE = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">model.fit(</span><br><span class="line">    X_train, X_train, </span><br><span class="line">    epochs=EPOCHS, </span><br><span class="line">    batch_size=BATCH_SIZE, </span><br><span class="line">    shuffle=<span class="literal">True</span>, </span><br><span class="line">    validation_data=(X_test, X_test))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="evaluation">2.4. Evaluation</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">predictions = model.predict(X_test)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.imshow(predictions[<span class="number">0</span>].reshape((<span class="number">28</span>, <span class="number">28</span>)), cmap=<span class="string">&quot;gray&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>Few experiment results</p>
<table>
<thead>
<tr class="header">
<th>ID</th>
<th>Raw Image</th>
<th>Generated</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td><img src="/images/2021-04-18/raw_001.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/gen_001.png" width="64" height="64" /></td>
</tr>
<tr class="even">
<td>2</td>
<td><img src="/images/2021-04-18/raw_002.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/gen_002.png" width="64" height="64" /></td>
</tr>
<tr class="odd">
<td>3</td>
<td><img src="/images/2021-04-18/raw_003.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/gen_003.png" width="64" height="64" /></td>
</tr>
<tr class="even">
<td>4</td>
<td><img src="/images/2021-04-18/raw_004.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/gen_004.png" width="64" height="64" /></td>
</tr>
<tr class="odd">
<td>5</td>
<td><img src="/images/2021-04-18/raw_005.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/gen_005.png" width="64" height="64" /></td>
</tr>
<tr class="even">
<td>6</td>
<td><img src="/images/2021-04-18/raw_006.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/gen_006.png" width="64" height="64" /></td>
</tr>
<tr class="odd">
<td>7</td>
<td><img src="/images/2021-04-18/raw_007.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/gen_007.png" width="64" height="64" /></td>
</tr>
<tr class="even">
<td>8</td>
<td><img src="/images/2021-04-18/raw_008.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/gen_008.png" width="64" height="64" /></td>
</tr>
</tbody>
</table>
<h2 id="how-it-works">2.5. How it works</h2>
<ul>
<li>The encoder take raw input of size <code>768</code> and compress the input to the size of <code>128</code>.</li>
<li>The decoder take compressed input of size <code>128</code> and decode it to the size of <code>768</code>.</li>
<li>The training process is to minimize to error distance between raw inputs and generated outputs.</li>
</ul>
<h1 id="create-a-cnn-autoencoder">3. Create a CNN autoencoder</h1>
<h2 id="dataset-1">3.1. Dataset</h2>
<p>I use <a href="https://www.kaggle.com/mengcius/cinic10">CINIC-10</a> in this example.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line">train_paths = glob.glob(<span class="string">&#x27;inputs/train/*/*.png&#x27;</span>)</span><br><span class="line">valid_paths = glob.glob(<span class="string">&#x27;inputs/valid/*/*.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_img</span>(<span class="params">img_path</span>):</span></span><br><span class="line">    image = tf.io.read_file(img_path)</span><br><span class="line">    image = tf.image.decode_jpeg(image, channels=<span class="number">3</span>)</span><br><span class="line">    image = tf.image.convert_image_dtype(image, np.float32)</span><br><span class="line">    image = image / <span class="number">255.0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> image, image</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare dataset</span></span><br><span class="line">train_dataset = (tf.data.Dataset</span><br><span class="line">                 .from_tensor_slices(train_paths)</span><br><span class="line">                 .shuffle(<span class="number">1024</span>).<span class="built_in">map</span>(load_img)</span><br><span class="line">                 .batch(<span class="number">128</span>)</span><br><span class="line">                 .prefetch(<span class="number">1024</span>))</span><br><span class="line"></span><br><span class="line">valid_dataset = (tf.data.Dataset</span><br><span class="line">                 .from_tensor_slices(valid_paths)</span><br><span class="line">                 .<span class="built_in">map</span>(load_img)</span><br><span class="line">                 .batch(<span class="number">128</span>)</span><br><span class="line">                 .prefetch(<span class="number">1024</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="define-model-1">3.2. Define model</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ENCODING_DIM = <span class="number">256</span></span><br><span class="line"></span><br><span class="line">input_layer = tf.keras.layers.Input(shape=(<span class="number">128</span>, <span class="number">128</span>, <span class="number">3</span>))</span><br><span class="line">encoder = tf.keras.layers.Conv2D(filters=<span class="number">32</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), strides=<span class="number">2</span>, padding=<span class="string">&#x27;same&#x27;</span>)(input_layer)</span><br><span class="line">encoder = tf.keras.layers.LeakyReLU(alpha=<span class="number">0.2</span>)(encoder)</span><br><span class="line">encoder = tf.keras.layers.BatchNormalization()(encoder)</span><br><span class="line"></span><br><span class="line">encoder = tf.keras.layers.Conv2D(filters=<span class="number">64</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), strides=<span class="number">2</span>, padding=<span class="string">&#x27;same&#x27;</span>)(encoder)</span><br><span class="line">encoder = tf.keras.layers.LeakyReLU(alpha=<span class="number">0.2</span>)(encoder)</span><br><span class="line">encoder = tf.keras.layers.BatchNormalization()(encoder)</span><br><span class="line"></span><br><span class="line">encoder_output_shape = encoder.shape</span><br><span class="line">encoder = tf.keras.layers.Flatten()(encoder)</span><br><span class="line">encoder_output = tf.keras.layers.Dense(ENCODING_DIM)(encoder)</span><br><span class="line">encoder_model = tf.keras.models.Model(inputs=input_layer, outputs=encoder_output)</span><br><span class="line"></span><br><span class="line">decoder_input = tf.keras.layers.Input(shape=(ENCODING_DIM,))</span><br><span class="line">target_shape = <span class="built_in">tuple</span>(encoder_output_shape[<span class="number">1</span>:])</span><br><span class="line">decoder = tf.keras.layers.Dense(np.prod(target_shape))(decoder_input)</span><br><span class="line">decoder = tf.keras.layers.Reshape(target_shape)(decoder)</span><br><span class="line"></span><br><span class="line">decoder = tf.keras.layers.Conv2DTranspose(filters=<span class="number">64</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), strides=<span class="number">2</span>, padding=<span class="string">&#x27;same&#x27;</span>)(decoder)</span><br><span class="line">decoder = tf.keras.layers.LeakyReLU(alpha=<span class="number">0.2</span>)(decoder)</span><br><span class="line">decoder = tf.keras.layers.BatchNormalization()(decoder)</span><br><span class="line"></span><br><span class="line">decoder = tf.keras.layers.Conv2DTranspose(filters=<span class="number">32</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), strides=<span class="number">2</span>, padding=<span class="string">&#x27;same&#x27;</span>)(decoder)</span><br><span class="line">decoder = tf.keras.layers.LeakyReLU(alpha=<span class="number">0.2</span>)(decoder)</span><br><span class="line">decoder = tf.keras.layers.BatchNormalization()(decoder)</span><br><span class="line"></span><br><span class="line">decoder = tf.keras.layers.Conv2DTranspose(filters=<span class="number">3</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">&#x27;same&#x27;</span>)(decoder)</span><br><span class="line">outputs = tf.keras.layers.Activation(<span class="string">&#x27;sigmoid&#x27;</span>)(decoder)</span><br><span class="line"></span><br><span class="line">decoder_model = tf.keras.models.Model(inputs=decoder_input, outputs=outputs)</span><br><span class="line"></span><br><span class="line">encoder_model_outputs = encoder_model(input_layer)</span><br><span class="line">decoder_model_outputs = decoder_model(encoder_model_outputs)</span><br><span class="line">autoencoder_model = tf.keras.models.Model(inputs=input_layer, outputs=decoder_model_outputs)</span><br><span class="line"></span><br><span class="line">autoencoder_model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=<span class="string">&#x27;mse&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="training-1">3.3. Training</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(</span><br><span class="line">    filepath=<span class="string">&#x27;./model.&#123;epoch:02d&#125;-&#123;val_loss:.9f&#125;.hdf5&#x27;</span>, </span><br><span class="line">    save_weights_only=<span class="literal">False</span>, </span><br><span class="line">    save_best_only=<span class="literal">True</span>,</span><br><span class="line">    monitor=<span class="string">&#x27;val_loss&#x27;</span>)</span><br><span class="line"></span><br><span class="line">autoencoder_model.fit(</span><br><span class="line">    train_dataset, </span><br><span class="line">    validation_data=valid_dataset, </span><br><span class="line">    epochs=<span class="number">300</span>, </span><br><span class="line">    callbacks=[model_checkpoint_callback])</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="evaluation-1">3.4. Evaluation</h2>
<p>To save your training time, use can use my pretrain model. <a href="/images/2021-04-18/model.cinic.hdf5">Download</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">autoencoder_model = tf.keras.models.load_model(<span class="string">&#x27;model.cinic.hdf5&#x27;</span>)</span><br><span class="line">predictions = autoencoder_model.predict(valid_dataset)</span><br></pre></td></tr></table></figure>
<p>Few experiment results</p>
<table>
<thead>
<tr class="header">
<th>ID</th>
<th>Raw Image</th>
<th>Generated</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td><img src="/images/2021-04-18/cnn_raw_001.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/cnn_gen_001.png" width="64" height="64" /></td>
</tr>
<tr class="even">
<td>2</td>
<td><img src="/images/2021-04-18/cnn_raw_002.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/cnn_gen_002.png" width="64" height="64" /></td>
</tr>
<tr class="odd">
<td>3</td>
<td><img src="/images/2021-04-18/cnn_raw_003.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/cnn_gen_003.png" width="64" height="64" /></td>
</tr>
<tr class="even">
<td>4</td>
<td><img src="/images/2021-04-18/cnn_raw_004.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/cnn_gen_004.png" width="64" height="64" /></td>
</tr>
<tr class="odd">
<td>5</td>
<td><img src="/images/2021-04-18/cnn_raw_005.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/cnn_gen_005.png" width="64" height="64" /></td>
</tr>
<tr class="even">
<td>6</td>
<td><img src="/images/2021-04-18/cnn_raw_006.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/cnn_gen_006.png" width="64" height="64" /></td>
</tr>
<tr class="odd">
<td>7</td>
<td><img src="/images/2021-04-18/cnn_raw_007.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/cnn_gen_007.png" width="64" height="64" /></td>
</tr>
<tr class="even">
<td>8</td>
<td><img src="/images/2021-04-18/cnn_raw_008.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/cnn_gen_008.png" width="64" height="64" /></td>
</tr>
</tbody>
</table>
<h2 id="how-it-works-1">3.5. How it works</h2>
<ul>
<li><p>The encoder use <code>Conv2D</code> to encode the raw image of size <code>32x32x3</code> (RGB channel) into a encoding vector of size <code>256</code>.</p></li>
<li><p>The decoder use <code>Conv2DTranspose</code> to decode the encoding vector into a output image of size <code>32x32x3</code>. Learn more about Conv2DTranspose <a href="https://towardsdatascience.com/types-of-convolutions-in-deep-learning-717013397f4d">here</a>. <img src="https://miro.medium.com/max/790/1*Lpn4nag_KRMfGkx1k6bV-g.gif" /></p></li>
</ul>
<h1 id="create-an-inverse-image-search-index">4. Create an inverse image search index</h1>
<h2 id="index-the-cinic-10-dataset">4.1. Index the <code>CINIC-10</code> dataset</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">euclidean_dist</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> np.linalg.norm(x - y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">index_dataset = (tf.data.Dataset</span><br><span class="line">                 .from_tensor_slices(train_paths)</span><br><span class="line">                 .<span class="built_in">map</span>(load_img)</span><br><span class="line">                 .batch(<span class="number">1</span>)</span><br><span class="line">                 .prefetch(<span class="number">1024</span>))</span><br><span class="line"></span><br><span class="line">features = encoder_model.predict(index_dataset)</span><br><span class="line"></span><br><span class="line">search_index = &#123;</span><br><span class="line">    <span class="string">&#x27;features&#x27;</span>: features,</span><br><span class="line">    <span class="string">&#x27;dataset&#x27;</span>: index_dataset</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">query_vector, search_index, max_results=<span class="number">8</span></span>):</span></span><br><span class="line">    vectors = search_index[<span class="string">&#x27;features&#x27;</span>]</span><br><span class="line">    results = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i, (image, _) <span class="keyword">in</span> <span class="built_in">enumerate</span>(search_index[<span class="string">&#x27;dataset&#x27;</span>]):</span><br><span class="line">        distance = euclidean_dist(query_vector, vectors[i])</span><br><span class="line">        results.append((distance, image.numpy()))</span><br><span class="line">    </span><br><span class="line">    results = <span class="built_in">sorted</span>(results, key=<span class="keyword">lambda</span> p: p[<span class="number">0</span>])[:max_results]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="experiment">4.2. Experiment</h2>
<table>
<thead>
<tr class="header">
<th>ID</th>
<th>Query Image</th>
<th>Results</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td><img src="/images/2021-04-18/query_001.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/search_001.png" width="64" height="64" /> <img src="/images/2021-04-18/search_002.png" width="64" height="64" /> <img src="/images/2021-04-18/search_003.png" width="64" height="64" /> <img src="/images/2021-04-18/search_004.png" width="64" height="64" /> <img src="/images/2021-04-18/search_005.png" width="64" height="64" /> <img src="/images/2021-04-18/search_006.png" width="64" height="64" /> <img src="/images/2021-04-18/search_007.png" width="64" height="64" /> <img src="/images/2021-04-18/search_008.png" width="64" height="64" /></td>
</tr>
<tr class="even">
<td>2</td>
<td><img src="/images/2021-04-18/query_002.png" width="64" height="64" /></td>
<td><img src="/images/2021-04-18/search_2001.png" width="64" height="64" /> <img src="/images/2021-04-18/search_2002.png" width="64" height="64" /> <img src="/images/2021-04-18/search_2003.png" width="64" height="64" /> <img src="/images/2021-04-18/search_2004.png" width="64" height="64" /> <img src="/images/2021-04-18/search_2005.png" width="64" height="64" /> <img src="/images/2021-04-18/search_2006.png" width="64" height="64" /> <img src="/images/2021-04-18/search_2007.png" width="64" height="64" /> <img src="/images/2021-04-18/search_2008.png" width="64" height="64" /></td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Machine Learning</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Autoencoders</tag>
        <tag>CNN</tag>
        <tag>Computer Vision</tag>
        <tag>Deep Learning</tag>
        <tag>Tensorflow</tag>
        <tag>Keras</tag>
        <tag>CINIC</tag>
        <tag>Fashion MNIST</tag>
        <tag>Machine Learning</tag>
        <tag>Convolution Neural Network</tag>
      </tags>
  </entry>
  <entry>
    <title>Enhancing Your Understanding of AWS Step Functions vs. Apache Airflow for Workflow Orchestration</title>
    <url>/2023/12/19/Enhancing-Your-Understanding-of-AWS-Step-Functions-vs-Apache-Airflow-for-Workflow-Orchestration/</url>
    <content><![CDATA[<p>In the world of workflow orchestration, AWS Step Functions and Apache Airflow stand out as prominent tools, each with its unique features, purposes, and operational models. Understanding their differences is crucial for selecting the right tool for your specific needs. Here's a comparison:</p>
<p><img src="/images/2023-12-19/infographic1.png"></p>
<h1 id="aws-step-functions-a-managed-serverless-orchestrator">AWS Step Functions: A Managed, Serverless Orchestrator</h1>
<ol type="1">
<li><p><strong>Seamless Cloud Integration:</strong> AWS Step Functions is designed to integrate effortlessly with various AWS services. As a serverless orchestrator, it offers a fully managed service, taking the burden of infrastructure, scalability, and maintenance off your shoulders.</p></li>
<li><p><strong>Visual Workflow Management:</strong> It provides a user-friendly graphical console, allowing you to visualize and manage complex workflows with ease. This visual approach simplifies the understanding of intricate processes.</p></li>
</ol>
<a id="more"></a>
<ol start="3" type="1">
<li><p><strong>State Management Prowess:</strong> Step Functions shine in managing the state of each workflow step. This feature is particularly beneficial for long-running processes and efficient error handling.</p></li>
<li><p><strong>Serverless and Scalable:</strong> Being serverless, it automatically scales based on demand, eliminating the need for manual infrastructure management.</p></li>
<li><p><strong>Cost-Effective Pricing:</strong> The pricing model is based on the number of state transitions, adopting a pay-as-you-go approach.</p></li>
<li><p><strong>Ease of Use:</strong> Especially for those already using AWS services, Step Functions are straightforward to set up and operate.</p></li>
</ol>
<h1 id="apache-airflow-the-open-source-customizable-giant">Apache Airflow: The Open-Source, Customizable Giant</h1>
<ol type="1">
<li><p><strong>Flexibility and Open-Source:</strong> Airflow's open-source nature allows for extensive customization and integration with various platforms and tools.</p></li>
<li><p><strong>Code-Based Workflow Definitions:</strong> Workflows in Airflow are defined using Python code, offering a programmable interface and access to Python's vast libraries.</p></li>
<li><p><strong>Robust Community Support and Integrations:</strong> Its open-source status has cultivated a large community. Airflow boasts a wide range of integrations, especially beneficial in data processing and ETL tools.</p></li>
<li><p><strong>Ideal for Complex Pipelines:</strong> Airflow is particularly adept at handling complex, large-scale data processing workflows, often used in data engineering and ETL processes.</p></li>
<li><p><strong>User-Managed Infrastructure:</strong> Unlike Step Functions, Airflow requires you to manage its infrastructure, whether on-premises or in the cloud.</p></li>
<li><p><strong>Advanced Scheduler and Executor Model:</strong> The use of a scheduler and multiple executors offers flexibility in task execution, catering to various operational needs.</p></li>
</ol>
<h1 id="key-differences-at-a-glance">Key Differences at a Glance</h1>
<ul>
<li><p><strong>Infrastructure Management:</strong> Step Functions is a managed service, while Airflow demands user involvement in infrastructure management.</p></li>
<li><p><strong>Integration Capabilities:</strong> Step Functions offer smoother integration with AWS services, whereas Airflow champions in being platform-agnostic and highly customizable.</p></li>
<li><p><strong>Workflow Definition:</strong> Step Functions utilize a JSON-based state machine, contrasting with Airflow's Python code approach.</p></li>
<li><p><strong>Use Case Suitability:</strong> Step Functions are typically used for serverless applications, microservices orchestration, and straightforward ETL tasks. In contrast, Airflow excels in complex, large-scale data processing and ETL workflows.</p></li>
</ul>
<h1 id="triggering-methods-in-aws-step-functions-vs.-apache-airflow">Triggering Methods in AWS Step Functions vs. Apache Airflow</h1>
<h2 id="aws-step-functions-diverse-and-integrated-triggering-options">AWS Step Functions: Diverse and Integrated Triggering Options</h2>
<p>AWS Step Functions can be triggered in a variety of ways, each suited to different use cases within the AWS ecosystem:</p>
<ol type="1">
<li><p><strong>API Gateway:</strong> Ideal for HTTP endpoint-based workflows.</p></li>
<li><p><strong>AWS Lambda:</strong> For event-driven architectures, responding to events like file uploads to S3.</p></li>
<li><p><strong>CloudWatch Events/EventBridge:</strong> Schedule workflows or trigger them based on AWS service events.</p></li>
<li><p><strong>Manual Invocation:</strong> Through AWS Management Console, SDKs, or CLI, suitable for testing or one-off tasks.</p></li>
<li><p><strong>AWS S3:</strong> Indirect triggering via S3 event notifications to Lambda functions.</p></li>
<li><p><strong>AWS IoT:</strong> For IoT device event-driven workflows.</p></li>
<li><p><strong>AWS Batch:</strong> In batch processing scenarios.</p></li>
<li><p><strong>Other AWS Services:</strong> Leveraging Lambda functions or CloudWatch Events for indirect triggering.</p></li>
</ol>
<h2 id="apache-airflow-flexible-and-customizable-triggering-mechanisms">Apache Airflow: Flexible and Customizable Triggering Mechanisms</h2>
<p>Apache Airflow, being an open-source tool, offers different ways to trigger workflows, emphasizing flexibility and customization:</p>
<ol type="1">
<li><p><strong>Scheduler-Based Triggering:</strong> Airflow primarily uses a scheduler to trigger tasks based on time or external events. This includes simple schedules like daily or hourly, as well as more complex cron expressions.</p></li>
<li><p><strong>External Triggers:</strong> Workflows can be triggered externally via Airflow's REST API, allowing integration with other services or custom applications.</p></li>
<li><p><strong>Event-Driven Triggering:</strong> Although not as native as in AWS services, Airflow can be configured to respond to external events (like file drops in a storage system) through custom scripts or intermediary services.</p></li>
<li><p><strong>Manual Triggering:</strong> Airflow allows manual triggering of workflows through its web-based UI, which is useful for ad-hoc tasks and testing.</p></li>
<li><p><strong>Custom Plugins:</strong> Being open-source, Airflow supports the creation of custom plugins, allowing for unique triggering mechanisms tailored to specific needs.</p></li>
</ol>
<h1 id="comparative-analysis">Comparative Analysis</h1>
<ul>
<li><p><strong>Integration with AWS Services:</strong> AWS Step Functions has a more seamless integration with AWS services, making it a go-to for AWS-centric architectures. In contrast, Airflow, while capable of integrating with AWS, requires more configuration and does not offer as native an integration.</p></li>
<li><p><strong>Customization and Flexibility:</strong> Airflow offers more flexibility in terms of customization, especially with the ability to create custom plugins and scripts for unique triggering scenarios.</p></li>
<li><p><strong>User Interface:</strong> Airflow‚Äôs web-based UI for manual triggering is more user-friendly compared to the AWS Management Console or CLI.</p></li>
<li><p><strong>Ease of Use:</strong> For users already embedded in the AWS ecosystem, Step Functions might offer a more straightforward approach to triggering workflows, whereas Airflow, with its customizable nature, might appeal more to users who require specific, tailored triggering mechanisms.</p></li>
</ul>
<p>In summary, choosing between AWS Step Functions and Apache Airflow for workflow orchestration also involves considering their triggering mechanisms, which reflects their operational models and integration capabilities. While Step Functions offer integrated, AWS-centric triggering options, Airflow provides a more customizable and flexible approach, albeit with a steeper learning curve for those not already familiar with its paradigm.</p>
]]></content>
      <categories>
        <category>DevOps</category>
        <category>Cloud Computing</category>
        <category>Software Development</category>
        <category>Data Engineering</category>
        <category>CI/CD</category>
        <category>Workflow Automation</category>
        <category>Serverless Computing</category>
        <category>Big Data</category>
        <category>Open Source Technologies</category>
        <category>ETL</category>
        <category>Technology Comparisons</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>AWS Step Functions</tag>
        <tag>Apache Airflow</tag>
        <tag>Workflow Orchestration</tag>
        <tag>Serverless Architecture</tag>
        <tag>Cloud Computing</tag>
        <tag>Data Engineering</tag>
        <tag>ETL</tag>
        <tag>Workflow Automation</tag>
        <tag>Cloud Services</tag>
        <tag>AWS Integration</tag>
        <tag>Open Source Software</tag>
        <tag>Task Scheduling</tag>
        <tag>Workflow Management</tag>
        <tag>Data Pipeline</tag>
        <tag>Cloud Infrastructure</tag>
        <tag>Managed Services</tag>
        <tag>Customizable Workflow</tag>
        <tag>Big Data</tag>
        <tag>Technology Comparison</tag>
      </tags>
  </entry>
  <entry>
    <title>Hijack your computer http request with Fiddler</title>
    <url>/2020/12/23/Hijack-your-computer-http-request-with-Fiddler/</url>
    <content><![CDATA[<h1 id="getting-started">Getting Started</h1>
<blockquote><p>Capture all HTTP(S) traffic between your computer and the Internet with Fiddler HTTP(S) proxy. Inspect traffic, set breakpoints, and fiddle with requests &amp; responses.</p>
<footer><strong>Fiddler</strong><cite><a href="https://www.telerik.com/fiddler">www.telerik.com/fiddler</a></cite></footer></blockquote>
<p><a href="https://www.telerik.com/download/fiddler-everywhere">Download</a></p>
<p>On my laptop, I use the linux version. You can download here</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -O fiddler.AppImage https://downloads.getfiddler.com/linux/fiddler-everywhere-1.4.1.AppImage</span><br><span class="line">chmod u+x fiddler.AppImage </span><br><span class="line">./fiddler.AppImage</span><br></pre></td></tr></table></figure>
<h1 id="configuration">Configuration</h1>
<p>This is the main view of the tool</p>
<p><img src="/images/2020-12-23/001.png"></p>
<ol type="1">
<li>To enable capture HTTPS <code>View -&gt; Preferences -&gt; HTTPS</code>. Click <code>Export root certificate to Desktop</code>, then enable <code>Capture HTTPS traffic</code> + <code>Ignore server certificate error (unsafe)</code>. Click <code>Save</code>.</li>
</ol>
<p><img src="/images/2020-12-23/005.png"></p>
<ol start="2" type="1">
<li>Open any browser, go to the <code>Certificate</code> Preferences, Import the <code>FiddlerRootCertificate.crt</code> on the Desktop and enable Trust this certificate.</li>
</ol>
<p><img src="/images/2020-12-23/003.png"></p>
<ol start="3" type="1">
<li>Config Browser proxy to Fiddler <code>localhost:8866</code></li>
</ol>
<p><img src="/images/2020-12-23/004.png"></p>
<h1 id="experiement">Experiement</h1>
<p>Now open any Web Browser with any url. You will see all the network requests sent out using HTTP(s)</p>
<p><img src="/images/2020-12-23/002.png"></p>
]]></content>
      <categories>
        <category>Networking</category>
      </categories>
      <tags>
        <tag>Networking</tag>
        <tag>Tool</tag>
        <tag>HTTP</tag>
        <tag>Debugging</tag>
        <tag>Snipping</tag>
      </tags>
  </entry>
  <entry>
    <title>How to clone an GCP instance to machine-image and restore it</title>
    <url>/2020/11/10/How-to-clone-an-GCP-instance-to-machine-image-and-restore-it/</url>
    <content><![CDATA[<h1 id="getting-started">Getting Started</h1>
<ol type="1">
<li>Download gcloud private key on google cloud console</li>
</ol>
<p><code>IAM &amp; Admin</code> -&gt; <code>Service Accounts</code> -&gt; <em>Your account name</em> -&gt; <code>Add key</code> -&gt; <code>Create New Key</code></p>
<ol start="2" type="1">
<li>Install <code>google cloud sdk</code></li>
</ol>
<ul>
<li>Download</li>
</ul>
<p><code>curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-317.0.0-linux-x86_64.tar.gz</code></p>
<ul>
<li>Untar</li>
</ul>
<p><code>tar -xf google-cloud-sdk-317.0.0-linux-x86_64.tar.gz</code></p>
<ul>
<li>Install</li>
</ul>
<p><code>./google-cloud-sdk/install.sh</code></p>
<ol start="3" type="1">
<li>Authorizing gcloud</li>
</ol>
<p>Follow the gcloud official <a href="https://cloud.google.com/sdk/docs/authorizing">document</a></p>
<h1 id="list-running-instance">List running instance</h1>
<ul>
<li><p>Using shell script <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcloud beta compute instances list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NAME                  ZONE           MACHINE_TYPE   PREEMPTIBLE  INTERNAL_IP  EXTERNAL_IP     STATUS</span><br><span class="line">c****01               us-central1-a  f1-micro                    xx.xxx.x.x   xxx.xxx.xx.xxx  RUNNING</span><br><span class="line">c****02               us-central1-a  f1-micro                    xx.xxx.x.x   xx.xxx.xx.xxx   RUNNING</span><br></pre></td></tr></table></figure></p></li>
<li><p>Using Python <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> googleapiclient.discovery <span class="keyword">import</span> build</span><br><span class="line"></span><br><span class="line"><span class="comment"># Here I use beta version because it support create instance from machine image</span></span><br><span class="line">compute = build(<span class="string">&#x27;compute&#x27;</span>, <span class="string">&#x27;beta&#x27;</span>)</span><br><span class="line">instances = compute.instances()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_running_instances</span>(<span class="params">status=<span class="string">&#x27;RUNNING&#x27;</span></span>):</span></span><br><span class="line">    <span class="comment"># Here I will use the instances client to list all running instance</span></span><br><span class="line">    items = instances.<span class="built_in">list</span>(</span><br><span class="line">        project=PROJECT, </span><br><span class="line">        zone=ZONE,</span><br><span class="line">        <span class="built_in">filter</span>=<span class="string">f&#x27;status=<span class="subst">&#123;status&#125;</span>&#x27;</span></span><br><span class="line">    ).execute()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Let display few information of those instance</span></span><br><span class="line">    items = items.get(<span class="string">&#x27;items&#x27;</span>)</span><br><span class="line">    formated_items = [(item.get(<span class="string">&#x27;name&#x27;</span>), item.get(<span class="string">&#x27;status&#x27;</span>)) <span class="keyword">for</span> item <span class="keyword">in</span> items]</span><br><span class="line">    print(<span class="string">&#x27;\n&#x27;</span>.join([<span class="built_in">str</span>(item) <span class="keyword">for</span> item <span class="keyword">in</span> formated_items]))</span><br><span class="line"></span><br><span class="line">show_running_instances()</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h1 id="take-image-of-a-running-instance">Take image of a running instance</h1>
<p>This command will take about 40-60 seconds</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcloud beta compute machine-images create my-image-v01 --source-instance c****01</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Created [https://www.googleapis.com/compute/beta/projects/xxx-xxx-2xxxxx5/global/machineImages/my-image-v01].</span><br><span class="line">NAME               STATUS</span><br><span class="line">my-image-v01  READY</span><br></pre></td></tr></table></figure>
<h1 id="create-new-instance-of-the-my-image-v01">Create new instance of the <code>my-image-v01</code></h1>
<p>This command will take about 10s to spin up an instance</p>
<ul>
<li><p>Using shell script <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcloud beta compute instances create c****03 --source-machine-image my-image-v01</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Created [https://www.googleapis.com/compute/beta/projects/xxx-xxx-2xxxxx5/zones/us-central1-a/instances/c****03].</span><br><span class="line">NAME       ZONE           MACHINE_TYPE  PREEMPTIBLE  INTERNAL_IP  EXTERNAL_IP     STATUS</span><br><span class="line">c****03    us-central1-a  f1-micro                   xx.xxx.x.xx  xx.xxx.xxx.xxx  RUNNING</span><br></pre></td></tr></table></figure></p></li>
<li><p>Using Python Api <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> googleapiclient.discovery <span class="keyword">import</span> build</span><br><span class="line"></span><br><span class="line"><span class="comment"># Here I use beta version because it support create instance from machine image</span></span><br><span class="line">compute = build(<span class="string">&#x27;compute&#x27;</span>, <span class="string">&#x27;beta&#x27;</span>)</span><br><span class="line">instances = compute.instances()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_instance</span>(<span class="params">name=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> instances.insert(</span><br><span class="line">        project=PROJECT, </span><br><span class="line">        zone=ZONE, </span><br><span class="line">        body=&#123; <span class="string">&#x27;sourceMachineImage&#x27;</span>: <span class="string">&#x27;global/machineImages/my-image-v01&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: name &#125;</span><br><span class="line">    ).execute()</span><br><span class="line"></span><br><span class="line">create_instance(<span class="string">&#x27;test001&#x27;</span>)</span><br></pre></td></tr></table></figure></p></li>
</ul>
<p>To create an instance and run the startup script after running. <a href="https://cloud.google.com/compute/docs/tutorials/python-guide#addinganinstance">Read more</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># You can also upload a script to make the instance automatically run it after created.</span></span><br><span class="line">startup_script = <span class="built_in">open</span>(<span class="string">&#x27;./startup-script.sh&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line">instances.insert(</span><br><span class="line">    project=PROJECT,</span><br><span class="line">    zone=ZONE,</span><br><span class="line">    body=&#123;</span><br><span class="line">        <span class="string">&#x27;sourceMachineImage&#x27;</span>: <span class="string">&#x27;global/machineImages/my-image-v01&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;test001&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;metadata&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;items&#x27;</span>: [&#123;</span><br><span class="line">                <span class="string">&#x27;key&#x27;</span>: <span class="string">&#x27;startup-script&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;value&#x27;</span>: startup_script</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">).execute()</span><br></pre></td></tr></table></figure>
<h1 id="delete-running-instance">Delete running instance</h1>
<ul>
<li><p>Using shell script <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcloud beta compute instances delete c****03</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The following instances will be deleted. Any attached disks configured</span><br><span class="line"> to be auto-deleted will be deleted unless they are attached to any </span><br><span class="line">other instances or the `--keep-disks` flag is given and specifies them</span><br><span class="line"> for keeping. Deleting a disk is irreversible and any data on the disk</span><br><span class="line"> will be lost.</span><br><span class="line"> - [c****03] in [us-central1-a]</span><br><span class="line"></span><br><span class="line">Do you want to continue (Y/n)?  y</span><br><span class="line"></span><br><span class="line">Deleted [https://www.googleapis.com/compute/beta/projects/xxx-xxx-2xxxxx5/zones/us-central1-a/instances/c****03].</span><br></pre></td></tr></table></figure></p></li>
<li><p>Using python api <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> googleapiclient.discovery <span class="keyword">import</span> build</span><br><span class="line"></span><br><span class="line"><span class="comment"># Here I use beta version because it support create instance from machine image</span></span><br><span class="line">compute = build(<span class="string">&#x27;compute&#x27;</span>, <span class="string">&#x27;beta&#x27;</span>)</span><br><span class="line">instances = compute.instances()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">name=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> instances.delete(</span><br><span class="line">        project=PROJECT, </span><br><span class="line">        zone=ZONE,</span><br><span class="line">        instance=name</span><br><span class="line">    ).execute()</span><br><span class="line"></span><br><span class="line">delete(<span class="string">&#x27;test001&#x27;</span>)</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h1 id="delete-the-machine-image">Delete the machine-image</h1>
<ul>
<li>Using shell script <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcloud beta compute machine-images delete my-image-v01</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The following machine images will be deleted:</span><br><span class="line"> - [my-image-v01]</span><br><span class="line"></span><br><span class="line">Do you want to continue (Y/n)?  y</span><br><span class="line"></span><br><span class="line">Deleted [https://www.googleapis.com/compute/beta/projects/xxx-xxx-2xxxxx5/global/machineImages/my-image-v01].</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>GCP</tag>
        <tag>Google Cloud</tag>
        <tag>Compute Engine</tag>
        <tag>Backup</tag>
        <tag>Machine Image</tag>
      </tags>
  </entry>
  <entry>
    <title>How to find a website IP behind CloudFlare</title>
    <url>/2020/12/26/How-to-find-a-website-IP-behide-CloudFlare/</url>
    <content><![CDATA[<p>CloudFlare provides high security for the target website to hide their real server IP address. Make it harder for the hacker to attack the website real server. But it doesn't mean it is impossible. Let's find it out on one website - <code>https://www.g2.com</code> - use CloudFlare to hide it IP address.</p>
<h2 id="find-dns-history-records">1. Find DNS history records</h2>
<p>I use <a href="https://securitytrails.com/">SecurityTrails</a> to find the domain DNS history. <img src="/images/2020-12-26/001.png"></p>
<a id="more"></a>
<h2 id="digging-deeper">2. Digging deeper</h2>
<p>Now use the <code>dig</code> command to reveal the DNS history on <code>ns4.ogilvy.com</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> dig @ns4.ogilvy.com www.g2.com</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.16.1-Ubuntu &lt;&lt;&gt;&gt; @ns4.ogilvy.com www.g2.com                                                                </span><br><span class="line">; (1 server found)                                                                                                      </span><br><span class="line">;; global options: +cmd                                                                                                 </span><br><span class="line">;; Got answer:                                                                                                          </span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 24883                                                               </span><br><span class="line">;; flags: qr aa rd; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1                                                    </span><br><span class="line">;; WARNING: recursion requested but not available                                                                                                                                                                                               </span><br><span class="line">;; OPT PSEUDOSECTION:                                                                                                   </span><br><span class="line">; EDNS: version: 0, flags:; udp: 1220                                                                                   </span><br><span class="line">; COOKIE: a7c6382d3646792f30fe538c5fe6e580eb39a7455513923d (good)                                                       </span><br><span class="line">;; QUESTION SECTION:                                                                                                    </span><br><span class="line">;www.g2.com.                    IN      A                                                                                                                                                                                                       </span><br><span class="line">;; ANSWER SECTION:                                                                                                      </span><br><span class="line">www.g2.com.             3600    IN      CNAME   www.geometry.com.                                                       </span><br><span class="line">www.geometry.com.       600     IN      CNAME   awseb-AWSEB-PZBDPV2T34UN-1188684902.eu-west-1.elb.amazonaws.com.                                                                                                                                </span><br><span class="line">;; Query time: 254 msec                                                                                                 </span><br><span class="line">;; SERVER: 199.20.46.10#53(199.20.46.10)                                                                                </span><br><span class="line">;; WHEN: Sat Dec 26 14:25:53 +07 2020                                                                                   </span><br><span class="line">;; MSG SIZE  rcvd: 168   </span><br></pre></td></tr></table></figure>
<p>Look like their website is hosting on <code>awseb-AWSEB-PZBDPV2T34UN-1188684902.eu-west-1.elb.amazonaws.com</code> domain.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nslookup awseb-AWSEB-PZBDPV2T34UN-1188684902.eu-west-1.elb.amazonaws.com</span><br><span class="line"></span><br><span class="line">Server:         8.8.8.8</span><br><span class="line">Address:        8.8.8.8#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">Name:   awseb-AWSEB-PZBDPV2T34UN-1188684902.eu-west-1.elb.amazonaws.com</span><br><span class="line">Address: 34.xxx.xxx.xx</span><br><span class="line">Name:   awseb-AWSEB-PZBDPV2T34UN-1188684902.eu-west-1.elb.amazonaws.com</span><br><span class="line">Address: 18.xxx.xxx.xx</span><br><span class="line">Name:   awseb-AWSEB-PZBDPV2T34UN-1188684902.eu-west-1.elb.amazonaws.com</span><br><span class="line">Address: 54.xxx.xx.xxx</span><br></pre></td></tr></table></figure>
<p>Let's check the ip <code>34.xxx.xxx.xx</code></p>
<ul>
<li>Using <code>curl</code></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> curl -i -H &quot;Host: www.g2.com&quot; 34.xxx.xxx.xx</span><br><span class="line"></span><br><span class="line">Server: awselb/2.0</span><br><span class="line">Date: Sat, 26 Dec 2020 08:40:34 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 134</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Location: https://www.g2.com:443/</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;301 Moved Permanently&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;301 Moved Permanently&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>Using <code>Postman</code> <img src="/images/2020-12-26/002.png"></li>
</ul>
<p>Hmm, look like we found the correct website IP address <code>34.x.x.x</code>. The host force all requests to redirect to <code>www.g2.com</code> which is through CloudFlare. Or maybe we need some special headers to be able to bypass it security checking.</p>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>Networking</tag>
        <tag>Security</tag>
        <tag>Hacking</tag>
      </tags>
  </entry>
  <entry>
    <title>How to teach computer to play Tictactoe</title>
    <url>/2021/03/14/How-to-tech-computer-to-play-Tictactoe/</url>
    <content><![CDATA[<p>What make people become good game players? They get the game instruction, start practicing and then learn from failure. How about a computer? Can we train it to play a game? The answer is absolutely! And the process of teaching or training the computer to play game is super interesting. This post is written to guide you, step by step, to create your own Game AI that is able to learn to play this game without any hardcoded rules. <a id="more"></a> Let's try teaching the computer yourself, after about a hundred thousands episodes, it can become expert that you can hardly win. In addition, if you would like to know more how it actually works, keep scrolling down to read further til the end of the post.</p>
<iframe src="https://tictactoe.hien.dev/" width="100%" height="920px" style="border:1px dashed black;">
</iframe>
<h1 id="how-is-it-working">1. How is it working?</h1>
<p>The computer learns by interacting with the game enviroment. Then it observes how the game environment changes, leading to its reward. By playing many many times, it gets the idea of receiving as many good rewards as possible. This type of learning is called <a href="https://en.wikipedia.org/wiki/Reinforcement_learning">Reinforcement Learning</a>.</p>
<p>If you want to learn more about it, there is a free ebook you should read, <a href="https://web.stanford.edu/class/psych209/Readings/SuttonBartoIPRLBook2ndEd.pdf">Reinforcement Learning, Richard S. Sutton and Andrew G. Barto</a>.</p>
<p><img src="/images/2021-03-14/001.svg" /></p>
<p>Next, I'll walk you through the three algorithms and how to implement them.</p>
<ul>
<li>Monte Carlo</li>
<li>SARSA</li>
<li>Q-Learning</li>
</ul>
<p>Before the algorithms can interact with the game environment, we must have the game enviroment implemented first.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* game.js */</span></span><br><span class="line"><span class="keyword">import</span> &#123; every &#125; <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> X = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> O = <span class="string">&#x27;O&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> EMPTY = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> initGame = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    turn: X,</span><br><span class="line">    winner: <span class="literal">null</span>,</span><br><span class="line">    gameover: <span class="literal">false</span>,</span><br><span class="line">    board: [EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> move = <span class="function">(<span class="params">game, location</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; turn, board &#125; = game;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> validMoves = getValidMoves(board);</span><br><span class="line">  <span class="keyword">if</span> (!validMoves.includes(location)) &#123;</span><br><span class="line">    <span class="keyword">return</span> game;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> nextState = [...board];</span><br><span class="line">  nextState[location] = turn;</span><br><span class="line">  turn = turn === X ? O : X;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> winner = checkWinner(nextState);</span><br><span class="line">  <span class="keyword">const</span> gameover = checkGameover(nextState);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    turn,</span><br><span class="line">    winner,</span><br><span class="line">    gameover,</span><br><span class="line">    board: nextState</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getValidMoves = <span class="function">(<span class="params">board</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> validMoves = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (board[i] === EMPTY) validMoves.push(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> validMoves;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> checkWinner = <span class="function">(<span class="params">board</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> lines = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>],</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lines.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> [a, b, c] = lines[i];</span><br><span class="line">    <span class="keyword">if</span> (board[a] !== EMPTY &amp;&amp; board[a] === board[b] &amp;&amp; board[a] === board[c]) &#123;</span><br><span class="line">      <span class="keyword">return</span> board[a];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> checkGameover = <span class="function">(<span class="params">board</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> every(board, <span class="function"><span class="params">it</span> =&gt;</span> it !== EMPTY) || !!checkWinner(board);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> boardToString = <span class="function">(<span class="params">board</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> board.join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> calculateReward = <span class="function">(<span class="params">game, player</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; gameover, winner &#125; = game;</span><br><span class="line">  <span class="keyword">if</span> (!gameover) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!winner) &#123;</span><br><span class="line">      <span class="comment">// Reward for a draw game</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (winner === player) &#123;</span><br><span class="line">      <span class="comment">// Reward for win</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Reward for lose</span></span><br><span class="line">      <span class="keyword">return</span> -<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="monte-carlo">2. Monte Carlo</h1>
<h2 id="the-algorithm">The algorithm</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Initialize, for all s ‚àà S, a ‚àà A(s): </span><br><span class="line">    Q(s, a) ‚Üê arbitrary</span><br><span class="line">    œÄ(s) ‚Üê arbitrary</span><br><span class="line">    Returns(s, a) ‚Üê empty list</span><br><span class="line"></span><br><span class="line">Repeat forever:</span><br><span class="line">    Choose S0 ‚àà S and A0 ‚àà A(S0) s.t. all pairs have probability &gt; 0 </span><br><span class="line">    Generate an episode starting from S0,A0, following œÄ</span><br><span class="line">    For each pair s, a appearing in the episode:</span><br><span class="line">        G ‚Üê return following the first occurrence of s, a </span><br><span class="line">        Append G to Returns(s, a)</span><br><span class="line">        Q(s, a) ‚Üê average(Returns(s, a))</span><br><span class="line">    For each s in the episode: </span><br><span class="line">        œÄ(s) ‚Üê argmax(Q(s, a))</span><br></pre></td></tr></table></figure>
<h2 id="implementation">Implementation</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* MonteCarloAgent.js */</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">MorteCarloAgent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">&#123; epsilon = <span class="number">0.1</span>, discount = <span class="number">0.9</span>, player = O &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.epsilon = epsilon;</span><br><span class="line">    <span class="built_in">this</span>.discount = discount;</span><br><span class="line">    <span class="built_in">this</span>.episode = [];</span><br><span class="line">    <span class="built_in">this</span>.player = player;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.Q = <span class="keyword">new</span> <span class="built_in">Proxy</span>(</span><br><span class="line">      &#123;&#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        get: <span class="function">(<span class="params">target, name</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (!(name <span class="keyword">in</span> target)) &#123;</span><br><span class="line">            target[name] = range(<span class="number">0</span>, <span class="number">9</span>, <span class="number">0.0</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> target[name];</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.returnSums = <span class="keyword">new</span> <span class="built_in">Proxy</span>(</span><br><span class="line">      &#123;&#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        get: <span class="function">(<span class="params">target, name</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (!(name <span class="keyword">in</span> target)) &#123;</span><br><span class="line">            target[name] = range(<span class="number">0</span>, <span class="number">9</span>, <span class="number">0.0</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> target[name];</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.returnCounts = <span class="keyword">new</span> <span class="built_in">Proxy</span>(</span><br><span class="line">      &#123;&#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        get: <span class="function">(<span class="params">target, name</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (!(name <span class="keyword">in</span> target)) &#123;</span><br><span class="line">            target[name] = range(<span class="number">0</span>, <span class="number">9</span>, <span class="number">0.0</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> target[name];</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  policy = <span class="function">(<span class="params">game</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; board &#125; = game;</span><br><span class="line">    <span class="keyword">const</span> validMoves = getValidMoves(board);</span><br><span class="line">    <span class="keyword">const</span> boardString = boardToString(board);</span><br><span class="line">    <span class="keyword">let</span> A = range(<span class="number">0</span>, <span class="number">9</span>, <span class="number">0.0</span>);</span><br><span class="line">    <span class="keyword">const</span> cloned = clone(<span class="built_in">this</span>.Q[boardString]);</span><br><span class="line">    <span class="keyword">const</span> pulled = pullAt(cloned, validMoves);</span><br><span class="line">    <span class="keyword">const</span> bestScore = max(pulled);</span><br><span class="line">    <span class="keyword">const</span> bestAction = validMoves[pulled.indexOf(bestScore)];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; validMoves.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> a = validMoves[i];</span><br><span class="line">      A[a] = <span class="built_in">this</span>.epsilon / validMoves.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (validMoves.includes(bestAction)) &#123;</span><br><span class="line">      A[bestAction] += <span class="number">1.0</span> - <span class="built_in">this</span>.epsilon;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> someAction = sample(validMoves);</span><br><span class="line">      A[someAction] += <span class="number">1.0</span> - <span class="built_in">this</span>.epsilon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  learn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> memory = <span class="built_in">this</span>.episode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (memory.length &gt; <span class="number">0</span> &amp;&amp; memory[memory.length - <span class="number">1</span>][<span class="number">0</span>].gameover) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; memory.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> record = memory[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> state = record[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">const</span> action = record[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> G = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> discount = <span class="built_in">this</span>.discount;</span><br><span class="line">        <span class="keyword">const</span> stateString = boardToString(state.board);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; memory.length; j++) &#123;</span><br><span class="line">          <span class="keyword">const</span> nextRecord = memory[j];</span><br><span class="line">          <span class="keyword">const</span> nextState = nextRecord[<span class="number">0</span>];</span><br><span class="line">          <span class="keyword">const</span> reward = calculateReward(nextState, <span class="built_in">this</span>.player);</span><br><span class="line">          G += reward * discount;</span><br><span class="line">          discount = discount * <span class="built_in">this</span>.discount;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.returnSums[stateString][action] += G;</span><br><span class="line">        <span class="built_in">this</span>.returnCounts[stateString][action] += <span class="number">1.0</span>;</span><br><span class="line">        <span class="built_in">this</span>.Q[stateString][action] =</span><br><span class="line">          <span class="built_in">this</span>.returnSums[stateString][action] /</span><br><span class="line">          <span class="built_in">this</span>.returnCounts[stateString][action];</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  observe = <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.episode.push([state, action]);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  newEpisode = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.episode = [];</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="sarsa">3. SARSA</h1>
<h2 id="the-algorithm-1">The algorithm</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Initialize Q(s, a), ‚àÄs ‚àà S, a ‚àà A(s), arbitrarily, and Q(terminal-state, ¬∑) &#x3D; 0 </span><br><span class="line">Repeat (for each episode):</span><br><span class="line">    Initialize S</span><br><span class="line">    Choose A from S using policy derived from Q (e.g., Œµ-greedy) </span><br><span class="line">    Repeat (for each step of episode):</span><br><span class="line">        Take action A, observe R, S‚Ä≤</span><br><span class="line">        Choose A‚Ä≤ from S‚Ä≤ using policy derived from Q (e.g., Œµ-greedy) </span><br><span class="line">        Q(S, A) ‚Üê Q(S, A) + Œ±[R + Œ≥Q(S‚Ä≤, A‚Ä≤) ‚àí Q(S, A)]</span><br><span class="line">        S ‚Üê S‚Ä≤; A ‚Üê A‚Ä≤;</span><br><span class="line">    until S is terminal</span><br></pre></td></tr></table></figure>
<h2 id="implementation-1">Implementation</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* SarsaAgent.js */</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">SarsaAgent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">&#123; epsilon = <span class="number">0.1</span>, discount = <span class="number">0.9</span>, alpha = <span class="number">0.01</span>, player = O &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.epsilon = epsilon;</span><br><span class="line">    <span class="built_in">this</span>.discount = discount;</span><br><span class="line">    <span class="built_in">this</span>.alpha = alpha;</span><br><span class="line">    <span class="built_in">this</span>.player = player;</span><br><span class="line">    <span class="built_in">this</span>.episode = [];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>._Q = &#123;&#125;;</span><br><span class="line">    <span class="built_in">this</span>.Q = <span class="keyword">new</span> <span class="built_in">Proxy</span>(<span class="built_in">this</span>._Q, &#123;</span><br><span class="line">      get: <span class="function">(<span class="params">target, name</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(name <span class="keyword">in</span> target)) &#123;</span><br><span class="line">          target[name] = range(<span class="number">0</span>, <span class="number">9</span>, <span class="number">0.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> target[name];</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  policy = <span class="function">(<span class="params">game</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; board &#125; = game;</span><br><span class="line">    <span class="keyword">const</span> validMoves = getValidMoves(board);</span><br><span class="line">    <span class="keyword">const</span> boardString = boardToString(board);</span><br><span class="line">    <span class="keyword">let</span> A = range(<span class="number">0</span>, <span class="number">9</span>, <span class="number">0.0</span>);</span><br><span class="line">    <span class="keyword">const</span> cloned = clone(<span class="built_in">this</span>.Q[boardString]);</span><br><span class="line">    <span class="keyword">const</span> pulled = pullAt(cloned, validMoves);</span><br><span class="line">    <span class="keyword">const</span> bestScore = max(pulled);</span><br><span class="line">    <span class="keyword">const</span> bestAction = validMoves[pulled.indexOf(bestScore)];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; validMoves.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> a = validMoves[i];</span><br><span class="line">      A[a] = <span class="built_in">this</span>.epsilon / validMoves.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (validMoves.includes(bestAction)) &#123;</span><br><span class="line">      A[bestAction] += <span class="number">1.0</span> - <span class="built_in">this</span>.epsilon;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> someAction = sample(validMoves);</span><br><span class="line">      A[someAction] += <span class="number">1.0</span> - <span class="built_in">this</span>.epsilon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  learn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> memory = <span class="built_in">this</span>.episode;</span><br><span class="line">    <span class="keyword">if</span> (memory.length &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> record1 = memory[memory.length - <span class="number">2</span>];</span><br><span class="line">      <span class="keyword">const</span> record2 = memory[memory.length - <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">const</span> state = record1[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">const</span> action = record1[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">const</span> nextState = record2[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">const</span> nextAction = record2[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> reward = calculateReward(nextState, <span class="built_in">this</span>.player);</span><br><span class="line">      <span class="keyword">const</span> stateString = boardToString(state.board);</span><br><span class="line">      <span class="keyword">const</span> nextStateString = boardToString(nextState.board);</span><br><span class="line">      <span class="keyword">const</span> nextStateValue = nextState.gameover</span><br><span class="line">        ? <span class="number">0</span></span><br><span class="line">        : <span class="built_in">this</span>.Q[nextStateString][nextAction];</span><br><span class="line">      <span class="keyword">const</span> tdTarget = reward + <span class="built_in">this</span>.discount * nextStateValue;</span><br><span class="line">      <span class="keyword">const</span> tdDelta = tdTarget - <span class="built_in">this</span>.Q[stateString][action];</span><br><span class="line">      <span class="built_in">this</span>.Q[stateString][action] += <span class="built_in">this</span>.alpha * tdDelta;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  observe = <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.episode.push([state, action]);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  newEpisode = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.episode = [];</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="q-learning">4. Q-Learning</h1>
<h2 id="the-algorithm-2">The algorithm</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Initialize Q(s, a), ‚àÄs ‚àà S, a ‚àà A(s), arbitrarily, and Q(terminal-state, ¬∑) &#x3D; 0 </span><br><span class="line">Repeat (for each episode):</span><br><span class="line">    Initialize S</span><br><span class="line">    Repeat (for each step of episode):</span><br><span class="line">        Choose A from S using policy derived from Q (e.g., Œµ-greedy) </span><br><span class="line">        Take action A, observe R, S‚Ä≤</span><br><span class="line">        Q(S, A) ‚Üê Q(S, A) + Œ±[R + Œ≥*max(Q(S‚Ä≤, a)) ‚àí Q(S, A)] </span><br><span class="line">        S ‚Üê S‚Ä≤;</span><br><span class="line">    until S is terminal</span><br></pre></td></tr></table></figure>
<h2 id="implementation-2">Implementation</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* QLearningAgent.js */</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">QLearningAgent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">&#123; epsilon = <span class="number">0.1</span>, discount = <span class="number">0.9</span>, alpha = <span class="number">0.01</span>, player = O &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.epsilon = epsilon;</span><br><span class="line">    <span class="built_in">this</span>.discount = discount;</span><br><span class="line">    <span class="built_in">this</span>.alpha = alpha;</span><br><span class="line">    <span class="built_in">this</span>.player = player;</span><br><span class="line">    <span class="built_in">this</span>.episode = [];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>._Q = &#123;&#125;;</span><br><span class="line">    <span class="built_in">this</span>.Q = <span class="keyword">new</span> <span class="built_in">Proxy</span>(<span class="built_in">this</span>._Q, &#123;</span><br><span class="line">      get: <span class="function">(<span class="params">target, name</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(name <span class="keyword">in</span> target)) &#123;</span><br><span class="line">          target[name] = range(<span class="number">0</span>, <span class="number">9</span>, <span class="number">0.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> target[name];</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  policy = <span class="function">(<span class="params">game</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; board &#125; = game;</span><br><span class="line">    <span class="keyword">const</span> validMoves = getValidMoves(board);</span><br><span class="line">    <span class="keyword">const</span> boardString = boardToString(board);</span><br><span class="line">    <span class="keyword">let</span> A = range(<span class="number">0</span>, <span class="number">9</span>, <span class="number">0.0</span>);</span><br><span class="line">    <span class="keyword">const</span> cloned = clone(<span class="built_in">this</span>.Q[boardString]);</span><br><span class="line">    <span class="keyword">const</span> pulled = pullAt(cloned, validMoves);</span><br><span class="line">    <span class="keyword">const</span> bestScore = max(pulled);</span><br><span class="line">    <span class="keyword">const</span> bestAction = validMoves[pulled.indexOf(bestScore)];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; validMoves.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> a = validMoves[i];</span><br><span class="line">      A[a] = <span class="built_in">this</span>.epsilon / validMoves.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (validMoves.includes(bestAction)) &#123;</span><br><span class="line">      A[bestAction] += <span class="number">1.0</span> - <span class="built_in">this</span>.epsilon;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> someAction = sample(validMoves);</span><br><span class="line">      A[someAction] += <span class="number">1.0</span> - <span class="built_in">this</span>.epsilon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  learn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> memory = <span class="built_in">this</span>.episode;</span><br><span class="line">    <span class="keyword">if</span> (memory.length &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> record1 = memory[memory.length - <span class="number">2</span>];</span><br><span class="line">      <span class="keyword">const</span> record2 = memory[memory.length - <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">const</span> state = record1[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">const</span> action = record1[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">const</span> nextState = record2[<span class="number">0</span>];</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">const</span> reward = calculateReward(nextState, <span class="built_in">this</span>.player);</span><br><span class="line">      <span class="keyword">const</span> stateString = boardToString(state.board);</span><br><span class="line">      <span class="keyword">const</span> nextStateString = boardToString(nextState.board);</span><br><span class="line">      <span class="keyword">const</span> nextStateValue = nextState.gameover</span><br><span class="line">        ? <span class="number">0</span></span><br><span class="line">        : max(<span class="built_in">this</span>.Q[nextStateString]);</span><br><span class="line">      <span class="keyword">const</span> tdTarget = reward + <span class="built_in">this</span>.discount * nextStateValue;</span><br><span class="line">      <span class="keyword">const</span> tdDelta = tdTarget - <span class="built_in">this</span>.Q[stateString][action];</span><br><span class="line">      <span class="built_in">this</span>.Q[stateString][action] += <span class="built_in">this</span>.alpha * tdDelta;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  observe = <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.episode.push([state, action]);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  newEpisode = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.episode = [];</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Reinforcement Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Reinforcement Learning</tag>
        <tag>Artificial Intelligent</tag>
        <tag>AI</tag>
        <tag>Tictactoe</tag>
        <tag>Game</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux dig Command: Simplified Guide for Efficient DNS Lookups</title>
    <url>/2023/12/20/Linux-dig-Command-Simplified-Guide-for-Efficient-DNS-Lookups/</url>
    <content><![CDATA[<h1 id="introduction">Introduction:</h1>
<p>The <code>dig</code> command is a staple for web developers needing to troubleshoot and analyze DNS (Domain Name System) issues. It stands for Domain Information Groper, providing detailed DNS information with simplicity and flexibility.</p>
<h1 id="check-dig-installation">Check dig Installation:</h1>
<p>Run `dig -v`` in your terminal. This command checks if dig is installed on your Linux machine by returning the installed version.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dig -v</span><br><span class="line"></span><br><span class="line">DiG 9.10.6</span><br></pre></td></tr></table></figure>
<h1 id="install-dig-if-not-found">Install dig if not found</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install dnsutils</span><br></pre></td></tr></table></figure>
<h1 id="perform-basic-dns-query">Perform Basic DNS Query:</h1>
<p>Use <code>dig example.com</code> for a straightforward DNS lookup. This command fetches the A record of example.com, showing the IP address associated with the domain.</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dig example.com</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; example.com</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- <span class="string">opcode: QUERY, status: NOERROR, id: 11748</span></span><br><span class="line"><span class="string">;; flags: qr rd ra ad; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; OPT PSEUDOSECTION:</span></span><br><span class="line"><span class="string">; EDNS: version: 0, flags:; udp: 512</span></span><br><span class="line"><span class="string">;; QUESTION SECTION:</span></span><br><span class="line"><span class="string">;example.com.			IN	A</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; ANSWER SECTION:</span></span><br><span class="line"><span class="string">example.com.		18293	IN	A	93.184.216.34</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; Query time: 44 msec</span></span><br><span class="line"><span class="string">;; SERVER: 8.8.8.8#53(8.8.8.8)</span></span><br><span class="line"><span class="string">;; WHEN: Wed Dec 20 18:06:43 +07 2023</span></span><br><span class="line"><span class="string">;; MSG SIZE  rcvd: 56</span></span><br></pre></td></tr></table></figure>
<h1 id="specify-dns-server-for-query">Specify DNS Server for Query:</h1>
<p>To query a specific DNS server, such as Google‚Äôs public DNS, use <code>dig @8.8.8.8 example.com</code>. This is useful for comparing how DNS resolution occurs through different servers.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dig @8.8.8.8 example.com</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; @8.8.8.8 example.com</span><br><span class="line">; (1 server found)</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- <span class="string">opcode: QUERY, status: NOERROR, id: 39681</span></span><br><span class="line"><span class="string">;; flags: qr rd ra ad; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; OPT PSEUDOSECTION:</span></span><br><span class="line"><span class="string">; EDNS: version: 0, flags:; udp: 512</span></span><br><span class="line"><span class="string">;; QUESTION SECTION:</span></span><br><span class="line"><span class="string">;example.com.			IN	A</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; ANSWER SECTION:</span></span><br><span class="line"><span class="string">example.com.		18237	IN	A	93.184.216.34</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; Query time: 47 msec</span></span><br><span class="line"><span class="string">;; SERVER: 8.8.8.8#53(8.8.8.8)</span></span><br><span class="line"><span class="string">;; WHEN: Wed Dec 20 18:07:39 +07 2023</span></span><br><span class="line"><span class="string">;; MSG SIZE  rcvd: 56</span></span><br></pre></td></tr></table></figure>
<h1 id="reverse-dns-lookup">Reverse DNS Lookup:</h1>
<p><code>dig -x 93.184.216.34</code> performs a reverse DNS lookup. Instead of translating a domain to an IP address, it does the opposite, revealing the domain linked to a given IP.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dig -x 93.184.216.34</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; -x 93.184.216.34</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- <span class="string">opcode: QUERY, status: NXDOMAIN, id: 61393</span></span><br><span class="line"><span class="string">;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; OPT PSEUDOSECTION:</span></span><br><span class="line"><span class="string">; EDNS: version: 0, flags:; udp: 512</span></span><br><span class="line"><span class="string">;; QUESTION SECTION:</span></span><br><span class="line"><span class="string">;34.216.184.93.in-addr.arpa.	IN	PTR</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; AUTHORITY SECTION:</span></span><br><span class="line"><span class="string">216.184.93.in-addr.arpa. 436	IN	SOA	ns1.edgecastcdn.net. noc.edgecast.com. 1589310095 3600 600 604800 600</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; Query time: 40 msec</span></span><br><span class="line"><span class="string">;; SERVER: 8.8.8.8#53(8.8.8.8)</span></span><br><span class="line"><span class="string">;; WHEN: Wed Dec 20 18:09:00 +07 2023</span></span><br><span class="line"><span class="string">;; MSG SIZE  rcvd: 126</span></span><br></pre></td></tr></table></figure>
<h1 id="batch-mode-for-multiple-queries">Batch Mode for Multiple Queries:</h1>
<p>For querying multiple domains, dig offers a batch mode. Simply create a file with a list of domains and execute <code>dig -f yourfile.txt</code>. It‚Äôs an efficient way to handle bulk DNS queries.</p>
<h1 id="customize-dig-defaults">Customize dig Defaults:</h1>
<p>Customize dig's behavior by editing <code>~/.digrc</code>. This allows you to set default options tailored to your regular usage patterns.</p>
<h1 id="conclusion">Conclusion:</h1>
<p><code>dig</code> is an invaluable tool for developers dealing with DNS. It‚Äôs precise, flexible, and provides a depth of information crucial for diagnosing and understanding domain resolutions.</p>
]]></content>
      <categories>
        <category>Linux System Administration</category>
        <category>IT and Networking Tools</category>
        <category>Command Line Utilities</category>
      </categories>
      <tags>
        <tag>Linux Commands</tag>
        <tag>DNS Lookup</tag>
        <tag>Network Troubleshooting</tag>
        <tag>DNS Query Tool</tag>
        <tag>Command Line Tools</tag>
        <tag>Linux Networking</tag>
        <tag>System Administration</tag>
        <tag>DNS Analysis</tag>
        <tag>Linux Tutorials</tag>
        <tag>Developer Tools</tag>
        <tag>DNS Configuration</tag>
        <tag>Linux Server Management</tag>
      </tags>
  </entry>
  <entry>
    <title>Manage multiple ssh accounts for GitHub and GitLab</title>
    <url>/2020/11/23/Manage-ssh-keys/</url>
    <content><![CDATA[<h1 id="generate-new-rsa-ssh-keys">1. Generate new RSA SSH keys</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 2048 -C &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure>
<p>for example, I have 2 keys in my laptop</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">~/.ssh/id_rsa</span><br><span class="line">~/.ssh/tpp_rsa</span><br></pre></td></tr></table></figure>
<p>Next, add the new key you just created</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-add ~/.ssh/tpp_rsa</span><br></pre></td></tr></table></figure>
<p>You can check your added keys</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-add -l</span><br></pre></td></tr></table></figure>
<h1 id="modify-the-ssh-config">2. Modify the ssh config</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nano ~/.ssh/config</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Gitlab Personal</span></span><br><span class="line">Host gitlab.com</span><br><span class="line">        HostName gitlab.com</span><br><span class="line">        User git</span><br><span class="line">        IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Gitlab Working</span></span><br><span class="line">Host gitlab.com-tpp</span><br><span class="line">        HostName gitlab.com</span><br><span class="line">        User git</span><br><span class="line">        IdentityFile ~/.ssh/tpp_rsa</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> GitHub Personal</span></span><br><span class="line">Host github.com</span><br><span class="line">        HostName github.com</span><br><span class="line">        User git</span><br><span class="line">        IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> GitHub Working</span></span><br><span class="line">Host github.com</span><br><span class="line">        HostName github.com-tpp</span><br><span class="line">        User git</span><br><span class="line">        IdentityFile ~/.ssh/tpp_rsa</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="test-the-connection">3. Test the connection</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@gitlab.com</span><br><span class="line">ssh -T git@gitlab.com-tpp</span><br><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T git@github.com-tpp</span><br></pre></td></tr></table></figure>
<h1 id="add-public-key-to-your-source-control-profile-setting">4. Add public key to your source control profile setting</h1>
<p>Copy the public key to clipboard</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/tpp_rsa.pub | xclip -selection c</span><br></pre></td></tr></table></figure>
<p>Paste the key to gitlab ssh setting</p>
<p><img src="/images/2020-11-23/001.png"></p>
<p>Paste the key to github ssh setting</p>
<p><img src="/images/2020-11-23/002.png"></p>
<h1 id="clone-the-source-code-using-different-user">5. Clone the source code using different user</h1>
<p>Use this config for your personal account <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@gitlab.com:myname/myproject.git</span><br></pre></td></tr></table></figure></p>
<p>For other account <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@gitlab.com-tpp:orga/projecta.git</span><br></pre></td></tr></table></figure></p>
<p>That's all! Good luck!</p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>GitLab</tag>
        <tag>GitHub</tag>
        <tag>SSH</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Mastering DAGs in Apache Airflow: The Key to Efficient Workflow Automation</title>
    <url>/2023/12/18/Mastering-DAGs-in-Apache-Airflow-The-Key-to-Efficient-Workflow-Automation/</url>
    <content><![CDATA[<h1 id="introduction">Introduction</h1>
<p>Apache Airflow has revolutionized the way we automate and orchestrate workflows, and at the heart of this powerful tool lies the concept of Directed Acyclic Graphs (DAGs). Understanding DAGs is crucial for leveraging Airflow's full potential. Let's delve into the world of DAGs and uncover how they empower efficient workflow automation.</p>
<p><img src="/images/2023-12-18/infographic.png"> <a id="more"></a></p>
<h1 id="basic-concepts-of-apache-airflow">Basic Concepts of Apache Airflow</h1>
<ol type="1">
<li><p><strong>Directed Acyclic Graph (DAG):</strong> At its core, a DAG in Airflow is like a sophisticated flowchart, outlining tasks and their dependencies. Its acyclic nature ensures a clear, non-repetitive flow of operations.</p></li>
<li><p><strong>Task:</strong> Each node in a DAG represents a task, a fundamental unit of work, executed through different types of Operators.</p></li>
<li><p><strong>Operator:</strong> These are the building blocks of Airflow, defining the actual work done in each task. From PythonOperator to BashOperator, each has its unique purpose.</p></li>
<li><p><strong>Trigger Rules:</strong> These rules set the conditions for task execution, ensuring that tasks run based on the success or failure of preceding tasks.</p></li>
</ol>
<h1 id="how-a-dag-works-in-airflow">How a DAG Works in Airflow</h1>
<ul>
<li><p><strong>Definition:</strong> A DAG is crafted in a Python script, which Airflow interprets to understand the tasks and their relationships.</p></li>
<li><p><strong>Scheduling:</strong> Airflow's scheduler orchestrates the timing of these tasks, aligning them with specified intervals or external triggers.</p></li>
<li><p><strong>Execution:</strong> The execution phase is where the magic happens. Airflow determines the sequence and state of the tasks, ensuring everything runs smoothly.</p></li>
<li><p><strong>Task Instances:</strong> Every execution of a task in the DAG's lifetime is a unique instance, each with its own state.</p></li>
<li><p><strong>Data Passing:</strong> A key feature of DAGs is the ability to pass data between tasks, enabling complex data workflows.</p></li>
</ul>
<h1 id="practical-example">Practical Example</h1>
<p>Consider a simple DAG for data processing:</p>
<p><strong>Task 1:</strong> Extract data from a database.</p>
<p><strong>Task 2:</strong> Process the extracted data.</p>
<p><strong>Task 3:</strong> Save the processed data.</p>
<p>Each task is dependent on the success of its predecessor, illustrating the sequential nature of DAGs in data workflow. To demonstrate the practical example of a data processing pipeline in Apache Airflow using a DAG, I will provide a Python code snippet. This code will define a simple DAG with three tasks: extracting data from a database, processing the extracted data, and saving the processed data to a file system.</p>
<p>Here's how the Python code would look:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"><span class="keyword">from</span> airflow <span class="keyword">import</span> DAG</span><br><span class="line"><span class="keyword">from</span> airflow.operators.dummy_operator <span class="keyword">import</span> DummyOperator</span><br><span class="line"><span class="keyword">from</span> airflow.operators.python_operator <span class="keyword">import</span> PythonOperator</span><br><span class="line"><span class="keyword">from</span> airflow.utils.dates <span class="keyword">import</span> days_ago</span><br><span class="line"></span><br><span class="line"><span class="comment"># These args will get passed on to each operator</span></span><br><span class="line">default_args = &#123;</span><br><span class="line">    <span class="string">&#x27;owner&#x27;</span>: <span class="string">&#x27;airflow&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;depends_on_past&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;start_date&#x27;</span>: days_ago(<span class="number">1</span>),</span><br><span class="line">    <span class="string">&#x27;email_on_failure&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;email_on_retry&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;retries&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;retry_delay&#x27;</span>: timedelta(minutes=<span class="number">5</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define the DAG</span></span><br><span class="line">dag = DAG(</span><br><span class="line">    <span class="string">&#x27;data_processing_pipeline&#x27;</span>,</span><br><span class="line">    default_args=default_args,</span><br><span class="line">    description=<span class="string">&#x27;A simple data processing pipeline&#x27;</span>,</span><br><span class="line">    schedule_interval=timedelta(days=<span class="number">1</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define the tasks</span></span><br><span class="line">extract_task = PythonOperator(</span><br><span class="line">    task_id=<span class="string">&#x27;extract_data&#x27;</span>,</span><br><span class="line">    python_callable=extract_data_function,</span><br><span class="line">    dag=dag,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">process_task = PythonOperator(</span><br><span class="line">    task_id=<span class="string">&#x27;process_data&#x27;</span>,</span><br><span class="line">    python_callable=process_data_function,</span><br><span class="line">    dag=dag,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">save_task = PythonOperator(</span><br><span class="line">    task_id=<span class="string">&#x27;save_data&#x27;</span>,</span><br><span class="line">    python_callable=save_data_function,</span><br><span class="line">    dag=dag,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up the dependencies</span></span><br><span class="line">extract_task &gt;&gt; process_task &gt;&gt; save_task</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dummy functions for each task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_data_function</span>():</span></span><br><span class="line">    <span class="comment"># Logic for extracting data from a database</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_data_function</span>():</span></span><br><span class="line">    <span class="comment"># Logic for processing the data</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_data_function</span>():</span></span><br><span class="line">    <span class="comment"># Logic for saving data to a file system</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>In this code:</p>
<p><strong>DAG Definition:</strong> The DAG is defined with default arguments like owner, start date, retry policies, etc.</p>
<p><strong>Task Definitions:</strong> Three tasks are created using the PythonOperator. Each task calls a respective Python function (which you would define based on your specific requirements).</p>
<p><strong>Setting Dependencies:</strong> The tasks are arranged in a sequence where extract_task runs first, followed by process_task, and then save_task.</p>
<p><strong>Dummy Functions:</strong> These are placeholders for the actual logic for each task. In a real-world scenario, you would replace pass with the code to extract, process, and save data.</p>
<h1 id="key-takeaways">Key Takeaways</h1>
<ul>
<li><p>DAGs are the blueprint of workflows in Airflow, not the workflow itself.</p></li>
<li><p>Understanding and defining DAGs is fundamental to effective workflow automation with Airflow.</p></li>
<li><p>Airflow's strength lies in its ability to manage complex workflows, thanks to the structured approach of DAGs.</p></li>
</ul>
<h1 id="conclusion">Conclusion</h1>
<p>Grasping the concept of Directed Acyclic Graphs (DAGs) is essential for anyone looking to harness the power of Apache Airflow. Whether you're orchestrating simple tasks or complex data processes, the efficiency and clarity brought by DAGs are unmatched. Embrace the power of DAGs and take your workflow automation to new heights with Apache Airflow.</p>
]]></content>
      <categories>
        <category>DevOps</category>
        <category>Cloud Computing</category>
        <category>Software Development</category>
        <category>Data Engineering</category>
        <category>CI/CD</category>
        <category>Workflow Automation</category>
        <category>Python Programming</category>
        <category>Technology Tutorials</category>
        <category>Big Data</category>
        <category>ETL</category>
        <category>IT Operations</category>
      </categories>
      <tags>
        <tag>Apache Airflow</tag>
        <tag>Data Engineering</tag>
        <tag>Workflow Automation</tag>
        <tag>Data Pipeline</tag>
        <tag>Airflow DAG Tutorial</tag>
        <tag>Python Workflow</tag>
        <tag>Directed Acyclic Graph</tag>
        <tag>Airflow Operators</tag>
        <tag>Task Management in Airflow</tag>
        <tag>Airflow Scheduling</tag>
        <tag>ETL Processes</tag>
        <tag>DevOps Tools</tag>
        <tag>Big Data Processing</tag>
        <tag>Automation in Data Science</tag>
        <tag>Python Scripting for Airflow</tag>
      </tags>
  </entry>
  <entry>
    <title>Mastering GitHub Copilot: 10 Tips for Writing Effective Comments</title>
    <url>/2023/12/21/Mastering-GitHub-Copilot-10-Tips-for-Writing-Effective-Comments/</url>
    <content><![CDATA[<p>Hey there, fellow coders! üëã Welcome to my cozy corner where I talk all things code, with a special spotlight on our AI buddy, GitHub Copilot. Today, I'm excited to share some super cool tips on how to chat with Copilot through comments. Yes, you read that right! We're gonna learn how to make this AI tool our best coding companion yet. So, let's dive into these tips, complete with examples and what to expect from Copilot‚Äôs magical code generation.</p>
<h2 id="clearly-define-functionality">1. Clearly Define Functionality</h2>
<p><strong>Example:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Function to calculate the factorial of a number</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>Copilot's Response:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (n === <span class="number">0</span> || n === <span class="number">1</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>Result: A simple factorial function - concise and to the point.</em></p>
<h2 id="specify-api-requests">2. Specify API Requests</h2>
<p><strong>Example:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Function to make a GET request to &#x27;https://api.example.com/data&#x27; and return the JSON response</span></span><br></pre></td></tr></table></figure>
<p><strong>Copilot's Response:</strong></p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>():</span></span><br><span class="line">    response = requests.get(<span class="string">&#x27;https://api.example.com/data&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> response.json()</span><br></pre></td></tr></table></figure>
<p><em>Result: A Python function for making a GET request and parsing the JSON response.</em></p>
<h2 id="outline-error-handling">3. Outline Error Handling</h2>
<p><strong>Example:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Try-catch block to handle SQLException in a database query</span></span><br></pre></td></tr></table></figure>
<p><strong>Copilot's Response:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// database query code</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>Result: A template for a try-catch block, ready to be filled with specific query code.</em></p>
<h2 id="guide-data-parsing">4. Guide Data Parsing</h2>
<p><strong>Example:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Parse the following JSON string into a JavaScript object: &#x27;&#123;&quot;name&quot;:&quot;John&quot;, &quot;age&quot;:30, &quot;city&quot;:&quot;New York&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p><strong>Copilot's Response:</strong> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> jsonString = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;John&quot;, &quot;age&quot;:30, &quot;city&quot;:&quot;New York&quot;&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> parsedObject = <span class="built_in">JSON</span>.parse(jsonString);</span><br><span class="line"><span class="built_in">console</span>.log(parsedObject);</span><br></pre></td></tr></table></figure> <em>Result: A straightforward JSON parsing example in JavaScript.</em></p>
<h2 id="regular-expressions">5. Regular Expressions</h2>
<p><strong>Example:</strong> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Regular expression to validate an email address format</span></span><br></pre></td></tr></table></figure> <strong>Copilot's Response:</strong> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">email_regex = <span class="string">r&#x27;\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]&#123;2,&#125;\b&#x27;</span></span><br></pre></td></tr></table></figure> <em>Result: A Python regex pattern for email validation.</em></p>
<h2 id="request-algorithms">6. Request Algorithms</h2>
<p><strong>Example:</strong> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Implement a binary search algorithm for a sorted array of integers</span></span><br></pre></td></tr></table></figure> <strong>Copilot's Response:</strong> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binarySearch</span>(<span class="params">arr, x, start, end</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (start &gt; end) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   <span class="keyword">let</span> mid=<span class="built_in">Math</span>.floor((start + end)/<span class="number">2</span>);</span><br><span class="line">   <span class="keyword">if</span> (arr[mid]===x) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   <span class="keyword">if</span>(arr[mid] &gt; x) <span class="keyword">return</span> binarySearch(arr, x, start, mid-<span class="number">1</span>);</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">return</span> binarySearch(arr, x, mid+<span class="number">1</span>, end);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <em>Result: A binary search function, encapsulating the classic algorithm.</em></p>
<h2 id="validate-user-input">7. Validate User Input</h2>
<p><strong>Example:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Validate user input to ensure it&#x27;s an integer between 1 and 100</span></span><br></pre></td></tr></table></figure>
<p><strong>Copilot's Response:</strong> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (userInput &gt;= <span class="number">1</span> &amp;&amp; userInput &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">   <span class="comment">// valid input</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="comment">// invalid input</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <em>Result: A basic Java condition to check the range of user input.</em></p>
<h2 id="css-for-responsiveness">8. CSS for Responsiveness</h2>
<p><strong>Example:</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* CSS to make an image responsive with a max-width of 100% and height auto */</span></span><br></pre></td></tr></table></figure>
<p><strong>Copilot's Response:</strong> <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">   <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">   <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <em>Result: A CSS snippet to make images responsive.</em></p>
<h2 id="database-queries">9. Database Queries</h2>
<p><strong>Example:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- SQL query to select name, age from users table where age is greater than 20</span></span><br></pre></td></tr></table></figure>
<p><strong>Copilot's Response:</strong> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, age <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> age &gt; <span class="number">20</span>;</span><br></pre></td></tr></table></figure> <em>Result: A straightforward SQL query for user data filtering.</em></p>
<h2 id="react-state-management">10. React State Management</h2>
<p><strong>Example:</strong> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// React function component with useState hook for managing a &#x27;counter&#x27; state initialized at 0</span></span><br></pre></td></tr></table></figure> <strong>Copilot's Response:</strong> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CounterComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">const</span> [counter, setCounter] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> (</span><br><span class="line">      <span class="comment">// JSX for the counter</span></span><br><span class="line">   );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <em>Result: A React functional component template using the useState hook.</em></p>
<h2 id="wrapping-it-up">Wrapping It Up!</h2>
<p>Writing effective comments for GitHub Copilot is like providing clear instructions to a smart assistant. Remember, the trick is to be clear, be descriptive, and sometimes, just have a little fun with your comments. With these tips, you're all set to make Copilot your trusty coding sidekick. Happy coding, and may your bugs be few and your coffee strong! ‚òïüöÄüë©‚Äçüíªüë®‚Äçüíª</p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Software Development</category>
        <category>Developer Tools and Resources</category>
        <category>Programming Best Practices</category>
      </categories>
      <tags>
        <tag>Software Development</tag>
        <tag>Developer Tools</tag>
        <tag>GitHub Copilot</tag>
        <tag>AI Coding</tag>
        <tag>Copilot Tips</tag>
        <tag>AI Programming</tag>
        <tag>Code Automation</tag>
        <tag>Coding Efficiency</tag>
        <tag>Programming Tips</tag>
        <tag>Tech Blogging</tag>
      </tags>
  </entry>
  <entry>
    <title>Maximizing Efficiency with GitHub Copilot: A Python Developer&#39;s Guide</title>
    <url>/2023/12/20/Maximizing-Efficiency-with-GitHub-Copilot-A-Python-Developer-s-Guide/</url>
    <content><![CDATA[<p>As a technical architect deeply engaged in the evolving landscape of development tools, I've been exploring GitHub Copilot's capabilities. This AI-powered coding assistant from GitHub and OpenAI has offered both intriguing advantages and notable challenges. Below, I share my perspectives, enriched with a Python coding example to illustrate Copilot's practical application.</p>
<p><img src="/images/2023-12-20/003.jpeg" style="max-height: 540px;"></p>
<h1 id="advantages-of-github-copilot">Advantages of GitHub Copilot</h1>
<p><strong>Enhanced Code Efficiency</strong></p>
<p>Copilot has been instrumental in speeding up my coding process. While working on a Python script, I began typing a function to parse JSON data, and Copilot instantly suggested the complete function, significantly reducing my coding time.</p>
<p><strong>Broad Language and Framework Support</strong></p>
<p>I value Copilot's ability to assist across various languages. Whether it's Python, JavaScript, or Go, the tool provides relevant and useful code suggestions.</p>
<p><strong>Learning and Adaptability</strong></p>
<p>Copilot's adaptability to my coding style is impressive. It picks up on my coding patterns and preferences, offering personalized suggestions.</p>
<p><strong>Automated Code Refactoring and Testing</strong></p>
<p>Copilot's ability to suggest code refactoring and test cases is a significant advantage. It recently proposed a more efficient algorithm for a data processing function I was refining.</p>
<a id="more"></a>
<h1 id="challenges-with-github-copilot">Challenges with GitHub Copilot</h1>
<p><strong>Accuracy and Reliability Concerns</strong></p>
<p>Despite its usefulness, Copilot‚Äôs suggestions require careful scrutiny. For instance, it once recommended a Python snippet that was syntactically correct but not the most efficient approach.</p>
<p><strong>Security and Privacy Considerations</strong></p>
<p>Security is a paramount concern with Copilot‚Äôs suggestions, particularly when handling sensitive data. I always double-check its code for potential vulnerabilities.</p>
<p><strong>Risk of Overreliance</strong></p>
<p>Relying too much on Copilot, especially for beginners, might hinder the development of essential coding skills.</p>
<p><strong>Subscription Costs</strong></p>
<p>The potential cost of Copilot is a factor to consider, particularly for small teams or individual developers.</p>
<h1 id="my-experience-with-copilot-a-python-example">My Experience with Copilot: A Python Example</h1>
<p>Let's look at a practical example. I was writing a Python function to fetch data from an API and process it. After defining the function name and parameters, Copilot suggested the entire function body, including error handling and JSON parsing, which was remarkably close to what I needed. Here's a simplified version of that suggestion:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch_and_process_data</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        response.raise_for_status()</span><br><span class="line">        data = response.json()</span><br><span class="line">        <span class="comment"># Process data</span></span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    <span class="keyword">except</span> requests.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;Error fetching data: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>This example illustrates how Copilot can significantly speed up writing standard functionalities, though I still reviewed and tweaked the code to fit the specific requirements of my project.</p>
<h1 id="conclusion">Conclusion</h1>
<p>In my journey with GitHub Copilot, I've found it to be a valuable asset in coding, especially for rapid prototyping and mundane tasks. However, its limitations, particularly in terms of accuracy and security implications, necessitate a balanced approach. By using Copilot as an assistant rather than a replacement for core programming skills, I believe developers can maximize its benefits while maintaining high standards in code quality and security.</p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
        <category>Software Development</category>
        <category>Programming Tools and Resources</category>
        <category>Technology Innovation</category>
        <category>Developer Productivity</category>
      </categories>
      <tags>
        <tag>GitHub Copilot</tag>
        <tag>AI Coding Assistant</tag>
        <tag>Python Development</tag>
        <tag>Code Automation Tools</tag>
        <tag>Programming Productivity</tag>
        <tag>AI in Software Development</tag>
        <tag>GitHub Tools</tag>
        <tag>Machine Learning in Coding</tag>
        <tag>Developer Efficiency</tag>
        <tag>Code Completion Technology</tag>
        <tag>AI-Powered Development</tag>
        <tag>Advanced Coding Assistance</tag>
        <tag>GitHub Copilot Features</tag>
        <tag>Coding Best Practices</tag>
        <tag>Technology Innovation</tag>
      </tags>
  </entry>
  <entry>
    <title>Ng√†y gi√£n c√°ch ·ªü S√†i G√≤n</title>
    <url>/2021/07/18/Ngay-gian-cach-o-Sai-Gon/</url>
    <content><![CDATA[<p>S·ªëng ·ªü S√†i G√≤n h∆°n ch·ª•c nƒÉm, t√¥i ƒë√£ r·∫•t quen v·ªõi khung c·∫£nh ph·ªìn hoa n√°o nhi·ªát c·ªßa m·ªôt th√†nh ph·ªë tr·∫ª ƒë·∫ßy s·ª©c s·ªëng. NƒÉm nay, c∆°n s√≥ng COVID-19 l·∫°i m·ªôt l·∫ßn n·ªØa ph·ªß xu·ªëng S√†i G√≤n, m√† l·∫ßn n√†y m·ªçi chuy·ªán tr·ªü n√™n nghi√™m tr·ªçng h∆°n nƒÉm ngo√°i nhi·ªÅu. ƒê√£ h∆°n hai th√°ng t√¥i ch∆∞a ra kh·ªèi nh√†, k·ªÉ t·ª´ l√∫c d·ªãch b·ªánh b·∫Øt ƒë·∫ßu di·ªÖn bi·∫øn ph·ª©c t·∫°p bu·ªôc c√¥ng ty ph·∫£i y√™u c·∫ßu m·ªçi ng∆∞·ªùi "Work From Home".</p>
<a id="more"></a>
<p>M·ªói ng√†y, t√¥i d·∫≠y s·ªõm, t·ª± tay m√¨nh l√†m m·ªôt ly c√† ph√™ Expresso b·∫±ng m·ªôt chi·∫øc m√°y pha c√† ph√™ mini c·∫ßm tay m√† v·ª£ t√¥i hay g·ªçi vui l√† "C√† Ph√™ B√≥p". Nh·ªù n√≥ m√† ly c√† ph√™ ƒë·∫≠m ƒë√† kh√¥ng thua k√©m g√¨ nh·ªØng qu√°n c√† ph√™ sang ch·∫£nh. Dƒ© nhi√™n, h∆∞∆°ng v·ªã v·∫´n kh√¥ng th·ªÉ so s√°nh ƒë∆∞·ª£c v·ªõi ly c√† ph√™ do ch√≠nh tay v·ª£ t√¥i pha cho, b·ªüi c√¥ ·∫•y t·ªâ m·ªâ chu·∫©n b·ªã t·ª´ kh√¢u cho c√† ph√™ nguy√™n h·∫°t t·ª´ t·ª´ v√†o m√°y xay ƒë·ªÉ cho ra ƒë·ªô m·ªãn chu·∫©n x√°c, cho ƒë·∫øn kh√¢u pha ch·∫ø v·ªõi m·ªôt l∆∞·ª£ng "t·ªâ l·ªá v√†ng" c√† ph√™ xay v√† n∆∞·ªõc n√≥ng, v·ª´a ƒë·ªß ƒë·ªÉ cho ra ly c√† ph√™ ƒë·∫≠m ƒë√† kh√¥ng ƒë√¢u s√°nh b·∫±ng, v·ª´a u·ªëng, kh√¥ng nhi·ªÅu kh√¥ng √≠t. C√¥ ·∫•y ƒë√£ g·ª£i √Ω pha c√† ph√™ c√πng v·ªõi m·ªôt mu·ªóng m·∫≠t ong, qu·∫£ th·∫≠t khi·∫øn t√¥i u·ªëng v√†o th√≠ch ngay v√† cho ƒë·∫øn t·∫≠n b√¢y gi·ªù. Tuy nhi√™n, kh√¥ng ph·∫£i ng√†y n√†o v·ª£ t√¥i c≈©ng c√≥ th·ªùi gian ƒë·ªÉ pha ch·∫ø v√†o bu·ªïi s·ªõm. C√¥ ·∫•y th∆∞·ªùng xuy√™n b·∫≠n r·ªôn v·ªõi c√°c c√¥ng vi·ªác nh√† c·ª≠a, chƒÉm s√≥c con c√°i m√† nhi·ªÅu ƒë√™m m·∫•t ng·ªß ho·∫∑c ng·ªß kh√¥ng ƒë·ªß gi·∫•c. V·∫≠y n√™n, t√¥i ƒë·ªÉ v·ª£ ng·ªß n∆∞·ªõng th√™m m·ªôt ch√∫t, vi·ªác pha c√† ph√™ t√¥i c≈©ng ƒë√£ c√≥ "ƒë·ªì ch∆°i" c·ªßa m√¨nh.</p>
<p><img src="/images/2021-07-18/001.jpg"></p>
<p>T√¨nh h√¨nh ng√†y m·ªôt cƒÉng th·∫≥ng khi d·ªãch b·ªánh b·∫Øt ƒë·∫ßu t·∫•n c√¥ng c√°c ch·ª£ ƒë·∫ßu m·ªëi n√™n b·ªã ch√≠nh quy·ªÅn y√™u c·∫ßu t·∫°m th·ªùi ƒë√≥ng c·ª≠a, khi·∫øn cho vi·ªác mua th·ª±c ph·∫©m t∆∞∆°i s·ªëng tr·ªü n√™n kh√≥ khƒÉn h∆°n. Th√™m v√†o ƒë√≥, do nhi·ªÅu ng∆∞·ªùi t√¢m l√Ω lo l·∫Øng, ho·∫£ng lo·∫°n, n√™n h·ªç ƒë√£ mua nhi·ªÅu h∆°n ng√†y th∆∞·ªùng ƒë·ªÉ t√≠ch tr·ªØ, ph·∫ßn c≈©ng v√¨ ngu·ªìn cung v√† v·∫≠n chuy·ªÉn tr·ªü n√™n kh√≥ khƒÉn do gi√£n c√°ch. ƒê√£ h∆°n tu·∫ßn nay, t√¥i ch∆∞a nh√¨n th·∫•y qu·∫£ tr·ª©ng n√†o, m·∫∑c d√π v·∫´n c√≥ th·ªÉ mua ƒë∆∞·ª£c m·ªôt √≠t th·ªãt, rau, nh∆∞ng c≈©ng kh√° ch·∫≠t v·∫≠t x·∫øp h√†ng. C√°c qu√°n ƒÉn quan n∆∞·ªõc c≈©ng b·ªã ƒë√≥ng c·ª≠a. Th√¢t may m·∫Øn l√† v·ª£ t√¥i n·∫•u ƒÉn r·∫•t ngon, nh∆∞ng l√¢u r·ªìi kh√¥ng order ƒë∆∞·ª£c ƒë·ªì ƒÉn ngo√†i n√™n kh√° l√† th√®m c√°c m√≥n nh∆∞ b√∫n th√°i, ph·ªü b√≤, m√¨ ho√†nh th√°nh, h·ªß ti·∫øu nam vang, pizza v√† g√† r√°n,... R·ªìi m·ªôt ng√†y n·ªç, ch√≠nh quy·ªÅn y√™u c·∫ßu m·ªçi ng∆∞·ªùi ƒëi x√©t nghi·ªám ƒë·ªÉ t·∫ßm so√°t Covid tr√™n di·ªán r·ªông, v·ª£ ch·ªìng t√¥i c≈©ng thay phi√™n nhau ra x·∫øp h√†ng, tr·∫£i nghi√™m c√°i c·∫£m gi√°c b·ªã ch·ªçc v√†o m≈©i th·∫≠t l√† th·ªën kh√¥ng th·ªÉ t·∫£.</p>
<p>Trong th·ªùi gian hai th√°ng WFH n√†y, t√¥i ph·∫£i l√†m vi·ªác online, v√† do ƒë√£ kh√° quen n√™n c√¥ng vi·ªác v·∫´n tr√¥i ch·∫£y. T√¥i c≈©ng c√≥ nhi·ªÅu th·ªùi gian h∆°n ƒë·ªÉ ch∆°i v·ªõi con, tr√≤ chuy·ªán v·ªõi v·ª£. Donnie ƒë√£ bi·∫øt ƒëi t·ª´ khi tr√≤n 11 th√°ng, nh∆∞ng t·ªõi nay v·∫´n ch∆∞a ƒë∆∞·ª£c ra ngo√†i d·∫°o ch∆°i m√† ch·ªâ ƒëi quanh qu·∫©n trong nh√†, t√¥i ƒëo√°n cu c·∫≠u c≈©ng th·∫•y bu·ªìn ch√°n n·ªØa l√†. Khi t√¥i ƒëang l√†m vi·ªác th√¨ cu c·∫≠u c·ª© hay ch·∫°y ƒë·∫øn √¥m ch√¢n k√©o k√©o ƒë√≤i ·∫≥m. L√¢u r·ªìi kh√¥ng ra ngo√†i d·∫°o ph·ªë, h√≠t th·ªü kh√¥ng kh√≠, khi·∫øn t√¥i c≈©ng th·∫•y bu·ªìn b·ª±c, cƒÉng th·∫≥ng v·ªõi c√¥ng vi·ªác. T√¥i kh√° nh·ªõ nh·ªØng l√∫c ra si√™u th·ªã mua s·∫Øm c√πng v·ª£, hay khi ng·ªìi qu√°n c√† ph√™, qu√°n ƒÉn y√™u th√≠ch c√πng chuy·ªán tr√≤ c√πng b·∫°n b√®, nh√¢m nhi v√†i ly bia t∆∞∆°i, lai rai nh·∫Øm ƒë·ªì n∆∞·ªõng. Gi·ªù ƒë√¢y nh·ªØng ng√†y cu·ªëi tu·∫ßn, t√¥i ch·ªâ c√≤n bi·∫øt chƒÉm s√≥c c√¢y, ƒë·ªçc s√°ch hay nghe s√°ch n√≥i, luy·ªán ƒë√†n ghi-ta, th·ªânh tho·∫£ng gi√∫p v·ª£ r·ª≠a ch√©n, d·ªçn r√°c. T√¥i ƒë√£ d∆∞·ªùng nh∆∞ kh√¥ng c√≤n t√¨m ƒë∆∞·ª£c ni·ªÅm vui v·ªõi phim ·∫£nh n·ªØa, ph·∫£i chƒÉng m√¨nh ƒë√£ gi√†?!</p>
<p>D·ªãch b·ªánh c≈©ng nhanh ch√≥ng lan v√†o c√°c khu c√¥ng nghi·ªáp khi·∫øn nhi·ªÅu ng∆∞·ªùi ph·∫£i t·∫°m th·ªùi th·∫•t nghi·ªáp, t√¥i kh√° may m·∫Øn v√¨ l√†m trong ng√†nh c√¥ng ngh·ªá n√™n kh√¥ng b·ªã ·∫£nh h∆∞·ªüng. Nh∆∞ng r·∫•t nhi·ªÅu ng∆∞·ªùi kh√¥ng may m·∫Øn ƒë·∫øn v·∫≠y, h·∫ßu h·∫øt ƒë√£ ph·∫£i t·∫°m ngh·ªâ kh√¥ng l∆∞∆°ng khi·∫øn cu·ªôc s·ªëng tr·ªü n√™n kh√≥ khƒÉn h∆°n. D·ªãch b·ªánh kh√¥ng ch·ªâ ·ªü S√†i G√≤n, m√† c√≤n l√¢y sang c√°c t·ªânh l√¢n c·∫≠n, ƒë·∫∑c bi·ªát l√† B√¨nh D∆∞∆°ng, qu√™ c·ªßa v·ª£ t√¥i. T√¥i c·∫£m th·∫•y r·∫•t hoang mang khi nghe tin ba v·ª£ b·ªã ƒë∆∞a ƒëi c√°ch ly v√¨ ti·∫øp x√∫c v·ªõi F0, r·∫•t may l√† sau 21 ng√†y trong tr·∫°i c√°ch ly, √¥ng ·∫•y ƒë√£ c√≥ k·∫øt qu·∫£ √¢m t√≠nh v·ªõi Covid-19 v√† ƒë∆∞·ª£c v·ªÅ nh√†. Th·∫ø nh∆∞ng m·ªôt v√†i ng∆∞·ªùi ·ªü chung tr·∫°i v·ªõi √¥ng l·∫°i kh√¥ng ƒë∆∞·ª£c may m·∫Øn v·∫≠y, h·∫ßu h·∫øt ƒë√£ b·ªã x√°c ƒë·ªãnh l√† d∆∞∆°ng t√≠nh v√† nh·∫≠p vi·ªán ƒëi·ªÅu tr·ªã; ·ªü khu c√°ch ly c√≥ m·ªôt c√¥ trung ni√™n v√¨ ch·ªß quan, kh√¥ng tu√¢n th·ªß ƒë·ªß quy t·∫Øc 5K, th√™m n·ªØa v√¨ kh√¥ng ƒÉn ƒë∆∞·ª£c ƒë·ªì ƒÉn ·ªü ƒë·∫•y d·∫´n ƒë·∫øn s·ª©c ƒë·ªÅ kh√°ng suy gi·∫£m, t·∫°o ƒëi·ªÅu ki·ªán cho vi r√∫t ph√°t tri·ªÉn nhanh ch√≥ng, t√¨nh tr·∫°ng chuy·ªÉn bi·∫øn x·∫•u v√† qua ƒë·ªùi ngay khi ƒë∆∞·ª£c ph√°t hi·ªán v√† ƒë∆∞a v√†o nh·∫≠p vi√™n. Anh v·ª£ s·ªëng ·ªü B√¨nh D∆∞∆°ng (t√¥i hay g·ªçi l√† anh ba) c≈©ng ph·∫£i v√†o c√¥ng ty ƒÉn ng·ªß t·∫°i ch·ªó ƒë·ªÉ tr√°nh l√¢y lan d·ªãch b·ªánh. C√≤n m·ªôt anh kh√°c c≈©ng s·ªëng ·ªü S√†i G√≤n (t√¥i hay g·ªçi l√† anh hai) ƒë√£ ngh·ªâ d·∫°y kh√¥ng l∆∞∆°ng ƒë∆∞·ª£c h∆°n th√°ng nh∆∞ng anh ph·∫£i nu√¥i c·∫£ gia ƒë√¨nh m·ªôt v·ª£ hai con n√™n ph·∫£i ƒëi vay m∆∞·ª£n th√™m ƒë·ªÉ v∆∞·ª£t qua. D·ªãch b·ªánh c≈©ng ƒë√£ l√¢y lan l√™n qu√™ h∆∞∆°ng L√¢m ƒê·ªìng - ƒê√† L·∫°t c·ªßa t√¥i, v√¨ nghe tin ca d∆∞∆°ng t√≠nh g·∫ßn nh√†, m·∫π t√¥i trong l√∫c ƒëi mua th·ª±c ph·∫©m d·ª± tr·ªØ ƒë√£ ƒë·ª•ng xe v√†o m·ªôt ch√∫ ch√≥ b·∫•t ng·ªù ch·∫°y qua ƒë∆∞·ªùng. May m·∫Øn l√† m·∫π t√¥i ch·∫°y ch·∫≠m n√™n ch·ªâ b·ªã s√¢y x√°t nh·∫π.</p>
<p>Qua nh·ªØng vi·ªác t√¥i k·ªÉ cho th·∫•y c∆°n s√≥ng Covid-19 n√†y di·ªÖn ra g·∫ßn gi·ªëng nh∆∞ t√¨nh ti·∫øt c√°c b·ªô phim khoa h·ªçc gi·∫£ t∆∞·ªüng v·ªÅ ch·ªß ƒë·ªÅ th·∫£m ho·∫°, m·ªôt khi x·∫£y ra li·ªÅn k√©o theo nhi·ªÅu h√™ lu·ªµ kh√¥ng l∆∞·ªùng tr∆∞·ªõc ƒë∆∞·ª£c. Nhi·ªÅu ng∆∞·ªùi xung quanh khu t√¥i s·ªëng hay n√≥i c√¢u "tr·ªùi k√™u ai n·∫•y d·∫°", ngay c·∫£ ng∆∞·ªùi ƒëi ƒë∆∞·ªùng t√¨nh c·ªù b·ªã y√™u c·∫ßu ki·ªÉm tra nhanh c≈©ng ph√°t hi·ªán d∆∞∆°ng t√≠nh v·ªõi Covid-19. M·∫•y ng√†y nay, ng√†y n√†o S√†i G√≤n c≈©ng tƒÉng trung b√¨nh h∆°n 2000 ca nhi·ªÖm. V·ª£ t√¥i l√† ng∆∞·ªùi tr·ª±c ti·∫øp ƒëi mua th·ª±c ph·∫©m cho c·∫£ nh√†, t√¥i lu√¥n d·∫∑n c√¥ ·∫•y ph·∫£i ch√∫ √Ω v·ªá sinh s√°t khu·∫©n, d√π t√¥i bi·∫øt c√¥ ·∫•y kh√° c·∫©n tr·ªçng, t√¥i kh√¥ng th·ªÉ t∆∞·ªüng t∆∞·ª£ng ƒë∆∞·ª£c gia ƒë√¨nh t√¥i s·∫Ω ra sao n·∫øu ph·∫£i ƒëi c√°ch ly, v√¨ Donnie c√≤n qu√° nh·ªè.</p>
<p>Hy v·ªçng d·ªãch b·ªánh nhanh ch√≥ng qua ƒëi, t√¥i s·∫Ω xin nghi ph√©p m·ªôt th·ªùi gian ƒë·ªÉ ƒë∆∞a gia ƒë√¨nh ƒëi ng·∫Øm bi·ªÉn, ng·∫Øm n√∫i ƒë·ªÉ gi·∫£i to·∫£ c·∫£m gi√°c b√≠ b√°ch l√∫c n√†y.</p>
]]></content>
      <categories>
        <category>Living</category>
      </categories>
      <tags>
        <tag>Living</tag>
        <tag>Family</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas Efficient Data Storage Benchmark</title>
    <url>/2021/07/10/Pandas-Efficient-Data-Storage-Benchmark/</url>
    <content><![CDATA[<p>Do you agree that dealing with large data file is such a painful task? If yes, then you shouldn't ignore this post! In this post, I'll show you which is the best storage format to work with if you are using <code>Pandas</code>. Is it <code>csv</code>, <code>hdf5</code> or <code>parquet</code>? Let's find out.</p>
<a id="more"></a>
<p>First of all, we import some python packages that we will use in this benchmark</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="comment"># Store the result</span></span><br><span class="line">resutls = &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>Let's define this function to generate random data</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_test_data</span>(<span class="params">nrows=<span class="number">10000</span>, numerical_cols=<span class="number">2000</span>, text_cols=<span class="number">0</span>, text_length=<span class="number">10</span></span>):</span></span><br><span class="line">    s = <span class="string">&quot;&quot;</span>.join([random.choice(string.ascii_letters)</span><br><span class="line">                 <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(text_length)])</span><br><span class="line">    data = pd.concat([pd.DataFrame(np.random.random(size=(nrows, numerical_cols))),</span><br><span class="line">                      pd.DataFrame(np.full(shape=(nrows, text_cols), fill_value=s))],</span><br><span class="line">                     axis=<span class="number">1</span>, ignore_index=<span class="literal">True</span>)</span><br><span class="line">    data.columns = [<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> data.columns]</span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>
<h1 id="mixed-data-type">1. Mixed Data Type</h1>
<p>The first benchmark uses data that contains both text and numeric values.</p>
<h2 id="generate-test-data">1.1. Generate test data</h2>
<p>Now generate 50,000 rows, 1000 cols (500 is numerical, 500 is text)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;  df = generate_test_data(nrows=<span class="number">50000</span>, numerical_cols=<span class="number">500</span>, text_cols=<span class="number">500</span>)</span><br><span class="line">&gt;  df.info()</span><br><span class="line"></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"><span class="title">RangeIndex</span>:</span> <span class="number">50000</span> entries, <span class="number">0</span> to <span class="number">49999</span></span><br><span class="line">Columns: <span class="number">1000</span> entries, <span class="number">0</span> to <span class="number">999</span></span><br><span class="line">dtypes: float64(<span class="number">500</span>), <span class="built_in">object</span>(<span class="number">500</span>)</span><br><span class="line">memory usage: <span class="number">381.5</span>+ MB</span><br></pre></td></tr></table></figure>
<h2 id="parquet">1.2. Parquet</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parquet_file = Path(<span class="string">&#x27;test.parquet&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="file-size">File Size</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.to_parquet(parquet_file)</span><br><span class="line">size = parquet_file.stat().st_size</span><br></pre></td></tr></table></figure>
<h3 id="read">Read</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%timeit -o</span><br><span class="line">df = pd.read_parquet(parquet_file)</span><br></pre></td></tr></table></figure>
<p><em>2.54 s ¬± 137 ms per loop (mean ¬± std. dev. of 7 runs, 1 loop each)</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Record the read result</span></span><br><span class="line">read = _</span><br><span class="line"></span><br><span class="line"><span class="comment"># Delete the test file</span></span><br><span class="line">parquet_file.unlink()</span><br></pre></td></tr></table></figure>
<h3 id="write">Write</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%timeit -o</span><br><span class="line"></span><br><span class="line">df.to_parquet(parquet_file)</span><br><span class="line">parquet_file.unlink()</span><br></pre></td></tr></table></figure>
<p><em>11.1 s ¬± 154 ms per loop (mean ¬± std. dev. of 7 runs, 1 loop each)</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Record the write result</span></span><br><span class="line">write = _</span><br></pre></td></tr></table></figure>
<h3 id="results">Results</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results[<span class="string">&#x27;Parquet&#x27;</span>] = &#123;</span><br><span class="line">    <span class="string">&#x27;read&#x27;</span>: np.mean(read.all_runs), </span><br><span class="line">    <span class="string">&#x27;write&#x27;</span>: np.mean(write.all_runs), </span><br><span class="line">    <span class="string">&#x27;size&#x27;</span>: size&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;Parquet&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">2.5449909000002924</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">11.076020042857376</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">250677616</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="hdf5">1.3. HDF5</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_store = Path(<span class="string">&#x27;index.h5&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="fixed-format">1.3.1. Fixed Format</h3>
<p>Support fast writing/reading. Not-appendable, nor searchable.</p>
<h4 id="file-size-1">File Size</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> pd.HDFStore(test_store) <span class="keyword">as</span> store:</span><br><span class="line">    store.put(<span class="string">&#x27;file&#x27;</span>, df)</span><br><span class="line">size = test_store.stat().st_size</span><br></pre></td></tr></table></figure>
<h4 id="read-1">Read</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%timeit -o</span><br><span class="line"><span class="keyword">with</span> pd.HDFStore(test_store) <span class="keyword">as</span> store:</span><br><span class="line">    store.get(<span class="string">&#x27;file&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><em>2min 6s ¬± 1.41 s per loop (mean ¬± std. dev. of 7 runs, 1 loop each)</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">read = _</span><br><span class="line">test_store.unlink()</span><br></pre></td></tr></table></figure>
<h4 id="write-1">Write</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%timeit -r <span class="number">1</span> -o</span><br><span class="line"><span class="keyword">with</span> pd.HDFStore(test_store) <span class="keyword">as</span> store:</span><br><span class="line">    store.put(<span class="string">&#x27;file&#x27;</span>, df)</span><br><span class="line">test_store.unlink()</span><br></pre></td></tr></table></figure>
<p><em>18.1 s ¬± 0 ns per loop (mean ¬± std. dev. of 1 run, 1 loop each)</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">write = _</span><br></pre></td></tr></table></figure>
<h4 id="results-1">Results</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results[<span class="string">&#x27;HDF Fixed&#x27;</span>] = &#123;</span><br><span class="line">    <span class="string">&#x27;read&#x27;</span>: np.mean(read.all_runs), </span><br><span class="line">    <span class="string">&#x27;write&#x27;</span>: np.mean(write.all_runs), </span><br><span class="line">    <span class="string">&#x27;size&#x27;</span>: size&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;Parquet&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">2.5449909000002924</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">11.076020042857376</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">250677616</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;HDF Fixed&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">126.0261167285714</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">18.103147300000273</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">526559612</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="table-format">1.3.2 Table Format</h3>
<p>Write as a PyTables Table structure which may perform worse but allow more flexible operations like searching / selecting subsets of the data.</p>
<h4 id="file-size-2">File Size</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> pd.HDFStore(test_store) <span class="keyword">as</span> store:</span><br><span class="line">    store.append(<span class="string">&#x27;file&#x27;</span>, df, <span class="built_in">format</span>=<span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">size = test_store.stat().st_size  </span><br></pre></td></tr></table></figure>
<h4 id="read-2">Read</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%timeit -o</span><br><span class="line"><span class="keyword">with</span> pd.HDFStore(test_store) <span class="keyword">as</span> store:</span><br><span class="line">    df = store.get(<span class="string">&#x27;file&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><em>36.9 s ¬± 174 ms per loop (mean ¬± std. dev. of 7 runs, 1 loop each)</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">read = _</span><br><span class="line">test_store.unlink()</span><br></pre></td></tr></table></figure>
<h4 id="write-2">Write</h4>
<p>Note that <code>write</code> in table format does not work with text data.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%timeit -r <span class="number">1</span> -o</span><br><span class="line"><span class="keyword">with</span> pd.HDFStore(test_store) <span class="keyword">as</span> store:</span><br><span class="line">    store.append(<span class="string">&#x27;file&#x27;</span>, df, <span class="built_in">format</span>=<span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">test_store.unlink() </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><em>50.7 s ¬± 0 ns per loop (mean ¬± std. dev. of 1 run, 1 loop each)</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">write = _</span><br></pre></td></tr></table></figure>
<h4 id="results-2">Results</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results[<span class="string">&#x27;HDF Table&#x27;</span>] = &#123;<span class="string">&#x27;read&#x27;</span>: np.mean(read.all_runs), <span class="string">&#x27;write&#x27;</span>: np.mean(write.all_runs), <span class="string">&#x27;size&#x27;</span>: size&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;Parquet&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">2.5449909000002924</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">11.076020042857376</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">250677616</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;HDF Fixed&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">126.0261167285714</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">18.103147300000273</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">526559612</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;HDF Table&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">36.89537138571411</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">50.74519110000074</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">450753287</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="csv">1.4. CSV</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_csv = Path(<span class="string">&#x27;test.csv&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="file-size-3">File Size</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.to_csv(test_csv)</span><br><span class="line">test_csv.stat().st_size</span><br></pre></td></tr></table></figure>
<h3 id="read-3">Read</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%timeit -o</span><br><span class="line">df = pd.read_csv(test_csv)</span><br></pre></td></tr></table></figure>
<p><em>19.2 s ¬± 642 ms per loop (mean ¬± std. dev. of 7 runs, 1 loop each)</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">read = _</span><br><span class="line">test_csv.unlink()  </span><br></pre></td></tr></table></figure>
<h3 id="write-3">Write</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%timeit -o</span><br><span class="line">df.to_csv(test_csv)</span><br><span class="line">test_csv.unlink()</span><br></pre></td></tr></table></figure>
<p><em>1min 25s ¬± 307 ms per loop (mean ¬± std. dev. of 7 runs, 1 loop each)</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">write = _</span><br></pre></td></tr></table></figure>
<h3 id="results-3">Results</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results[<span class="string">&#x27;CSV&#x27;</span>] = &#123;<span class="string">&#x27;read&#x27;</span>: np.mean(read.all_runs), <span class="string">&#x27;write&#x27;</span>: np.mean(write.all_runs), <span class="string">&#x27;size&#x27;</span>: size&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;Parquet&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">2.5449909000002924</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">11.076020042857376</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">250677616</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;HDF Fixed&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">126.0261167285714</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">18.103147300000273</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">526559612</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;HDF Table&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">36.89537138571411</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">50.74519110000074</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">450753287</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;CSV&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">19.198365685714375</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">85.28064355714274</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">757038275</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="save-the-results">1.5. Save the results</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.DataFrame(results).assign(Data=<span class="string">&#x27;Mixed&#x27;</span>).to_csv(<span class="string">f&#x27;Mixed.csv&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="numeric-data-type">2. Numeric Data Type</h1>
<p>The second benchmark uses only numeric data types.</p>
<h2 id="generate-test-data-1">2.1. Generate test data</h2>
<p>Now generate 50,000 rows, 1000 numeric cols</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;  df = generate_test_data(nrows=<span class="number">50000</span>, numerical_cols=<span class="number">1000</span>, text_cols=<span class="number">0</span>)</span><br><span class="line">&gt;  df.info()</span><br><span class="line"></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"><span class="title">RangeIndex</span>:</span> <span class="number">50000</span> entries, <span class="number">0</span> to <span class="number">49999</span></span><br><span class="line">Columns: <span class="number">1000</span> entries, <span class="number">0</span> to <span class="number">999</span></span><br><span class="line">dtypes: float64(<span class="number">1000</span>)</span><br><span class="line">memory usage: <span class="number">381.5</span> MB</span><br></pre></td></tr></table></figure>
<h2 id="parquet-1">2.2. Parquet</h2>
<blockquote>
<p>Similar to 1.2</p>
</blockquote>
<h3 id="results-4">Results</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;Parquet&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">3.6358330142858386</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">8.220626242857179</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">500764950</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="hdfs">2.3. HDFS</h2>
<h3 id="fixed-format-1">2.3.1. Fixed Format</h3>
<blockquote>
<p>Similar to 1.3.1</p>
</blockquote>
<h4 id="results-5">Results</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;Parquet&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">3.6358330142858386</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">8.220626242857179</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">500764950</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;HDF Fixed&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">2.215434942857038</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">2.988903299999947</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">400411192</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="table-format-1">2.3.2. Table Format</h3>
<blockquote>
<p>Similar to 1.3.2</p>
</blockquote>
<h4 id="results-6">Results</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;Parquet&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">3.6358330142858386</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">8.220626242857179</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">500764950</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;HDF Fixed&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">2.215434942857038</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">2.988903299999947</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">400411192</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;HDF Table&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">1.9255916428573983</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">4.61305960000027</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">400649196</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="csv-1">2.4. CSV</h2>
<blockquote>
<p>Similar to 1.4</p>
</blockquote>
<h3 id="results-7">Results</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;Parquet&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">3.6358330142858386</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">8.220626242857179</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">500764950</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;HDF Fixed&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">2.215434942857038</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">2.988903299999947</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">400411192</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;HDF Table&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">1.9255916428573983</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">4.61305960000027</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">400649196</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;CSV&#x27;</span>: &#123;<span class="string">&#x27;read&#x27;</span>: <span class="number">19.857885385714585</span>,</span><br><span class="line">  <span class="string">&#x27;write&#x27;</span>: <span class="number">126.95752420000021</span>,</span><br><span class="line">  <span class="string">&#x27;size&#x27;</span>: <span class="number">963788438</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<h1 id="results-8">3. Results</h1>
<h2 id="visualization">3.1. Visualization</h2>
<h3 id="read-4">Read</h3>
<p><img height="320" src="/images/2021-07-10/001.png"></p>
<h3 id="write-4">Write</h3>
<p><img height="320" src="/images/2021-07-10/002.png"></p>
<h3 id="file-size-4">File Size</h3>
<p><img height="320" src="/images/2021-07-10/003.png"></p>
<h2 id="so-what">3.2. So what?</h2>
<ul>
<li><code>Parquet</code> is the best option if your data is mixed.</li>
<li><code>HDF5</code> if your data only contains numeric data type.</li>
</ul>
]]></content>
      <categories>
        <category>Benchmark</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pandas</tag>
        <tag>HDF5</tag>
        <tag>Parquet</tag>
        <tag>CSV</tag>
        <tag>Benchmark</tag>
      </tags>
  </entry>
  <entry>
    <title>Rau Y√™u Th∆∞∆°ng</title>
    <url>/2021/08/23/Rau-Yeu-Thuong/</url>
    <content><![CDATA[<p>ƒê√£ g·∫ßn ba th√°ng r·ªìi t√¥i ch∆∞a ƒë∆∞·ª£c ra ƒë∆∞·ªùng, n·∫øu t√¥i kh√¥ng c√≥ c√¥ng vi·ªác th√¨ ƒë√¢y qu·∫£ th·∫≠t l√† m·ªôt kho·∫£ng th·ªùi gian d√†i b·∫ø t·∫Øc, v·∫≠t v√£ ƒë·ªÉ tr·∫£i qua t·ª´ng ng√†y gi√£n c√°ch. B·ªüi t√¨nh h√¨nh Covid-19 v·∫´n c√≤n ph·ª©c t·∫°p v·ªõi s·ªë ca Covid v·∫´n tƒÉng ƒë·ªÅu m·ªói ng√†y, h∆°n n·ªØa c√≥ v·∫ª n√≥ s·∫Ω kh√¥ng gi·∫£m trong v√≤ng m·ªôt th√°ng n·ªØa. Nh·ªØng ng∆∞·ªùi v·ªën ƒë√£ kh√≥ khƒÉn c√†ng tr·ªü n√™n kh√≥ khƒÉn h∆°n n·∫øu t√¨nh h√¨nh v·∫´n kh√¥ng kh√° h∆°n, tuy c√≥ s·ª± h·ªó tr·ª£ c·ªßa ch√≠nh quy·ªÅn nh√† n∆∞·ªõc nh∆∞ng ch·ªâ l√† t·∫°m th·ªùi. Trong ho√†n c·∫£nh n√†y, C√¥ng ty t√¥i ƒë√£ l·∫≠p ra qu·ªπ h·ªó tr·ª£ Covid v√† k√™u g·ªçi m·ªçi th√†nh vi√™n c√¥ng ty ƒë√≥ng g√≥p v√†o qu·ªπ ƒë·ªÉ h·ªó tr·ª£ c√°c b·∫°n ƒë·ªìng nghi·ªáp n·∫øu ch·∫≥ng may tr·ªü th√†nh F0. T√¥i r·∫•t vui ƒë∆∞·ª£c g√≥p m·ªôt ph·∫ßn nh·ªè v√†o c√¥ng t√°c ch·ªëng d·ªãch n√†y. ƒê·ªìng th·ªùi, ƒë·ªÉ kh√≠ch l·ªá tinh th·∫ßn nh√¢n vi√™n l√†m vi·ªác t·∫°i nh√† th·ªùi gian d√†i, c√¥ng ty ti·∫øp t·ª•c m·ªü chi·∫øn d·ªãch "Rau Y√™u Th∆∞∆°ng", g·ª≠i t·ªõi t·∫•t c·∫£ th√†nh vi√™n c√¥ng ty m·ªôt ph·∫ßn qu√† ti·∫øp s·ª©c v∆∞·ª£t qua m√πa d·ªãch.</p>
<a id="more"></a>
<p><img src="/images/2021-08-23/001.jpg"></p>
<p>Th√∫ th·∫≠t l√† t√¥i c·∫£m th·∫•y r·∫•t ·∫•m √°p khi nh·∫≠n ƒë∆∞·ª£c m√≥n qu√† "Rau Y√™u Th∆∞∆°ng" t·ª´ c√¥ng ty, b·ªüi t√¥i c·∫£m nh·∫≠n ƒë∆∞·ª£c t√¨nh c·∫£m, s·ª± quan t√¢m d√†nh cho m√¨nh qua nh·ªØng t√∫i rau, ƒë·∫≠u, qu·∫£, tr√°i, ƒë·ªß d√πng trong nhi·ªÅu ng√†y. Gia ƒë√¨nh t√¥i kh√¥ng thu·ªôc di·ªán kh√≥ khƒÉn, nh∆∞ng trong th·ªùi bu·ªïi d·ªãch b·ªánh ho√†nh h√†nh v·ªõi nh·ªØng ch√≠nh s√°ch h·∫°n ch·∫ø khi·∫øn cho vi·ªác mua ƒë·ªì ƒÉn tr·ªü n√™n ch·∫≠t v·∫≠t h∆°n, v√≠ d·ª• nh∆∞, m·ªôt l√† h√¥m nay kh√¥ng c√≥ m√≥n n√†y m√≥n kia, hai l√† x·∫øp h√†ng ch·ªù mua th·∫≠t l√¢u, t·ªõi l∆∞·ª£t m√¨nh li·ªÅn h·∫øt h√†ng. B√¢y gi·ªù b·∫•t k·ªÉ l√† th·ª±c ph·∫©m t∆∞∆°i s·ªëng g√¨ c≈©ng ƒë·ªÅu r·∫•t qu√Ω gi√°, v·∫≠y n√™n nh·∫≠n ƒë∆∞·ª£c m·ªôt b√≥ rau th√¥i c≈©ng l√† m·ªôt ƒëi·ªÅu v√¥ c√πng ƒë√°ng tr√¢n tr·ªçng.</p>
<p>Ng∆∞·ªùi Vi·ªát c√≥ c√¢u "L√° l√†nh ƒë√πm l√° r√°ch", trong m·ªôt t·∫≠p th·ªÉ, ch√∫ng ta h√£y lu√¥n s·∫µn l√≤ng ƒë∆∞a tay ra gi√∫p ƒë·ª° l·∫´n nhau nh·ªØng l√∫c kh√≥ khƒÉn. T√¥i tin r·∫±ng, v·ªõi tinh th·∫ßn n√†y, ch√∫ng ta s·∫Ω c√πng nhau v∆∞·ª£t qua ƒë∆∞·ª£c ƒë·∫°i d·ªãch Covid, v√† t√¥i mong s·∫Ω s·ªõm ƒë∆∞·ª£c g·∫∑p l·∫°i c√°c b·∫°n ƒë·ªìng nghi·ªáp th√¢n th∆∞∆°ng c·ªßa m√¨nh.</p>
]]></content>
      <categories>
        <category>Living</category>
      </categories>
      <tags>
        <tag>Living</tag>
        <tag>Family</tag>
      </tags>
  </entry>
  <entry>
    <title>R·ªùi Ph·ªë V·ªÅ N√∫i, Ta Chill (P1)</title>
    <url>/2021/11/24/Roi%20Pho%20Ve%20Nui%20Ta%20Chill%20P1/</url>
    <content><![CDATA[<p>11 gi·ªù ƒë√™m. Ng√†y 19.11.21.</p>
<p>H√¥m nay l√† ng√†y cu·ªëi c√πng t√¥i v√† gia ƒë√¨nh nh·ªè ·ªü tr·ªç S√†i G√≤n, v√† ch√∫ng t√¥i c≈©ng kh√¥ng bi·∫øt l·∫ßn g·∫∑p l·∫°i mi·ªÅn ƒë·∫•t n√°o nhi·ªát n√†y l√† khi n√†o n·ªØa. C√≥ th·ªÉ l√† v√†i nƒÉm sau, ho·∫∑c h∆°n.</p>
<a id="more"></a>
<p>R·ªùi ph·ªë v·ªÅ qu√™‚Ä¶ ƒê√¢y l√† m·ªôt b∆∞·ªõc ngo·∫∑t kh√° l·ªõn ƒë·ªëi v·ªõi gia ƒë√¨nh nh·ªè ch√∫ng t√¥i. Ng∆∞·ªùi kh√°c r·ªùi qu√™ l√™n ph·ªë v·ªõi m·ªôt qu·∫£ tim n√≥ng, t√¨m ki·∫øm nh·ªØng c∆° h·ªôi ƒë·ªïi v·∫≠n v√† c√≥ m·ªôt cu·ªôc s·ªëng t·ªët h∆°n. Ch√∫ng t√¥i c≈©ng v·∫≠y, c≈©ng c√≥ m·ªôt qu·∫£ tim n√≥ng, x√¢y ƒë·∫Øp m·ªôt cu·ªôc s·ªëng h·∫°nh ph√∫c, ƒë·ªß ƒë·∫ßy, tho√°i m√°i, nh∆∞ng ch√∫ng t√¥i ƒë·ªß ƒëi·ªÅu ki·ªán ƒë·ªÉ ch·ªçn l·ª±a r·ªùi ph·ªë v·ªÅ qu√™ v√†‚Ä¶ chill.</p>
<p>Ch√∫ng t√¥i ƒë√£ tr·∫£i qua kho·∫£ng th·ªùi gian d√†i t√≠nh b·∫±ng nhi·ªÅu nƒÉm ·ªü th√†nh ph·ªë n√†y, ƒë·ªÉ r·ªìi ƒëi ƒë·∫øn quy·∫øt ƒë·ªãnh th·ª±c hi·ªán b∆∞·ªõc ngo·∫∑t nh∆∞ n√†y. V·ªÅ qu√™, kh√¥ng ph·∫£i l√† t·ª´ b·ªè g√¨ c·∫£, th·∫≠m ch√≠ c√≤n l√† m·ªôt ‚Äúƒëi·ªÉm c·ªông‚Äù. Ch√∫ng t√¥i v·∫´n c√≥ c√¥ng vi·ªác ·ªïn ƒë·ªãnh, c√≥ thu nh·∫≠p, ch·ªâ l√† thay ƒë·ªïi m·ªôt kh√¥ng gian kh√°c b√¨nh y√™n h∆°n, kh√¥ng n∆°i n√†o kh√°c l√† qu√™ cha ƒë·∫•t t·ªï. H∆°n n·ªØa, t√¨nh tr·∫°ng Covid-19 ·ªü th√†nh ph·ªë v·∫´n c√≤n ph·ª©c t·∫°p, ch√∫ng ta ch∆∞a th·ªÉ n√†o y√™n t√¢m ra ƒë∆∞·ªùng v√† sinh ho·∫°t c·ªüi m·ªü b√¨nh th∆∞·ªùng nh∆∞ tr∆∞·ªõc. Sau khi ƒë√≥ng g√≥i ƒë·ªì ƒë·∫°c v√† ƒë∆∞a l√™n xe t·∫£i, ch√∫ng t√¥i l√™n ƒë∆∞·ªùng v·ªÅ qu√™, ch·∫∑ng ƒë∆∞·ªùng c·ª° 300 c√¢y s·ªë v·ªÅ mi·ªÅn n√∫i cao. Tr√™n xe l√† nh·ªØng b√†i h√°t nh·∫°c hoa g·∫Øn b√≥ m·ªôt th·ªùi v·ªõi tu·ªïi th∆° c·ªßa t√¥i, c·∫£m gi√°c ƒë√∫ng l√† v·ªÅ nh√†.</p>
<p>3 gi·ªù s√°ng.</p>
<p>Nh·ªØng l·∫ßn tr∆∞·ªõc v·ªÅ qu√™, ch√∫ng t√¥i lu√¥n di chuy·ªÉn b·∫±ng xe gi∆∞·ªùng n·∫±m, m·ªôt khi l√™n xe l√† nh·∫Øm m·∫Øt ng·ªß ngh·ªâ t·ªõi khi ƒë·∫øn n∆°i. C√≤n l·∫ßn n√†y c√≥ l·∫Ω v√¨ ƒëi·ªÅu ki·ªán xe kh√¥ng gi·ªëng n√™n ch√∫ng t√¥i ch·ªâ ch·∫≠p ch·ªùn nh·ªØng gi·∫•c ng·∫Øn ng·ªßi. Nh·ªù v·∫≠y m√† ch√∫ng t√¥i ƒë∆∞·ª£c l·∫ßn ƒë·∫ßu ch·ª©ng ki·∫øn c·∫£nh s∆∞∆°ng kh√≥i m·ªãt m√π d√†y ƒë·∫∑c che m·ªù c·∫£ ƒëo·∫°n ƒë∆∞·ªùng ƒëi l√™n ƒë·ªìi. S∆∞∆°ng m√π che ph·ªß m·ªçi v·∫≠t tr√™n v√† xung quanh con ƒë∆∞·ªùng, nh·ªØng chi·∫øc xe kh√¥ng chi·∫øc n√†o d√°m manh ƒë·ªông r·ªì ga ch·∫°y vi vu n·ªØa, m√† ch·∫≠m r√£i x√™ d·ªãch t·ª´ng li t·ª´ng t√≠. Khung c·∫£nh qu·∫£ th·∫≠t kinh h·ªìn, nh∆∞ l·∫°c v√†o th·∫ø gi·ªõi li√™u trai ch√≠ d·ªã v·∫≠y, ·ªü gi·ªØa n∆°i s∆∞∆°ng m√π v√¢y k√≠n l·ªëi kh√¥ng bi·∫øt xung quanh l√† g√¨, c·∫£m gi√°c v·ª´a s·ª£ v·ª´a k√≠ch th√≠ch. B√°c t√†i x·∫ø d√π ƒë√£ nhi·ªÅu nƒÉm l√°i xe kh√°ch, nh∆∞ng ƒë√¢y c≈©ng l√† l·∫ßn ƒë·∫ßu b√°c ƒëi g·∫∑p c·∫£nh s∆∞∆°ng th·∫ø n√†y. Ph√≠a tr∆∞·ªõc ch·ªâ c√≥ nh·ªØng √°nh ƒë√®n xe m·∫≠p m·ªù kh√¥ng r√µ g·∫ßn xa, hay chi·ªÅu h∆∞·ªõng di chuy·ªÉn, xe ch√∫ng t√¥i ƒëi th·∫≠t ch·∫≠m theo s√°t xe ph√≠a tr∆∞·ªõc, c·∫©n th·∫≠n xem b·∫£n ƒë·ªì ƒë·ªÉ ƒë·∫£m b·∫£o l·ªô tr√¨nh ƒë√∫ng h∆∞·ªõng. V∆∞·ª£t qua hai ba ƒëo·∫°n ƒë∆∞·ªùng s∆∞∆°ng kh√≥i d√†y ƒë·∫∑c nh∆∞ v·∫≠y, ch√∫ng t√¥i ƒë√£ c√≥ th·ªÉ di chuy·ªÉn b√¨nh th∆∞·ªùng th·∫≥ng v·ªÅ ƒë·∫øn nh√†.</p>
<p>ƒêi qua ƒëo·∫°n ƒë∆∞·ªùng s∆∞∆°ng m√π ƒë√≥, t√¥i ch·ª£t li√™n t∆∞·ªüng ƒë·∫øn trong cu·ªôc s·ªëng c·ªßa con ng∆∞·ªùi m√¨nh l·∫Øm l√∫c c≈©ng g·∫∑p ph·∫£i nh·ªØng t√¨nh c·∫£nh t∆∞∆°ng t·ª±, m·ªù m·ªãt kh√¥ng bi·∫øt ph∆∞∆°ng h∆∞·ªõng, kh√¥ng bi·∫øt nh·ªØng g√¨ ƒëang ƒë·ª£i ch·ªù m√¨nh ·ªü ph√≠a tr∆∞·ªõc. Ta b·ªã b·ªßa v√¢y b·ªüi nh·ªØng c√¢u h·ªèi nghi ng·ªù, lo s·ª£ v·ªÅ m·ªôt t∆∞∆°ng lai kh√¥ng bi·∫øt tr∆∞·ªõc, c√≥ n√™n ƒëi ti·∫øp kh√¥ng, c√≥ n√™n r·∫Ω h∆∞·ªõng n√†y kh√¥ng, v√¢n v√¢n m√¢y m√¢y‚Ä¶ Th·∫ø nh∆∞ng, cu·ªôc s·ªëng l√† s·ª± v·∫≠n h√†nh li√™n t·ª•c, d√π ta c√≥ ho√†i nghi v√† s·ª£ h√£i ph√≠a tr∆∞·ªõc, ta c≈©ng kh√¥ng th·ªÉ khi·∫øn n√≥ ng·ª´ng l·∫°i, v·∫≠y n√™n h√£y c·ª© m·∫°nh d·∫°n l·ª±a ch·ªçn b∆∞·ªõc ti·∫øp t·ª´ng b∆∞·ªõc ch·∫≠m m√† ch·∫Øc b·∫°n ·∫°. H√£y tin r·∫±ng, s∆∞∆°ng m√π r·ªìi s·∫Ω tan, ta s·∫Ω th·∫•y ƒë∆∞·ª£c √°nh b√¨nh minh r·ª±c r·ª° nh·∫•t, v√† con ƒë∆∞·ªùng, ph∆∞∆°ng h∆∞·ªõng ta ƒëi s·∫Ω cho ta m·ªôt b√†i h·ªçc m·ªõi.</p>
<p>5 gi·ªù 30 ph√∫t s√°ng.</p>
<p>Gia ƒë√¨nh nh·ªè ch√∫ng t√¥i ƒë√£ ƒë·∫øn n∆°i an to√†n. M·∫∑t tr·ªùi ƒëang l√≥ d·∫°ng trong c√°i kh√¥ng kh√≠ se l·∫°nh v√†o ƒë√¥ng ·ªü mi·ªÅn n√∫i. T√¥i h√≠t th·ªü v√† t·∫≠n h∆∞·ªüng kh√¥ng gian trong l√†nh n√†y, m·ªôt ch∆∞∆°ng m·ªõi c·ªßa ch√∫ng t√¥i s·∫Ω ƒë∆∞·ª£c vi·∫øt ti·∫øp t·ª´ ƒë√¢y.</p>
]]></content>
      <categories>
        <category>Living</category>
      </categories>
      <tags>
        <tag>chill</tag>
        <tag>roi pho ve nui</tag>
      </tags>
  </entry>
  <entry>
    <title>R·ªùi Ph·ªë V·ªÅ N√∫i, Ta Chill (P2)</title>
    <url>/2022/03/17/Roi%20Pho%20Ve%20Nui%20Ta%20Chill%20P2/</url>
    <content><![CDATA[<p>R·ªùi ph·ªë v·ªÅ qu√™<br/> S·ªëng v·ªõi n√∫i r·ª´ng<br/> S∆∞∆°ng tr·ªùi gi√≥ l·ªông<br/> L√≤ng n√†y v·∫´n ·∫•m.<br/></p>
<p>Ai n√≥i qu√™ h∆∞∆°ng<br/> M·ªôt ngh√®o hai nh·ªè<br/> V·ªÅ r·ªìi m·ªõi t·ªè<br/> Hoa c·ªè tr·∫ßm h∆∞∆°ng.<br/></p>
<p>N·∫Øm tay ng∆∞·ªùi th∆∞∆°ng<br/> N∆∞∆°ng t·ª±a s·ªõm t·ªëi<br/> ƒê√¥ng qua xu√¢n t·ªõi<br/> C∆∞·ªùi m·ªôt ƒë·ªùi hoa.<br/></p>
<p>-- Th∆° con c√≥c t·ª± vi·∫øt, c√°c b·∫°n ƒë·ª´ng c∆∞·ªùi nha!--</p>
<p>T·ª´ khi r·ªùi ph·ªë v·ªÅ qu√™, c·∫£m gi√°c th·∫≠t kh√°c h·∫≥n. Ho√†n c·∫£nh s·ªëng kh√°c n√™n s·∫Ω c√≥ nh·ªØng th√∫ vui kh√°c. Ph·∫ßn l√† xa c√°ch ph·ªë ph∆∞·ªùng huy√™n n√°o, kh√¥ng c√≤n nh·ªØng n∆°i gi·∫£i tr√≠ ƒëa d·∫°ng, ƒë·ªìng th·ªùi b·∫£n th√¢n b·∫Øt ƒë·∫ßu g·∫Øn k·∫øt v·ªõi thi√™n nhi√™n nhi·ªÅu h∆°n, th·∫•y m√¨nh c≈©ng s·ªëng ch·∫≠m l·∫°i h∆°n.</p>
<a id="more"></a>
<p>C√¥ng vi·ªác th√¨ v·∫´n v·∫≠y, l√†m vi·ªác t·ª´ xa nh∆∞ h·ªìi gi√£n c√°ch v√¨ d·ªãch. Nh∆∞ng khi xong vi·ªác, ƒë√≥ng l·∫°i m√†n h√¨nh nh·ªè, m√¨nh ngh·ªâ ng∆°i v√† t√¨m ni·ªÅm vui qua nh·ªØng vi·ªác chƒÉm s√≥c nh√† c·ª≠a v√† c√¢y c·∫£nh. Nh∆∞ l√† t∆∞·ªõi c√¢y, b√≥n ph√¢n, d·ªçn c·ªè quanh v∆∞·ªùn‚Ä¶ Cu·ªëi tu·∫ßn m√¨nh hay ƒë√®o v·ª£ ƒëi mua m·ªôt v√†i ch·∫≠u c√¢y hoa v·ªÅ trang tr√≠ s√¢n nh√†. Kh√¥ng gian s√¢n nh√† b·ªóng b·ª´ng sinh kh√≠ h∆°n h·∫≥n. L√∫c ngh·ªâ ng∆°i m√† ra s√¢n sau h√≥ng gi√≥, nh√¨n ng·∫Øm c√¢y xanh hoa t∆∞∆°i th√¨ con ng∆∞·ªùi m√¨nh th·∫•y th∆∞ th√°i, th·∫•y d·ªÖ ch·ªãu l·∫Øm. Nhi·ªÅu √Ω t∆∞·ªüng hay ho c≈©ng xu·∫•t hi·ªán t·ª´ ƒë√¢y, trong ƒë√≥ c√≥ c·∫£ vi·ªác b√†y tr√≠ l·∫°i kh√¥ng gian s·ªëng nh∆∞ l√† khoan l·∫Øp th√™m k·ªá sao cho khoa h·ªçc, ti·ªán l·ª£i trong sinh ho·∫°t.</p>
<p>Ngo√†i vi·ªác chƒÉm s√≥c c√¢y c·∫£nh th√¨ m√¨nh c√≤n m·ªôt th√∫ vui n·ªØa l√† ch·∫°y xe ph∆∞·ª£t v√†i ch·ª•c c√¢y s·ªë l√™n Th√†nh Ph·ªë ƒê√† L·∫°t d·∫°o, c√≥ th·ªÉ nh·∫•m nh√°p t√Ω caf√© r·ªìi ch·∫°y v·ªÅ nh√†. H√¨ h√¨, th·∫≠t ra th√¨ ·ªü S√†i G√≤n ·∫•y, b∆∞·ªõc ra ƒë∆∞·ªùng l√† c√≥ qu√°n caf√©, h√†ng qu√°n ƒë·ªì g√¨ c≈©ng nhi·ªÅu, th·∫≠m ch√≠ m·ªü app (·ª©ng d·ª•ng) l√™n ƒë·∫∑t h√†ng l√† giao li·ªÅn t·∫≠n n∆°i lu√¥n. C√≤n ·ªü qu√™ m√¨nh th√¨ kh√°c, g·∫ßn nh√† c≈©ng c√≥ qu√°n caf√© ch·ª© kh√¥ng ph·∫£i kh√¥ng c√≥, ch·ªâ l√† phong c√°ch c·ªßa qu√°n d√†nh cho ƒë·ªëi t∆∞·ª£ng c√¥ d√¨ ch√∫ b√°c t·ª´ U40 tr·ªü l√™n. Th√™m n·ªØa l√† m√πi v·ªã caf√© c≈©ng kh√¥ng ph·∫£i gu c·ªßa m√¨nh. Gu cafe c·ªßa m√¨nh √° l√† cafe Arabica ph·∫£i rang nguy√™n ch·∫•t, kh√¥ng tr·ªôn l·∫´n c√°c ph·ª• li·ªáu hay gia v·ªã kh√°c nh∆∞ b∆°, ƒë·∫≠u... Nh·ªØng qu√°n caf√© tr√™n th√†nh ph·ªë ƒê√† L·∫°t th√¨ kh√°c h·∫≥n ch·ªó m√¨nh, t·ª´ phong c√°ch qu√°n ƒë·∫øn h∆∞∆°ng v·ªã pha ch·∫ø thu h√∫t gi·ªõi tr·∫ª nh∆∞ m√¨nh nhi·ªÅu h∆°n. Th√†nh ra thi tho·∫£ng t·ª•i m√¨nh ph√≥ng xe l√™n ƒë√≥ th∆∞·ªüng th·ª©c c·∫£nh ƒë·∫πp v√† caf√© c≈©ng l√† m·ªôt ni·ªÅm vui th√≠ch v√† √Ω nghƒ©a. G·ªçi l√† thi√™n v·ªÅ tr·∫£i nghi·ªám h√†nh tr√¨nh nhi·ªÅu h∆°n l√† c√≥ ƒë∆∞·ª£c k·∫øt qu·∫£ ti·ªán l·ª£i trong t√≠ch t·∫Øc.</p>
<p>Nhi·ªÅu ng∆∞·ªùi than phi·ªÅn r·∫±ng cu·ªôc s·ªëng sao m√† nh√†m ch√°n qu√°, c√≥ l·∫Ω c√°c b·∫°n ·∫•y n√™n th·ª≠ l√†m ƒëi·ªÅu g√¨ ƒë√≥ m·ªõi v√† kh√°c ƒëi, nh∆∞ l√† t·∫≠n h∆∞·ªüng qu√° tr√¨nh thay v√¨ ch√∫ tr·ªçng k·∫øt qu·∫£. V√≠ nh∆∞ ƒëi ph∆∞·ª£t ƒë·∫øn n∆°i n√†o ƒë√≥ c√πng b·∫°n b√®, hay t·ª± tay l√†m ra m·ªôt c√°i g√¨ ƒë√≥ ƒë·ªÉ t·∫∑ng, ƒë·ªÉ chia s·∫ª, hay ch·ªâ ƒë∆°n gi·∫£n d√†nh cho ng∆∞·ªùi th√¢n th∆∞∆°ng c·ªßa m√¨nh nh·ªØng gi√¢y ph√∫t chuy·ªán tr√≤ k·∫øt n·ªëi. R·ªùi xa nh·ªØng chi·∫øc m√†n h√¨nh ƒëi·ªán t·ª≠ s·∫Ω gi√∫p b·∫°n tho·∫£i m√°i h∆°n nhi·ªÅu. Th·∫ø gi·ªõi n√†y r·∫•t r·ªông l·ªõn, v·∫´n lu√¥n ƒë·ª£i b·∫°n ng·∫©ng cao ƒë·∫ßu, lao v√†o kh√°m ph√°.</p>
<p>M√¨nh s·∫Ω ti·∫øp t·ª•c chia s·∫ª nh·ªØng tr·∫£i nghi·ªám s·ªëng ch·∫•t c·ªßa m·ªôt developer ph√≠a sau m√†n h√¨nh v√†o b√†i ti·∫øp theo nh√©!</p>
]]></content>
      <categories>
        <category>Living</category>
      </categories>
      <tags>
        <tag>chill</tag>
        <tag>roi pho ve nui</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLAlchemy for Python ORM Mapping</title>
    <url>/2020/11/26/SQLAlchemy-for-Python-ORM-Mapping/</url>
    <content><![CDATA[<h1 id="getting-started">Getting started</h1>
<blockquote><p>SQLAlchemy is most famous for its object-relational mapper (ORM), an optional component that provides the data mapper pattern, where classes can be mapped to the database in open ended, multiple ways - allowing the object model and database schema to develop in a cleanly decoupled way from the beginning.</p>
<footer><strong>SQLAlchemy</strong><cite><a href="https://www.sqlalchemy.org/">www.sqlalchemy.org</a></cite></footer></blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install SQLAlchemy</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="table-define">Table Define</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># database.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, DateTime</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"><span class="comment">## Optional: for your custom schema</span></span><br><span class="line"><span class="comment"># Base.metadata.schema = &#x27;myschema&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;my_task&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String)</span><br><span class="line">    created_at = Column(DateTime)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">engine = create_engine(config.DATABASE_URI, echo=<span class="literal">True</span>)</span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="example">Example</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> database <span class="keyword">import</span> Session, Task</span><br><span class="line"></span><br><span class="line">session = Session()</span><br><span class="line">first_task = session.query(Task).first()</span><br><span class="line">print(first_task)</span><br><span class="line"></span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>SQLAlchemy</tag>
        <tag>ORM</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Schedule Task Runner with Celery</title>
    <url>/2020/11/27/Schedule-Task-Runner-with-Celery/</url>
    <content><![CDATA[<blockquote><p>Celery is a task queue with batteries included. It‚Äôs easy to use so that you can get started without learning the full complexities of the problem it solves. It‚Äôs designed around best practices so that your product can scale and integrate with other languages, and it comes with the tools and support you need to run such a system in production.</p>
<footer><strong>Celery</strong><cite><a href="https://docs.celeryproject.org/en/master/getting-started/first-steps-with-celery.html">docs.celeryproject.org/en/master/getting-started/first-steps-with-celery.html</a></cite></footer></blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install celery</span><br></pre></td></tr></table></figure>
<h1 id="choosing-a-broker">Choosing a Broker</h1>
<p>Celery requires a solution to send and receive messages; usually this comes in the form of a separate service called a message broker. In this example, I use RabbitMQ on docker for the most simple experiment.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 5672:5672 rabbitmq</span><br></pre></td></tr></table></figure>
<h1 id="the-application">The Application</h1>
<ul>
<li><p>Python code to define the task to run <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ./tasks.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">&#x27;tasks&#x27;</span>, broker=<span class="string">&#x27;amqp://localhost&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br></pre></td></tr></table></figure></p></li>
<li><p>Run the worker <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">celery -A tasks worker -l info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------- celery@Lap-012 v5.0.2 (singularity)</span><br><span class="line">--- ***** ----- </span><br><span class="line">-- ******* ---- Linux-5.4.0-54-generic-x86_64-with-debian-bullseye-sid 2020-11-27 10:13:21</span><br><span class="line">- *** --- * --- </span><br><span class="line">- ** ---------- [config]</span><br><span class="line">- ** ---------- .&gt; app:         tasks:0x7f5b26a11750</span><br><span class="line">- ** ---------- .&gt; transport:   amqp://guest:**@localhost:5672//</span><br><span class="line">- ** ---------- .&gt; results:     disabled://</span><br><span class="line">- *** --- * --- .&gt; concurrency: 8 (prefork)</span><br><span class="line">-- ******* ---- .&gt; task events: OFF (enable -E to monitor tasks in this worker)</span><br><span class="line">--- ***** ----- </span><br><span class="line"> -------------- [queues]</span><br><span class="line">                .&gt; celery           exchange=celery(direct) key=celery</span><br><span class="line">                </span><br><span class="line">[tasks]</span><br><span class="line">  . tasks.add</span><br><span class="line"></span><br><span class="line">[2020-11-27 10:13:21,496: INFO/MainProcess] Connected to amqp://guest:**@127.0.0.1:5672//</span><br><span class="line">[2020-11-27 10:13:21,506: INFO/MainProcess] mingle: searching for neighbors</span><br><span class="line">[2020-11-27 10:13:22,528: INFO/MainProcess] mingle: all alone</span><br><span class="line">[2020-11-27 10:13:22,568: INFO/MainProcess] celery@Lap-012 ready.</span><br></pre></td></tr></table></figure></p></li>
<li><p>The Scheduler, let add few more code to config schedule task <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ./tasks.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">&#x27;tasks&#x27;</span>, broker=<span class="string">&#x27;amqp://localhost&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">app.conf.beat_schedule = &#123;</span><br><span class="line">    <span class="string">&#x27;add-every-30-seconds&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;tasks.add&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;schedule&#x27;</span>: <span class="number">30.0</span>,</span><br><span class="line">        <span class="string">&#x27;args&#x27;</span>: (<span class="number">16</span>, <span class="number">16</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">app.conf.timezone = <span class="string">&#x27;UTC&#x27;</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>Run the scheduler, open new terminal and run <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">celery -A tasks beat -l info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">celery beat v5.0.2 (singularity) is starting.</span><br><span class="line">__    -    ... __   -        _</span><br><span class="line">LocalTime -&gt; 2020-11-27 10:18:19</span><br><span class="line">Configuration -&gt;</span><br><span class="line">    . broker -&gt; amqp://guest:**@localhost:5672//</span><br><span class="line">    . loader -&gt; celery.loaders.app.AppLoader</span><br><span class="line">    . scheduler -&gt; celery.beat.PersistentScheduler</span><br><span class="line">    . db -&gt; celerybeat-schedule</span><br><span class="line">    . logfile -&gt; [stderr]@%INFO</span><br><span class="line">    . maxinterval -&gt; 5.00 minutes (300s)</span><br><span class="line">[2020-11-27 10:18:19,508: INFO/MainProcess] beat: Starting...</span><br><span class="line">[2020-11-27 10:18:49,552: INFO/MainProcess] Scheduler: Sending due task add-every-30-seconds (tasks.add)</span><br></pre></td></tr></table></figure></p></li>
<li><p>You can check whether the worker is running on the terminal log <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[2020-11-27 10:19:19,546: INFO/MainProcess] Received task: tasks.add[b09eb21e-3e9f-459a-8069-d41b068d02c4]  </span><br><span class="line">[2020-11-27 10:19:19,549: INFO/ForkPoolWorker-5] Task tasks.add[b09eb21e-3e9f-459a-8069-d41b068d02c4] succeeded in 0.00027026102179661393s: 32</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h1 id="organize-all-together-using-docker-compose">Organize all together using docker-compose</h1>
<ul>
<li><p>./Dockerfile <figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install celery</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>./docker-compose.yml <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">rabbitmq:3.7</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">worker:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">MQ_HOST=rabbitmq</span></span><br><span class="line">    <span class="attr">depends_on:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">rabbitmq</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">celery</span> <span class="string">-A</span> <span class="string">tasks</span> <span class="string">worker</span> <span class="string">-l</span> <span class="string">info</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">sched:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">MQ_HOST=rabbitmq</span></span><br><span class="line">    <span class="attr">depends_on:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">rabbitmq</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">worker</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">celery</span> <span class="string">-A</span> <span class="string">tasks</span> <span class="string">beat</span> <span class="string">-l</span> <span class="string">info</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>./tasks.py <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">MQ_HOST = os.environ.get(<span class="string">&#x27;MQ_HOST&#x27;</span>, <span class="string">&#x27;localhost&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">&#x27;tasks&#x27;</span>, broker=<span class="string">f&#x27;amqp://<span class="subst">&#123;MQ_HOST&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">app.conf.beat_schedule = &#123;</span><br><span class="line">    <span class="string">&#x27;add-every-30-seconds&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;tasks.add&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;schedule&#x27;</span>: <span class="number">30.0</span>,</span><br><span class="line">        <span class="string">&#x27;args&#x27;</span>: (<span class="number">16</span>, <span class="number">16</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">app.conf.timezone = <span class="string">&#x27;UTC&#x27;</span></span><br></pre></td></tr></table></figure></p></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Docker</tag>
        <tag>Celery</tag>
        <tag>Cronjob</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Setup Apache Airflow Using Docker Compose</title>
    <url>/2021/05/08/Setup-Apache-Airflow-Using-Docker-Compose/</url>
    <content><![CDATA[<p><img width="480" src="/images/2021-05-08/001.png" /></p>
<p>Do you find it so complicated to set up <a href="https://airflow.apache.org/">Apache Airflow</a> for using right away? Don't worry, I can show you a simple and fast way! Are you ready? Then please take a look the instruction below.</p>
<h1 id="getting-started">Getting Started</h1>
<ul>
<li>Install <a href="https://docs.docker.com/engine/install/">docker</a> if you haven't.</li>
<li>Install <a href="https://docs.docker.com/compose/install/">Docker Compose &gt;= v1.27.0</a></li>
</ul>
<h1 id="download-docker-compose.yml">Download <code>docker-compose.yml</code></h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -LfO &#x27;https://airflow.apache.org/docs/apache-airflow/2.0.2/docker-compose.yaml&#x27;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>The <code>docker-compose.yml</code> file will look like this</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment"># or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment"># distributed with this work for additional information</span></span><br><span class="line"><span class="comment"># regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment"># to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment"># &quot;License&quot;); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment"># with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing,</span></span><br><span class="line"><span class="comment"># software distributed under the License is distributed on an</span></span><br><span class="line"><span class="comment"># &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span><br><span class="line"><span class="comment"># KIND, either express or implied.  See the License for the</span></span><br><span class="line"><span class="comment"># specific language governing permissions and limitations</span></span><br><span class="line"><span class="comment"># under the License.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING: This configuration is for local development. Do not use it in a production deployment.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This configuration supports basic configuration using environment variables or an .env file</span></span><br><span class="line"><span class="comment"># The following variables are supported:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># AIRFLOW_IMAGE_NAME         - Docker image name used to run Airflow.</span></span><br><span class="line"><span class="comment">#                              Default: apache/airflow:master-python3.8</span></span><br><span class="line"><span class="comment"># AIRFLOW_UID                - User ID in Airflow containers</span></span><br><span class="line"><span class="comment">#                              Default: 50000</span></span><br><span class="line"><span class="comment"># AIRFLOW_GID                - Group ID in Airflow containers</span></span><br><span class="line"><span class="comment">#                              Default: 50000</span></span><br><span class="line"><span class="comment"># _AIRFLOW_WWW_USER_USERNAME - Username for the administrator account.</span></span><br><span class="line"><span class="comment">#                              Default: airflow</span></span><br><span class="line"><span class="comment"># _AIRFLOW_WWW_USER_PASSWORD - Password for the administrator account.</span></span><br><span class="line"><span class="comment">#                              Default: airflow</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Feel free to modify this file to suit your needs.</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">x-airflow-common:</span></span><br><span class="line">  <span class="string">&amp;airflow-common</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">$&#123;AIRFLOW_IMAGE_NAME:-apache/airflow:2.0.2&#125;</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="string">&amp;airflow-common-env</span></span><br><span class="line">    <span class="attr">AIRFLOW__CORE__EXECUTOR:</span> <span class="string">CeleryExecutor</span></span><br><span class="line">    <span class="attr">AIRFLOW__CORE__SQL_ALCHEMY_CONN:</span> <span class="string">postgresql+psycopg2://airflow:airflow@postgres/airflow</span></span><br><span class="line">    <span class="attr">AIRFLOW__CELERY__RESULT_BACKEND:</span> <span class="string">db+postgresql://airflow:airflow@postgres/airflow</span></span><br><span class="line">    <span class="attr">AIRFLOW__CELERY__BROKER_URL:</span> <span class="string">redis://:@redis:6379/0</span></span><br><span class="line">    <span class="attr">AIRFLOW__CORE__FERNET_KEY:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION:</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">    <span class="attr">AIRFLOW__CORE__LOAD_EXAMPLES:</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">    <span class="attr">AIRFLOW__API__AUTH_BACKEND:</span> <span class="string">&#x27;airflow.api.auth.backend.basic_auth&#x27;</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./dags:/opt/airflow/dags</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./logs:/opt/airflow/logs</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./plugins:/opt/airflow/plugins</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">&quot;$&#123;AIRFLOW_UID:-50000&#125;:$&#123;AIRFLOW_GID:-50000&#125;&quot;</span></span><br><span class="line">  <span class="attr">depends_on:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">condition:</span> <span class="string">service_healthy</span></span><br><span class="line">    <span class="attr">postgres:</span></span><br><span class="line">      <span class="attr">condition:</span> <span class="string">service_healthy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">postgres:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:13</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">POSTGRES_USER:</span> <span class="string">airflow</span></span><br><span class="line">      <span class="attr">POSTGRES_PASSWORD:</span> <span class="string">airflow</span></span><br><span class="line">      <span class="attr">POSTGRES_DB:</span> <span class="string">airflow</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">postgres-db-volume:/var/lib/postgresql/data</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;pg_isready&quot;</span>, <span class="string">&quot;-U&quot;</span>, <span class="string">&quot;airflow&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">5s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6379</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;redis-cli&quot;</span>, <span class="string">&quot;ping&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">5s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">30s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">airflow-webserver:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*airflow-common</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">webserver</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;--fail&quot;</span>, <span class="string">&quot;http://localhost:8080/health&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">airflow-scheduler:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*airflow-common</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">scheduler</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">airflow-worker:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*airflow-common</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">celery</span> <span class="string">worker</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">airflow-init:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*airflow-common</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">version</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="string">&lt;&lt;:</span> <span class="string">*airflow-common-env</span></span><br><span class="line">      <span class="attr">_AIRFLOW_DB_UPGRADE:</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      <span class="attr">_AIRFLOW_WWW_USER_CREATE:</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      <span class="attr">_AIRFLOW_WWW_USER_USERNAME:</span> <span class="string">$&#123;_AIRFLOW_WWW_USER_USERNAME:-airflow&#125;</span></span><br><span class="line">      <span class="attr">_AIRFLOW_WWW_USER_PASSWORD:</span> <span class="string">$&#123;_AIRFLOW_WWW_USER_PASSWORD:-airflow&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">flower:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*airflow-common</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">celery</span> <span class="string">flower</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5555</span><span class="string">:5555</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;--fail&quot;</span>, <span class="string">&quot;http://localhost:5555/&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">postgres-db-volume:</span></span><br></pre></td></tr></table></figure>
<h1 id="initialize-the-environment">Initialize the environment</h1>
<ul>
<li>Prepare some folders to store application data and script</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir ./dags ./logs ./plugins</span><br><span class="line"></span><br><span class="line">echo -e &quot;AIRFLOW_UID=$(id -u)\nAIRFLOW_GID=0&quot; &gt; .env</span><br></pre></td></tr></table></figure>
<ul>
<li>Initialize database</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up airflow-init</span><br></pre></td></tr></table></figure>
<ul>
<li>Use the login user <code>airflow</code> and the password <code>airflow</code>.</li>
</ul>
<h1 id="start-the-application">Start the application</h1>
<ul>
<li>Start all containers defined in the docker-compose.yml</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure>
<ul>
<li>Access the web interface <code>http://localhost:8080</code></li>
</ul>
<h1 id="how-to-install-additional-python-packages">How to install additional python packages</h1>
<ul>
<li>Create new file <code>Dockerfile</code> to customize airflow image based on <code>apache/airflow:2.0.2</code></li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> apache/airflow:<span class="number">2.0</span>.<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Now install the pandas package</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install pandas</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Or install all packages from requirements.txt</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> requirements.txt requirements.txt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install -r requirements.txt</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Update the <code>docker-compose.yml</code></li>
</ul>
<p>Change the line <code>image: $&#123;AIRFLOW_IMAGE_NAME:-apache/airflow:2.0.2&#125;</code> to <code>build: .</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">x-airflow-common:</span></span><br><span class="line">  <span class="string">&amp;airflow-common</span></span><br><span class="line">  <span class="comment"># image: $&#123;AIRFLOW_IMAGE_NAME:-apache/airflow:2.0.2&#125;</span></span><br><span class="line">  <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><p>Build the image by run the command <code>docker-compose build</code></p></li>
<li><p>Run the updated image <code>docker-compose up</code></p></li>
</ul>
<h1 id="reference">Reference</h1>
<ul>
<li><a href="https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html">Airflow Docs</a></li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Docker</tag>
        <tag>Airflow</tag>
        <tag>docker-compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Setup On Premise Kubernetes Cluster</title>
    <url>/2022/08/01/Setup-On-Premise-Kubernetes-Cluster/</url>
    <content><![CDATA[<h1 id="overview">Overview</h1>
<p>I'll setup a k8s cluster with 3 nodes (1 control, 2 workers).</p>
<ul>
<li><code>k8s-control</code></li>
<li><code>k8s-worker01</code></li>
<li><code>k8s-worker02</code></li>
</ul>
<a id="more"></a>
<h1 id="setup">Setup</h1>
<h2 id="install-packages-on-all-nodes">1. Install Packages on all nodes</h2>
<ul>
<li><p>Create configuration file for containerd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">EOF | sudo tee /etc/modules-load.d/containerd.conf</span></span><br><span class="line"><span class="string">overlay</span></span><br><span class="line"><span class="string">br_netfilter</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li>
<li><p>Load modules</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo modprobe overlay</span><br><span class="line">sudo modprobe br_netfilter</span><br></pre></td></tr></table></figure></li>
<li><p>Set system configuration for k8s networking</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li>
<li><p>Applying new settings</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sysctl --system</span><br></pre></td></tr></table></figure></li>
<li><p>Install containerd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install -y containerd</span><br></pre></td></tr></table></figure></li>
<li><p>Create default configuration file for containerd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/containerd</span><br></pre></td></tr></table></figure></li>
<li><p>Generate default containerd configuration and save to the newly created default file</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo containerd config default | sudo tee /etc/containerd/config.toml</span><br></pre></td></tr></table></figure></li>
<li><p>Restart containerd to ensure new configuration file usage</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart containerd</span><br></pre></td></tr></table></figure></li>
<li><p>Verify that containerd is running</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl status containerd</span><br></pre></td></tr></table></figure></li>
<li><p>Disable swap</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo swapoff -a</span><br></pre></td></tr></table></figure></li>
<li><p>Install dependencies</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install -y apt-transport-https curl</span><br></pre></td></tr></table></figure></li>
<li><p>Download and add GPG key</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure></li>
<li><p>Add Kubernetes to repository list</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list</span></span><br><span class="line"><span class="string">deb https://apt.kubernetes.io/ kubernetes-xenial main</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li>
<li><p>Update package listings</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li>
<li><p>Install Kubernetes packages</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y kubelet=1.24.0-00 kubeadm=1.24.0-00 kubectl=1.24.0-00</span><br></pre></td></tr></table></figure></li>
<li><p>Turn off automatic updates</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-mark hold kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="initialize-the-cluster">2. Initialize the Cluster</h2>
<p>In the <code>k8s-control</code> host:</p>
<ul>
<li><p>Initialize the Kubernetes cluster</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo kubeadm init --pod-network-cidr 192.168.0.0/16 --kubernetes-version 1.24.0</span><br></pre></td></tr></table></figure></li>
<li><p>Set <code>kubectl</code> access</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure></li>
<li><p>Test access to cluster</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="install-the-calico-network-add-on">3. Install the Calico Network Add-On</h2>
<p>In the <code>k8s-control</code> host:</p>
<ul>
<li><p>Install Calico Networking <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml</span><br></pre></td></tr></table></figure></p></li>
<li><p>Check status of the control plane node <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h2 id="join-the-worker-nodes-to-the-cluster">4. Join the Worker Nodes to the Cluster</h2>
<p>In the <code>k8s-control</code>:</p>
<ul>
<li>Print the join command <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm token create --print-join-command</span><br></pre></td></tr></table></figure></li>
</ul>
<p>In the <code>k8s-worker01</code> and <code>k8s-worker02</code> host:</p>
<ul>
<li>Use the join command printed above <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo kubeadm join ...</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Kubernetes</tag>
        <tag>K8S</tag>
        <tag>On-premise</tag>
      </tags>
  </entry>
  <entry>
    <title>Setup your own Docker Private Registry</title>
    <url>/2022/07/18/Setup-your-own-Docker-Private-Registry/</url>
    <content><![CDATA[<h1 id="in-the-registry-server">In the Registry Server</h1>
<ol type="1">
<li>Create an <code>htpasswd</code> file containing the login credentials for the initial account.</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/registry/auth</span><br><span class="line">docker run --entrypoint htpasswd registry:2.7.0 -Bbn hienhoang SupP3rS3cureP@ssW0rd &gt; ~/registry/auth/htpasswd</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>Create a directory to hold the certs for the registry server</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/registry/certs</span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li>Create a self-signed certificate for the registry.</li>
</ol>
<p>NOTE: For the <code>Common Name</code> field, enter the hostname of the registry server. Here I will use <code>registry.internal</code></p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl req \</span><br><span class="line">  -newkey rsa:4096 -nodes -sha256 -keyout ~/registry/certs/domain.key \</span><br><span class="line">  -x509 -days 365 -out ~/registry/certs/domain.crt</span><br></pre></td></tr></table></figure>
<ol start="4" type="1">
<li>Create a container to run the registry.</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 443:443 --restart=always --name registry \</span><br><span class="line">  -v /home/hienhoang/registry/certs:/certs \</span><br><span class="line">  -v /home/hienhoang/registry/auth:/auth \</span><br><span class="line">  -e REGISTRY_HTTP_ADDR=0.0.0.0:443 \</span><br><span class="line">  -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \</span><br><span class="line">  -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \</span><br><span class="line">  -e REGISTRY_AUTH=htpasswd \</span><br><span class="line">  -e <span class="string">&quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&quot;</span> \</span><br><span class="line">  -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \</span><br><span class="line">  registry:2.7.0</span><br></pre></td></tr></table></figure>
<ol start="5" type="1">
<li>Once the registry starts up, verify that it is responsive. It's OK if this command returns nothing, just make sure it does not fail.</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -k https://localhost:443</span><br></pre></td></tr></table></figure>
<h1 id="in-the-docker-client">In the Docker Client</h1>
<ol type="1">
<li>Add the registry's public self-signed certificate to <code>/etc/docker/certs.d</code>. The scp command is copying the file from the registry server to the client.</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker/certs.d/registry.internal:443</span><br><span class="line">sudo scp hienhoang@registry.internal:/home/hienhoang/registry/certs/domain.crt /etc/docker/certs.d/registry.internal:443</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>Log in to the private registry. The credentials should be username <code>hienhoang</code> and password <code>SupP3rS3cureP@ssW0rd</code>.</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker login registry.internal:443</span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li>Test the setup by push a image to the registry</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull ubuntu</span><br><span class="line">docker tag ubuntu registry.internal:443/test-image:1</span><br><span class="line">docker push registry.internal:443/test-image:1</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Docker</tag>
        <tag>Docker Registry</tag>
        <tag>Openssl</tag>
        <tag>Self-signed Certificate</tag>
      </tags>
  </entry>
  <entry>
    <title>The First Birthday of Donnie</title>
    <url>/2021/05/14/The-First-Birthday-of-Donnie/</url>
    <content><![CDATA[<p><img src="/images/2021-05-14/001.jpg"></p>
<p>That was a day of summer, our son turned one and enjoyed his very first birthday from when his new journey began. He also got a new nickname - Donnie, actually the nickname came from his previous one, Dino (Dinosaur). He's growing as fast as the waterfall of time, just a glance and now he can walk by his own, he can say "papa", "mama", "mum mum"... Sooner or later, Donnie will attend the preschool program. I'm writing this blog to save the date Donnie had his first birthday.</p>
<a id="more"></a>
<p>The first birthday of every baby is an important occasion, marking a new period of its life has just begun. In Vietnamese, this ceremony is called "L·ªÖ Th√¥i N√¥i" or "L·ªÖ ƒê·∫ßy NƒÉm", originally come from Chinese culture since Chinese people immigrated to Vietnam. However, the ceremony can be different depending on each family's tradition and origins. For example, the first birthday ceremony of my family members is very simple, some other families even don't celebrate it until their babies turn two or three years old. For my son's ceremony, we decided to celebrate fully as Vietnamese culture. The purpose of the ceremony is expressing gratefulness to Twelve Goddesses (12 B√† M·ª•) and Three Gods (3 ƒê·ª©c Th·∫ßy), who have been blessing our son's growth and future career, then we all pray the best wishes for him. There is an interesting part of the ceremony, every baby will pick or choose one of many different items that can predict his or her future career, which is considered to be pretty accurate.</p>
<p>Due to the complicated situation of Covid-19, we couldn't set up a big party and invite relatives and friends to join us. We preparing everything for the ceremony, including food, fruits, offerings, decoration and birthday cake. Food includes boiled chicken, pork, rice soup, white cow-bean sweet gruel, 4-color sticky rice. For decorating, she purchased many lovely blue and grey balloons, blowing them all, then hanging on the wall to form cloud of balloons, which created a stunning background for shooting photos. My wife got up early and displayed the food and offerings on a table, lighting up candles and incense for the ceremony to start. We pray to Goddesses and Gods with respect to bless our little Donnie. The ceremony finished as soon as the incense fired to the end. Donnie started stepping forward to pick up one item that represents the future career. In front of him, there were a laptop, a notebook, a pen, a ruler, a box of English flashcards, etc. Can you guess Which one he would choose? Surprisingly, he picked up the pen! The pen can represent for creative jobs, such as writer, author, novelist, journalist, composer, script writer, etc. or even artist! There were 13 dishes of sticky rice, 13 bowls of sweet bean gruel, and 13 bowls of rice soup. My wife shared the sticky rice and sweet bean gruel to our neighbors as special gifts. We took some photos of Donnie with the balloons background, and that was all.</p>
<p>You see how time flies no matter what happens. Looking at Donnie growing day by day, it reminds me the song "Slipping through my fingers" by ABBA. Let's take some times to listen to this song, you will know what I mean ;) It's great song, and you can feel it when you have children too. Oh believe me, I'm not a cheesy person, but the older we grow, the deeper we think and feel. Finally to our son, be strong and happy, Donnie! We're always by your side and always love you more than 3000 times!</p>
<div class="video-container"><iframe src="https://www.youtube.com/embed/lQj_DtAwmeM" frameborder="0" loading="lazy" allowfullscreen></iframe></div>
]]></content>
      <categories>
        <category>Living</category>
      </categories>
      <tags>
        <tag>Living</tag>
        <tag>Family</tag>
      </tags>
  </entry>
  <entry>
    <title>Understanding Reserved and Provisioned Concurrency in AWS Lambda: Key Differences and Use Cases</title>
    <url>/2023/12/19/Understanding-Reserved-and-Provisioned-Concurrency-in-AWS-Lambda-Key-Differences-and-Use-Cases/</url>
    <content><![CDATA[<h1 id="introduction">Introduction</h1>
<p>In the realm of serverless computing, AWS Lambda stands out as a powerful service that allows developers to run code without managing servers. An important aspect of Lambda is managing how many concurrent instances of your functions can run. Two critical features in this context are Reserved Concurrency and Provisioned Concurrency. Though they sound similar, they serve distinct purposes and work differently. This post aims to demystify these concepts, highlighting their differences and use cases.</p>
<p><img src="/images/2023-12-19/infographic2.png" style="max-height: 540px;"></p>
<h1 id="what-is-reserved-concurrency">What is Reserved Concurrency?</h1>
<p>Reserved Concurrency is a feature in AWS Lambda that lets you allocate a specific portion of your AWS account's total concurrency limit to a particular Lambda function.</p>
<h1 id="how-does-reserved-concurrency-work">How Does Reserved Concurrency Work?</h1>
<p>When you set Reserved Concurrency for a function, you are ensuring that this function can always use up to the specified number of concurrent executions. This allocation means that the specified concurrency is reserved solely for that function and cannot be used by other functions in your account. It's important to note that Reserved Concurrency is also a tool for limiting a function's maximum concurrency, which can be crucial for managing costs and ensuring that a Lambda function doesn't overwhelm downstream resources.</p>
<a id="more"></a>
<h1 id="use-cases-for-reserved-concurrency">Use Cases for Reserved Concurrency</h1>
<p>Reserved Concurrency is particularly useful for:</p>
<ul>
<li><p>Ensuring critical functions have the necessary resources available, especially during traffic spikes.</p></li>
<li><p>Controlling costs by limiting the maximum number of instances that a function can spawn.</p></li>
<li><p>Managing resource usage when interacting with systems that have strict rate limits.</p></li>
</ul>
<h1 id="what-is-provisioned-concurrency">What is Provisioned Concurrency?</h1>
<p>Provisioned Concurrency is a feature designed to eliminate cold starts and ensure low latency for your Lambda functions.</p>
<h1 id="functioning-of-provisioned-concurrency">Functioning of Provisioned Concurrency</h1>
<ul>
<li><p>With Provisioned Concurrency, AWS Lambda maintains a specified number of pre-initialized function instances. These instances are immediately ready to respond to function invocations.</p></li>
<li><p>This pre-warming of functions eradicates the initialization latency (cold starts), providing consistent and fast response times.</p></li>
<li><p>Unlike Reserved Concurrency, which just allocates a part of the concurrency pool, Provisioned Concurrency actively keeps function instances in an initialized state.</p></li>
</ul>
<h1 id="use-cases-for-provisioned-concurrency">Use Cases for Provisioned Concurrency</h1>
<p>Provisioned Concurrency is essential for:</p>
<ul>
<li><p>Functions where low latency is a critical requirement.</p></li>
<li><p>Applications that experience irregular traffic patterns, ensuring quick responses even after long idle periods.</p></li>
<li><p>Scenarios where predictable and consistent performance is more important than cost optimization.</p></li>
</ul>
<h1 id="key-differences">Key Differences</h1>
<ul>
<li><p><strong>Purpose:</strong> Reserved Concurrency is about allocation and limitation, while Provisioned Concurrency is about maintaining readiness and eliminating cold starts.</p></li>
<li><p><strong>Billing:</strong> There are no additional charges for setting Reserved Concurrency limits, whereas with Provisioned Concurrency, you pay for the pre-warmed instances regardless of whether they are used.</p></li>
</ul>
<h1 id="conclusion">Conclusion</h1>
<p>Understanding Reserved and Provisioned Concurrency in AWS Lambda is crucial for optimizing performance and cost. Reserved Concurrency is ideal for managing resource allocation and limiting costs, while Provisioned Concurrency is the go-to feature for ensuring low latency and eliminating cold starts. By strategically implementing these features, you can significantly enhance the efficiency and reliability of your serverless applications.</p>
]]></content>
      <categories>
        <category>DevOps</category>
        <category>Cloud Computing</category>
        <category>Serverless Architecture</category>
        <category>Performance Optimization</category>
        <category>Technology Tutorials</category>
        <category>AWS Lambda</category>
        <category>Serverless Development</category>
        <category>Cost Management</category>
        <category>Scalability</category>
        <category>High Availability</category>
      </categories>
      <tags>
        <tag>Serverless Architecture</tag>
        <tag>Cloud Computing</tag>
        <tag>Cloud Infrastructure</tag>
        <tag>AWS Lambda</tag>
        <tag>Serverless Computing</tag>
        <tag>Reserved Concurrency</tag>
        <tag>Provisioned Concurrency</tag>
        <tag>AWS Cloud Services</tag>
        <tag>Function Scaling</tag>
        <tag>Lambda Performance</tag>
        <tag>AWS Serverless</tag>
        <tag>Lambda Concurrency Management</tag>
        <tag>Low Latency Computing</tag>
        <tag>AWS Performance Optimization</tag>
        <tag>AWS Cost Management</tag>
        <tag>AWS Development</tag>
        <tag>Lambda Cold Starts</tag>
        <tag>Cloud Application Scaling</tag>
        <tag>AWS Best Practices</tag>
        <tag>Serverless Function Management</tag>
      </tags>
  </entry>
  <entry>
    <title>Understanding the Key Differences: AWS DynamoDB vs MongoDB</title>
    <url>/2023/12/20/Understanding-the-Key-Differences-AWS-DynamoDB-vs-MongoDB/</url>
    <content><![CDATA[<p>In the realm of NoSQL databases, AWS DynamoDB and MongoDB stand out as two of the most popular choices. Both databases offer unique features and capabilities, making them suitable for a variety of applications. However, understanding their differences is crucial for developers and businesses to make an informed decision. Let‚Äôs dive into a detailed comparison.</p>
<p><img src="/images/2023-12-20/001.png" style="max-height: 540px;"></p>
<h1 id="service-model">Service Model</h1>
<p><strong>DynamoDB</strong> is a fully managed NoSQL database service offered by Amazon Web Services (AWS). It's serverless, meaning users are freed from managing the underlying infrastructure.</p>
<p><strong>MongoDB</strong>, on the other hand, is an open-source NoSQL database. Users can self-host MongoDB on their own servers or opt for MongoDB Atlas, its fully-managed cloud version.</p>
<a id="more"></a>
<h1 id="data-model">Data Model</h1>
<p><strong>DynamoDB</strong> uses a key-value and document data model designed for high performance, even at large scales.</p>
<p><strong>MongoDB</strong> primarily focuses on a document-oriented approach, allowing for more complex data structures stored in JSON-like documents.</p>
<h1 id="scalability">Scalability</h1>
<p><strong>DynamoDB</strong> shines in scalability. It's highly scalable without any manual intervention, automatically adjusting to workload demands.</p>
<p><strong>MongoDB</strong> is also scalable but requires more manual setup, especially in self-hosted scenarios. MongoDB Atlas, however, offers auto-scaling features similar to DynamoDB.</p>
<h1 id="querying">Querying</h1>
<p>When it comes to querying capabilities, <strong>MongoDB</strong> leads with its rich query language and indexing capabilities, suitable for complex queries and aggregations. <strong>DynamoDB‚Äôs</strong> querying is more basic, focusing on key-value queries and simple filtering.</p>
<h1 id="consistency">Consistency</h1>
<p>Both databases offer different consistency models. <strong>DynamoDB</strong> provides options for strong and eventual consistency, while <strong>MongoDB</strong> generally offers eventual consistency, with stronger options available in certain configurations.</p>
<h1 id="pricing-model">Pricing Model</h1>
<p><strong>DynamoDB‚Äôs</strong> pricing is based on the read/write throughput and the storage used. It also has an on-demand pricing model for more flexibility. <strong>MongoDB‚Äôs</strong> pricing varies based on the deployment model, with self-hosted costs tied to the underlying infrastructure and MongoDB Atlas pricing based on resource usage.</p>
<h1 id="use-cases">Use Cases</h1>
<p><strong>DynamoDB</strong> is ideal for applications needing high performance and scalability with less complex querying needs, such as gaming, IoT, and mobile apps. <strong>MongoDB</strong> is more suited for applications requiring rich data structures and complex queries, like content management systems and e-commerce platforms.</p>
<h1 id="integration-and-ecosystem">Integration and Ecosystem</h1>
<p><strong>DynamoDB</strong> integrates seamlessly with other AWS services, making it a go-to choice for applications embedded in the AWS ecosystem. <strong>MongoDB‚Äôs</strong> open-source nature means it has a broad compatibility range and a large community, offering diverse integration possibilities.</p>
<h1 id="coding-example">Coding Example</h1>
<h2 id="mongodb-python-example">MongoDB Python Example</h2>
<p>First, here's a simple example showing how to connect to a MongoDB database, insert a document, and retrieve documents:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line"><span class="comment"># Connect to MongoDB (replace &#x27;mongodb_uri&#x27; with your MongoDB URI)</span></span><br><span class="line">client = MongoClient(<span class="string">&#x27;mongodb_uri&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Select the database and collection</span></span><br><span class="line">db = client[<span class="string">&#x27;example_db&#x27;</span>]</span><br><span class="line">collection = db[<span class="string">&#x27;example_collection&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Insert a document</span></span><br><span class="line">document = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;John Doe&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">30</span>, <span class="string">&quot;city&quot;</span>: <span class="string">&quot;New York&quot;</span>&#125;</span><br><span class="line">collection.insert_one(document)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Retrieve all documents</span></span><br><span class="line"><span class="keyword">for</span> doc <span class="keyword">in</span> collection.find():</span><br><span class="line">    print(doc)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="dynamodb-python-example">DynamoDB Python Example</h2>
<p>Now, here's an example for AWS DynamoDB using the boto3 library:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize a DynamoDB client (AWS credentials needed)</span></span><br><span class="line">dynamodb = boto3.resource(<span class="string">&#x27;dynamodb&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Select the table</span></span><br><span class="line">table = dynamodb.Table(<span class="string">&#x27;example_table&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Insert an item</span></span><br><span class="line">item = &#123;<span class="string">&quot;id&quot;</span>: <span class="string">&quot;123&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Jane Doe&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">25</span>, <span class="string">&quot;city&quot;</span>: <span class="string">&quot;Los Angeles&quot;</span>&#125;</span><br><span class="line">table.put_item(Item=item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Retrieve an item</span></span><br><span class="line">response = table.get_item(Key=&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;123&#x27;</span>&#125;)</span><br><span class="line">item = response.get(<span class="string">&#x27;Item&#x27;</span>, &#123;&#125;)</span><br><span class="line">print(item)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>In these examples:</p>
<p>For MongoDB, we use <code>pymongo</code>, the native Python driver for MongoDB, to connect to the database, insert, and retrieve documents.</p>
<p>For DynamoDB, we use <code>boto3</code>, the AWS SDK for Python, to interact with the DynamoDB service. This includes inserting and retrieving items.</p>
<h1 id="conclusion">Conclusion</h1>
<p>The choice between AWS DynamoDB and MongoDB hinges on your project's specific needs. Consider factors like scalability, data complexity, budget, and existing infrastructure before deciding. Both databases have their strengths, and understanding these will guide you towards the right choice for your application.</p>
<p>Remember, the database you choose plays a pivotal role in the success of your application, so choose wisely!</p>
]]></content>
      <categories>
        <category>Cloud Computing</category>
        <category>Software Development</category>
        <category>Technology</category>
        <category>Web Development</category>
        <category>Database Technologies</category>
        <category>IT Infrastructure</category>
        <category>Big Data</category>
        <category>Data Management</category>
      </categories>
      <tags>
        <tag>AWS DynamoDB</tag>
        <tag>MongoDB</tag>
        <tag>NoSQL Databases</tag>
        <tag>Database Comparison</tag>
        <tag>Cloud Databases</tag>
        <tag>AWS Services</tag>
        <tag>MongoDB Atlas</tag>
        <tag>Data Modeling</tag>
        <tag>Scalable Databases</tag>
        <tag>Database Query Languages</tag>
        <tag>Serverless Databases</tag>
        <tag>Database Scalability</tag>
        <tag>DynamoDB vs MongoDB</tag>
        <tag>Data Storage Solutions</tag>
        <tag>Key-Value Store</tag>
      </tags>
  </entry>
  <entry>
    <title>Use Vagrant for cross environment development</title>
    <url>/2020/12/28/Use-Vagrant-for-cross-environment-development/</url>
    <content><![CDATA[<blockquote><h4>
What's Vagrant?
</h4>
<p>Vagrant is a tool for building and managing virtual machine environments in a single workflow. With an easy-to-use workflow and focus on automation, Vagrant lowers development environment setup time, increases production parity, and makes the "works on my machine" excuse a relic of the past.</p>
<h4>
Why Vagrant?
</h4>
<p>Vagrant provides easy to configure, reproducible, and portable work environments built on top of industry-standard technology and controlled by a single consistent workflow to help maximize the productivity and flexibility of you and your team.</p>
<footer><strong>Vagrant</strong><cite><a href="https://www.vagrantup.com/intro">www.vagrantup.com/intro</a></cite></footer></blockquote>
<h1 id="getting-started">Getting Started</h1>
<ul>
<li><a href="https://www.virtualbox.org/wiki/Downloads">Download</a> VirtualBox for virtualization</li>
<li><a href="https://www.vagrantup.com/downloads">Download</a> and install Vagrant</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install virtualbox</span><br><span class="line"></span><br><span class="line">curl -O https://releases.hashicorp.com/vagrant/2.2.9/vagrant_2.2.9_x86_64.deb</span><br><span class="line">sudo apt install ./vagrant_2.2.9_x86_64.deb</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="init-environment">Init environment</h1>
<p>Run the command to init a new vagrant development environment using <code>ubuntu 20.04</code>.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vagrant init bento/ubuntu-20.04</span><br></pre></td></tr></table></figure>
<p>The script will generate a initial <code>Vagrantfile</code>.</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># All Vagrant configuration is done below. The &quot;2&quot; in Vagrant.configure</span></span><br><span class="line"><span class="comment"># configures the configuration version (we support older styles for</span></span><br><span class="line"><span class="comment"># backwards compatibility). Please don&#x27;t change it unless you know what</span></span><br><span class="line"><span class="comment"># you&#x27;re doing.</span></span><br><span class="line">Vagrant.configure(<span class="string">&quot;2&quot;</span>) <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">  <span class="comment"># The most common configuration options are documented and commented below.</span></span><br><span class="line">  <span class="comment"># For a complete reference, please see the online documentation at</span></span><br><span class="line">  <span class="comment"># https://docs.vagrantup.com.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Every Vagrant development environment requires a box. You can search for</span></span><br><span class="line">  <span class="comment"># boxes at https://vagrantcloud.com/search.</span></span><br><span class="line">  config.vm.box = <span class="string">&quot;bento/ubuntu-20.04&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Disable automatic box update checking. If you disable this, then</span></span><br><span class="line">  <span class="comment"># boxes will only be checked for updates when the user runs</span></span><br><span class="line">  <span class="comment"># `vagrant box outdated`. This is not recommended.</span></span><br><span class="line">  <span class="comment"># config.vm.box_check_update = false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Create a forwarded port mapping which allows access to a specific port</span></span><br><span class="line">  <span class="comment"># within the machine from a port on the host machine. In the example below,</span></span><br><span class="line">  <span class="comment"># accessing &quot;localhost:8080&quot; will access port 80 on the guest machine.</span></span><br><span class="line">  <span class="comment"># <span class="doctag">NOTE:</span> This will enable public access to the opened port</span></span><br><span class="line">  <span class="comment"># config.vm.network &quot;forwarded_port&quot;, guest: 80, host: 8080</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Create a forwarded port mapping which allows access to a specific port</span></span><br><span class="line">  <span class="comment"># within the machine from a port on the host machine and only allow access</span></span><br><span class="line">  <span class="comment"># via 127.0.0.1 to disable public access</span></span><br><span class="line">  <span class="comment"># config.vm.network &quot;forwarded_port&quot;, guest: 80, host: 8080, host_ip: &quot;127.0.0.1&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Create a private network, which allows host-only access to the machine</span></span><br><span class="line">  <span class="comment"># using a specific IP.</span></span><br><span class="line">  <span class="comment"># config.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.10&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Create a public network, which generally matched to bridged network.</span></span><br><span class="line">  <span class="comment"># Bridged networks make the machine appear as another physical device on</span></span><br><span class="line">  <span class="comment"># your network.</span></span><br><span class="line">  <span class="comment"># config.vm.network &quot;public_network&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Share an additional folder to the guest VM. The first argument is</span></span><br><span class="line">  <span class="comment"># the path on the host to the actual folder. The second argument is</span></span><br><span class="line">  <span class="comment"># the path on the guest to mount the folder. And the optional third</span></span><br><span class="line">  <span class="comment"># argument is a set of non-required options.</span></span><br><span class="line">  <span class="comment"># config.vm.synced_folder &quot;../data&quot;, &quot;/vagrant_data&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Provider-specific configuration so you can fine-tune various</span></span><br><span class="line">  <span class="comment"># backing providers for Vagrant. These expose provider-specific options.</span></span><br><span class="line">  <span class="comment"># Example for VirtualBox:</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># config.vm.provider &quot;virtualbox&quot; do |vb|</span></span><br><span class="line">  <span class="comment">#   # Display the VirtualBox GUI when booting the machine</span></span><br><span class="line">  <span class="comment">#   vb.gui = true</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#   # Customize the amount of memory on the VM:</span></span><br><span class="line">  <span class="comment">#   vb.memory = &quot;1024&quot;</span></span><br><span class="line">  <span class="comment"># end</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># View the documentation for the provider you are using for more</span></span><br><span class="line">  <span class="comment"># information on available options.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Enable provisioning with a shell script. Additional provisioners such as</span></span><br><span class="line">  <span class="comment"># Ansible, Chef, Docker, Puppet and Salt are also available. Please see the</span></span><br><span class="line">  <span class="comment"># documentation for more information about their specific syntax and use.</span></span><br><span class="line">  <span class="comment"># config.vm.provision &quot;shell&quot;, inline: &lt;&lt;-SHELL</span></span><br><span class="line">  <span class="comment">#   apt-get update</span></span><br><span class="line">  <span class="comment">#   apt-get install -y apache2</span></span><br><span class="line">  <span class="comment"># SHELL</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Enable <code>config.vm.synced_folder "./", "/vagrant_data"</code> to share folder with the virtual machine.</li>
<li>Enable <code>config.vm.network "forwarded_port", guest: 80, host: 8080</code> to expose virtual machine port <code>80</code> to <code>localhost:8080</code></li>
<li>To install required packages on init. Enable:</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">config.vm.provision <span class="string">&quot;shell&quot;</span>, <span class="symbol">inline:</span> &lt;&lt;-SHELL</span><br><span class="line">  apt-get update</span><br><span class="line">  apt-get install url -y </span><br><span class="line">  curl <span class="symbol">https:</span>/<span class="regexp">/raw.githubusercontent.com/creationix</span><span class="regexp">/nvm/master</span><span class="regexp">/install.sh | bash</span></span><br><span class="line"><span class="regexp">SHELL</span></span><br></pre></td></tr></table></figure>
<h1 id="up-and-run">Up and run</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vagrant up</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Bringing machine &#x27;default&#x27; up with &#x27;virtualbox&#x27; provider...</span><br><span class="line">==&gt; default: Box &#x27;bento/ubuntu-20.04&#x27; could not be found. Attempting to find and install...</span><br><span class="line">    default: Box Provider: virtualbox</span><br><span class="line">    default: Box Version: &gt;= 0</span><br><span class="line">==&gt; default: Loading metadata for box &#x27;bento/ubuntu-20.04&#x27;</span><br><span class="line">    default: URL: https://vagrantcloud.com/bento/ubuntu-20.04</span><br><span class="line">==&gt; default: Adding box &#x27;bento/ubuntu-20.04&#x27; (v202012.23.0) for provider: virtualbox</span><br><span class="line">    default: Downloading: https://vagrantcloud.com/bento/boxes/ubuntu-20.04/versions/202012.23.0/providers/virtualbox.box</span><br><span class="line">==&gt; default: Box download is resuming from prior download progress</span><br><span class="line">Download redirected to host: vagrantcloud-files-production.s3.amazonaws.com</span><br><span class="line">Progress: 0% (Rate: 215k/s, Estimated time remaining: 0:34:56)</span><br></pre></td></tr></table></figure>
<h1 id="connect-to-the-vm">Connect to the VM</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vagrant ssh</span><br></pre></td></tr></table></figure>
<h1 id="stop-the-vm">Stop the VM</h1>
<ul>
<li>Stop without destroy the VM</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vagrant halt</span><br></pre></td></tr></table></figure>
<ul>
<li>Stop and destroy the VM</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vagrant destroy</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Productivity</tag>
        <tag>VirtualBox</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World! My Coding Journey into Fatherhood</title>
    <url>/2020/11/14/hello-world-my-coding-journey-into-fatherhood/</url>
    <content><![CDATA[<p>Hey fellow coders! Let me share a personal fork in my life's repository - becoming a dad. It's like deploying a new life feature that brings unexpected joys and challenges.</p>
<p><strong>The Big Reveal</strong></p>
<p>Our journey began in Dalat City, not with debugging, but with discovering we were expecting. The moment I learned about our upcoming 'release' (our baby), it felt like a successful code compilation after countless errors.</p>
<p><strong>Health Check Commit</strong></p>
<p>We faced our first 'bug' early on due to missed health checks. My wife, a fellow enthusiast of chill beers and algorithms, had her concerns. Thankfully, our little 'program' was error-free and running smoothly.</p>
<p><strong>The Deployment Day</strong></p>
<p>Our son's arrival was like a product launch under tight deadlines. Rushing to the hospital at 3:00 am, praying for zero downtime. And in the early hours of the morning, our latest 'version' was successfully deployed - a healthy baby boy!</p>
<p><img src="/images/2020-12-15/003.jpg" style="max-height: 540px;"></p>
<p><strong>Refactoring Life</strong></p>
<p>After navigating through the initial challenges and excitement of our new arrival, just like in a development project, it was time to enter the 'Refactoring Life' phase. This is where I applied some essential updates and optimizations to our family's daily routine.</p>
<ol type="1">
<li><p><strong>Home Setup</strong>: Just like optimizing our work environment for productivity, I revamped our living space for the new family member.</p></li>
<li><p><strong>Listening to User Feedback</strong>: Pregnancy and postpartum are like customer feedback sessions. I've been tuning into my wife's needs and emotions, debugging together to ensure a smooth run.</p></li>
<li><p><strong>Financial and Career Scaling</strong>: With a new member in our 'dev team', I started consuming more content on financial algorithms and career scaling to provide a robust framework for our family's future.</p></li>
<li><p><strong>New Features and Hobbies</strong>: Fatherhood introduced new hobbies, like photography - capturing our little 'project's milestones. It's like keeping a visual log of our family's development process.</p></li>
</ol>
<p><strong>Conclusion</strong></p>
<p>Becoming a father is a bit like diving into a new programming language - daunting at first but immensely rewarding as you learn. I hope my story resonates with you, fellow devs, as we navigate the incredible journey of parenthood in the tech world.</p>
]]></content>
      <categories>
        <category>Developer Lifestyle</category>
        <category>Parenting in Tech</category>
      </categories>
      <tags>
        <tag>Developer Dad</tag>
        <tag>Tech Family</tag>
        <tag>Work-Life Balance</tag>
      </tags>
  </entry>
  <entry>
    <title>How to replace environment variables in a file</title>
    <url>/2021/01/28/how-to-replace-environment-variables-in-a-file/</url>
    <content><![CDATA[<h1 id="load-environment-from-.env-file">1. Load environment from <code>.env</code> file</h1>
<ul>
<li><p>Let say we have a <code>.env</code> file: <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">WEBSITE_URL=https://hienhoang.ml</span><br><span class="line">USERNAME=hienhoang</span><br><span class="line">PASSWORD=p@ssword</span><br></pre></td></tr></table></figure></p></li>
<li><p>Then run this script will load all environment variables to current shell terminal <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export $(grep -v &#x27;^#&#x27; .env | xargs)</span><br></pre></td></tr></table></figure></p></li>
<li><p>You can also unset variables using below script <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unset $(grep -v &#x27;^#&#x27; .env | sed -E &#x27;s/(.*)=.*/\1/&#x27; | xargs)</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h1 id="substitute-all-environment-variables-in-a-file">2. Substitute all environment variables in a file</h1>
<ul>
<li><p><code>template.yml</code> <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">website:</span> $&#123;WEBSITE_URL&#125;</span><br><span class="line"><span class="symbol">username:</span> $&#123;USERNAME&#125;</span><br><span class="line"><span class="symbol">password:</span> $&#123;PASSWORD&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>Run this script to substitute variable in the <code>template.yml</code> file and output to <code>config.yml</code> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">envsubst &lt; template.yml &gt; config.yml</span><br></pre></td></tr></table></figure></p></li>
<li><p>Result is the <code>config.yml</code> <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">website:</span> <span class="symbol">https:</span>/<span class="regexp">/hienhoang.ml</span></span><br><span class="line"><span class="regexp">username: hienhoang</span></span><br><span class="line"><span class="regexp">password: p@ssword</span></span><br></pre></td></tr></table></figure></p></li>
</ul>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
        <tag>Script</tag>
      </tags>
  </entry>
  <entry>
    <title>Pray For Peace</title>
    <url>/2022/02/28/peace/</url>
    <content><![CDATA[<p>Dear friends, today I just want to share some words about my feelings towards the event between Ukraine and Russia, not related to the political issue or something similar. I have considered it as proof that life changes unexpectedly, no matter what.</p>
<a id="more"></a>
<p>We never know what will come tomorrow, and anything can happen for a reason.</p>
<p>It‚Äôs like what has happened to Ukraine and Russia recently. We don‚Äôt expect war to come, but it is happening in front of the world‚Äôs observation. I don‚Äôt know how others have felt about that, to me, I have been shocked and cannot say a word. From my heart, I have wondered if that war can really solve the problem between those countries or if there will be more and more innocent people suffering.</p>
<p>I cannot imagine that it came so suddenly. I have been worried for Ukrainian partners who had worked closely with me before the war occurred. We were working and talking to each other online as usual, then one day they were all offline and uncontactable. Then, I read in the news that all Ukrainian males, from 18 to 60, must take part in the campaign fighting against Russian. Nothing I can do, but praying for them all to be fine, then they can return home alive, safe and sound.</p>
<p>I think that you may experience that kind of feeling sometimes in your lives. Today, we still saw our friends in front of our eyes, worked and laughed. One day later, they were away, fighting to protect their countries, no promises when war was over that we could see each other again. I really really want to see our Ukrainian friends again and we can work together as before.</p>
<p>Changes, although we don‚Äôt know where or what those changes lead us to, are inevitable. And whether we are ready for it or not, there is nothing we can do to stop it, but come over it by one way or another. I‚Äôm keeping praying for it to end in peace with the least suffering.</p>
<p>From VN we pray.</p>
]]></content>
      <categories>
        <category>Living</category>
      </categories>
      <tags>
        <tag>Ukraine</tag>
        <tag>War</tag>
      </tags>
  </entry>
  <entry>
    <title>Run Headless Chrome Browser Inside a Docker Container</title>
    <url>/2020/11/20/run-headless-chrome-inside-a-docker-container/</url>
    <content><![CDATA[<h1 id="overview">1. Overview</h1>
<p>This is a simple example of how to config your own headless chrome browser inside a docker container. Then use a simple Python web application to say hello world with python selenium.</p>
<p>Project structure: - app.py - Dockerfile - bin/ + chromedriver + google-chrome-87_amd64.deb</p>
<p>Source code on <a href="https://github.com/hoangchunghien/headless-browser-docker-example">GitHub</a></p>
<h1 id="coding">2. Coding</h1>
<ul>
<li><code>Dockerfile</code></li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install manually all the missing libraries</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install -y gconf-service libasound2 libatk1.0-0 libcairo2 libcups2 libfontconfig1 libgdk-pixbuf2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libxss1 fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install libgbm1 -y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Chrome</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> bin/chromedriver /usr/bin/chromedriver</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> bin/google-chrome-87_amd64.deb .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> dpkg -i google-chrome-87_amd64.deb; apt-get -fy install</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Allow statements and log messages to immediately appear in the Knative logs</span></span><br><span class="line"><span class="keyword">ENV</span> PYTHONUNBUFFERED True</span><br><span class="line"><span class="keyword">ENV</span> PORT <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install gunicorn</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Python dependencies.</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> requirements.txt requirements.txt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Copy local code to the container image.</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> app.py /app/app.py</span></span><br><span class="line"><span class="keyword">ENV</span> APP_HOME /app</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$APP_HOME</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Run the web service on container startup.</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">exec</span> gunicorn --<span class="built_in">bind</span> :<span class="variable">$PORT</span> --workers 1 --threads 8 --timeout 0 app:app</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>app.py</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, send_file</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">options = Options()</span><br><span class="line">options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">options.add_argument(<span class="string">&quot;--disable-gpu&quot;</span>)</span><br><span class="line">options.add_argument(<span class="string">&quot;--disable-dev-shm-usage&quot;</span>)</span><br><span class="line">options.add_argument(<span class="string">&quot;--no-sandbox&quot;</span>)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;, methods=[&#x27;GET&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>():</span></span><br><span class="line">    driver = webdriver.Chrome(chrome_options=options)</span><br><span class="line">    driver.get(<span class="string">&#x27;https://www.google.com&#x27;</span>)</span><br><span class="line">    driver.save_screenshot(<span class="string">&quot;screenshot.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> send_file(<span class="string">&quot;screenshot.png&quot;</span>, mimetype=<span class="string">&#x27;image/png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="built_in">int</span>(os.environ.get(<span class="string">&#x27;PORT&#x27;</span>, <span class="number">5000</span>)))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="test-it">3. Test it</h1>
<ul>
<li>Build the docker image</li>
</ul>
<p><code>docker build -t headless .</code></p>
<ul>
<li>Run the docker container</li>
</ul>
<p><code>docker run -it -p 5000:5000 headless</code></p>
<ul>
<li>Open the link <a href="http://localhost:5000">http://localhost:5000</a></li>
</ul>
<p><img src="/images/2020-11-20/001.png"></p>
]]></content>
      <categories>
        <category>Web Development</category>
        <category>DevOps and Cloud Solutions</category>
        <category>Programming and Scripting</category>
        <category>Software Testing and QA</category>
        <category>Technology Tutorials</category>
        <category>Automation and Efficiency</category>
      </categories>
      <tags>
        <tag>Cloud Computing</tag>
        <tag>DevOps Tools</tag>
        <tag>Programming Tips</tag>
        <tag>Headless Chrome</tag>
        <tag>Docker Containers</tag>
        <tag>Web Automation</tag>
        <tag>Selenium WebDriver</tag>
        <tag>Python Programming</tag>
        <tag>Flask Web Framework</tag>
        <tag>Browser Automation</tag>
        <tag>Software Testing</tag>
        <tag>Web Scraping</tag>
        <tag>Containerization</tag>
        <tag>Google Chrome</tag>
        <tag>Technology Tutorials</tag>
        <tag>Python Flask</tag>
        <tag>Automated Testing</tag>
        <tag>Web Development</tag>
        <tag>Tech How-To</tag>
        <tag>Docker Deployment</tag>
      </tags>
  </entry>
  <entry>
    <title>Visualize high-dimensional dataset in a 2D Chart.</title>
    <url>/2020/10/23/how-to-visualize-your-dataset-in-a-2d-or-3d-chart/</url>
    <content><![CDATA[<p><img src="/images/2020-10-23/001.png" /> In this post, I'll use a well known dataset <a href="http://yann.lecun.com/exdb/mnist/">MINIST handwritten</a>. There are <code>70,000</code> images, each image in this dataset is of size <code>28x28</code>.</p>
<h4 id="first-import-the-libraries-we-are-going-to-use.">First, import the libraries we are going to use.</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> manifold</span><br><span class="line"></span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure>
<p>I'm using <code>matplotlib</code> and <code>seaborn</code> for visualization. <code>numpy</code> and <code>pandas</code> to handle numerical arrays and dataframe. I'm also use <code>scikit-learn</code> to get the data and perform <code>t-SNE</code>.</p>
<h4 id="download-the-dataset">Download the dataset</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = datasets.fetch_openml(<span class="string">&#x27;mnist_784&#x27;</span>, version=<span class="number">1</span>, return_X_y=<span class="literal">True</span>)</span><br><span class="line">pixel_values, targets = data</span><br><span class="line">targets = targets.astype(<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">print(pixel_values.shape)</span><br></pre></td></tr></table></figure>
<p><strong>(70000, 784)</strong></p>
<p>The dataset downloaded has 70,000 records, each record has 784 columns.</p>
<h4 id="lets-plot-an-image-to-see-what-does-it-look-like">Let's plot an image to see what does it look like</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">image = pixel_values[<span class="number">0</span>, :].reshape(<span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line">plt.imshow(image, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br></pre></td></tr></table></figure>

<div style="display:flex;align-items:start"><img src="/images/2020-10-23/002.png" /></div>

<p>The image in the dataset has size <code>768</code>, so I need convert it to <code>28x28</code>.</p>
<h4 id="now-the-importance-part-compute-t-sne">Now the importance part, compute t-SNE</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tsne = manifold.TSNE(n_components=<span class="number">2</span>, random_state=<span class="number">42</span>)</span><br><span class="line">transformed_data = tsne.fit_transform(pixel_values[:<span class="number">6000</span>, :])</span><br><span class="line"></span><br><span class="line">print(transformed_data.shape)</span><br></pre></td></tr></table></figure>
<p><strong>(6000, 2)</strong></p>
<p>In this example, I using only <code>6000</code> rows, and reduce the columns from <code>768</code> to <code>2</code>. Enough for plotting the data to 2D chart.</p>
<h4 id="lets-visualize-the-transformed-dataset">Let's visualize the transformed dataset</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tsne_df = pd.DataFrame(np.column_stack((transformed_data, targets[:<span class="number">6000</span>])), columns=[<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;targets&#x27;</span>])</span><br><span class="line">tsne_df.loc[:, <span class="string">&#x27;targets&#x27;</span>] = tsne_df.targets.astype(<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">grid = sns.FacetGrid(tsne_df, hue=<span class="string">&#x27;targets&#x27;</span>, height=<span class="number">8</span>)</span><br><span class="line">grid.<span class="built_in">map</span>(plt.scatter, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>).add_legend()</span><br></pre></td></tr></table></figure>

<div style="display:flex;align-items:start"><img src="/images/2020-10-23/003.png" /></div>

<p>This is one way to visualize dataset. By plotting the dataset in the chart, we can see that, the number <code>0</code> and <code>6</code> are distinguishable easily. The number <code>4</code> and <code>9</code> are harder to distinguish.</p>
]]></content>
      <categories>
        <category>Analytics</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Data visualization</tag>
        <tag>Chart</tag>
        <tag>Decomposition</tag>
        <tag>t-SNE</tag>
        <tag>Jupyter Notebook</tag>
        <tag>MNIST</tag>
        <tag>Matplotlib</tag>
        <tag>Seaborn</tag>
      </tags>
  </entry>
  <entry>
    <title>Setup your VPN server the easy way using docker</title>
    <url>/2020/10/30/setup-self-openvpn-server/</url>
    <content><![CDATA[<p><img src="/images/2020-10-30/004.png" /></p>
<p>In this post, I will show you how to setup your own VPN server in a few simple steps.</p>
<h2 id="setup">## 1. Setup</h2>
<h3 id="step-1---create-a-docker-volume-to-save-configuration">Step 1 - Create a docker volume to save configuration</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker volume create --name ovpn-data</span></span><br></pre></td></tr></table></figure>
<h3 id="step-2---generate-config">Step 2 - Generate config</h3>
<p>This step will pull the docker image <code>kylemanna/openvpn:2.3</code> and run command <code>ovpn_genconfig</code>. The <strong>IP_ADDRESS</strong> or <strong>DOMAIN</strong> is your public ip address, eg <code>udp://vpn.hienhoang.ml</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -v ovpn-data:/etc/openvpn --log-driver=none --rm kylemanna/openvpn:2.3 ovpn_genconfig -u udp://&#123;&#123;IP_ADDRESS | DOMAIN&#125;&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="step-3---generate-public-private-key">Step 3 - Generate public private key</h3>
<p>This step will generate public private key. You must type in 4 to 1023 characters when ask for PEM pass phrase. This will take a few minutes to generate a strong private key. <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -v ovpn-data:/etc/openvpn --log-driver=none --rm -it kylemanna/openvpn:2.3 ovpn_initpki</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> init-pki complete; you may now create a CA or requests.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Your newly created PKI dir is: /etc/openvpn/pki</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Generating a 2048 bit RSA private key</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> .......................................................................+++</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> .....................................+++</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> writing new private key to <span class="string">&#x27;/etc/openvpn/pki/private/ca.key.XXXXlNLGLn&#x27;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Enter PEM pass phrase:</span></span><br></pre></td></tr></table></figure></p>
<p>Next command is to generate client key <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -v ovpn-data:/etc/openvpn -d -p 1194:1194/udp --cap-add=NET_ADMIN kylemanna/openvpn:2.3</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -v ovpn-data:/etc/openvpn --log-driver=none --rm -it kylemanna/openvpn:2.3 easyrsa build-client-full my_vpn nopass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Generating a 2048 bit RSA private key</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ...................+++</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ........+++</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> writing new private key to <span class="string">&#x27;/etc/openvpn/pki/private/my_vpn.key.XXXXpkifIk&#x27;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> -----</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Using configuration from /usr/share/easy-rsa/openssl-1.0.cnf</span></span><br></pre></td></tr></table></figure></p>
<h3 id="step-4---export-the-ovpn-file">Step 4 - Export the ovpn file</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -v ovpn-data:/etc/openvpn --log-driver=none --rm kylemanna/openvpn:2.3 ovpn_getclient my_vpn &gt; my_vpn.ovpn</span></span><br></pre></td></tr></table></figure>
<p>That's it. <code>my_vpn.ovpn</code> is what you need to connect to this VPN server.</p>
<h2 id="usage">## 2. Usage</h2>
<h3 id="check-your-vpn-server-running">Check your VPN server running</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> CONTAINER ID        IMAGE                   COMMAND             CREATED             STATUS              PORTS                    NAMES</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 04002f98ff76        kylemanna/openvpn:2.3   <span class="string">&quot;ovpn_run&quot;</span>          4 minutes ago       Up 4 minutes        0.0.0.0:1194-&gt;1194/udp   strange_wilbur</span></span><br></pre></td></tr></table></figure>
<h3 id="import-the-.ovpn-file-using-openvpn-client">Import the .ovpn file using openvpn client</h3>
<p><code>Import profile</code> -&gt; <code>FILE</code> <img src="/images/2020-10-30/001.png" /></p>
<p>Open the <code>.ovpn</code> file you generated above. <img src="/images/2020-10-30/002.png" /></p>
<p>Then click <code>Add</code> and Connect <img src="/images/2020-10-30/003.png" /></p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>Docker</tag>
        <tag>VPN</tag>
        <tag>DIY</tag>
      </tags>
  </entry>
  <entry>
    <title>The Chinese Double Ninth Festival</title>
    <url>/2020/10/26/the-chinese-double-ninth-festival/</url>
    <content><![CDATA[<p><img src="/images/2020-10-26/001.jpg" /></p>
<p>Hey, how do you do? Today I'm going to tell you about one of many traditional Chinese festival, which is called The Double Ninth Festival (<strong>Chong Yang</strong> Festival or <strong>Chung Yeung</strong> Festival in China, Hong Kong, Macao and Taiwan, Vietnamese: <strong>T·∫øt Tr√πng C·ª≠u</strong> or <strong>T·∫øt Tr√πng D∆∞∆°ng</strong>), as it occurs on the ninth day of the ninth month of the Chinese calendar. I possess the Guangdong origin, so to me and many other Guangdong people, it's a special occasion to visit our ancestors, tidy up their graves and express our respects and gratefulness. It happens every year with the same ceremony, but my feelings change every time I experience the festival. Last Saturday, I caught the bus that took me almost 8 hours, for about 300km from Ho Chi Minh City to my home town in Lam Dong Province, to attend The Double Ninth Festival on Sunday. This time brought to me some emotional moments that I wanted to share to you guys as soon as I went back to the city. So, are you ready for what I'm going to tell you now? Ok, scroll down to read more!</p>
<p>After 8 hours on the bus, I finally arrived home in the late evening, about 7:30pm. I made a video call to my wife to say I was safe and sound at home already. This time I went back to my hometown without her, as she needs to take care our 5-month-old baby. So, I just felt a little empty there, but after the festival, I would see her on Monday.</p>
<p>Waking up in the Sunday morning embraced by the cool atmosphere, I felt relax and time seemed to fly slowly. I made myself a cup of coffee, oh I really miss the taste of coffee that my wife preopares for me every morning. I have never found anyone making coffee more stunning than she does, even including me. She usually says the secret recipe is her love for me that make the coffee's flavor more beautiful. You see, I totally completely agree!</p>
<p>After breakfast, my mom and I were ready to go to the cemetery for the Chinese ancestors. My mom had prepared all the worship things, such as boiled chicken &amp; pork, wine, cooked rice, bunch of incense, votive paper, etc., all for the ceremony. We would visit my grandpa's grave first, then my dad's as usual. The road led to the cemetary hadn't been upgraded yet so it was still rocky and wild. Luckily, it was sunny on that day so the road was easy for people to move. Weeds were almost everywhere in the cemetery, covering my grandpa's and dad's graves. As my grandpa's one were built with cement, under the changes of weather with rainy and sunny days, it became mossy and ancient. My cleared up the weeds while my mom setting up all the worship things in front of the grave. In the cemetery, there were not only us, but also other families. The smoke of burned incenses spreaded in the air, following the wind up to the sky, which made the whole scene there more magical and emotional. I remember many years ago, when I was little boy just started having memory, my grandpa was a gentle man who also love drinking coffee like me today. Once I watched him making a cup of coffee with glittering eyes, he turned and said to me with a smile on his face, "You are not old enough to drink coffee, kid." Such a lovely memory, right!</p>
<p>About an hour later, we walked to my dad's grave. Unlike my grandpa's, his grave was smaller and hadn't been built with cement yet, just been covered with earth where weeds were overgrown. I used a hoe to tidy up those weeds, at the same time, my mom arranged worship things in front of the grave. The incense again spreaded in the air. It was nearly noon, hot but windy, I was standing there, looking at my dad's photo on the cold gravestone, I realized that I a little bit missed him. There was a farm next to the cemetery, which reminded me the moments when he had been with me. At that time, I was still a little boy, following him to our coffee farm on a hill by bikes. In order to get there, we had to came across a stream. That was my first time going there, he had told me to stop and go off the bike, then walk across the stream. However, it was a new adventure for a boy, I was so excited that I forgot what he had told. I came across the stream with all my wild heart and spirit, my bike cut through the stream without a second of hesitation, making water splashed on both sides, then bumping into my dad's bike. He was panic a little bit, while I was laughing out loud. Another hour passed, we packed the food and went home, left behind the incense smoke...</p>
<p>Memory of childhood is something beautiful to me. Life is short, so treasure our present before it turns to memory that would make we smile when we getting old. One day of The Double Ninth Festival was over. We went home to have lunch and take a rest. I came back to Ho Chi Minh city on that night with lots of feelings. Maybe I have grown up a little bit. Maybe I learned something in my life. Finally, thank you all for reading up to this line. Bye and enjoy!</p>
]]></content>
      <categories>
        <category>Living</category>
      </categories>
      <tags>
        <tag>Living</tag>
        <tag>Chung Yeung</tag>
        <tag>Anniversary</tag>
      </tags>
  </entry>
  <entry>
    <title>Year End 2020</title>
    <url>/2021/02/01/year-end-2020/</url>
    <content><![CDATA[<p>Hey, how do you do? Hope you had a good time in 2020.</p>
<p><img src="/images/2021-02-01/004.jpg"></p>
<a id="more"></a>
<p>I‚Äôve spent two days and one night at last weekend for the company trip to Ho Coc - Ho Tram in Ba Ria - Vung Tau, where I had a great time with my family and colleagues by attending many team building activities and the happy year end party. That was the occasion for us to release the stress, laugh and play, then to look back what we experienced and achieved through out the difficult year 2020 due to Covid-19.</p>
<p>The trip started early on Sat 30 Jan 2021, at 5am, with nearly 100 attendees, including me and my family. I wanted to introduce the sunshine as well as the ocean waves on the long beach to my little son, so I brought my wife and him along the trip. He just turned 8 months old and he had been so curious about everything in this world. I had also felt excited and looked forward to going there. That was the first time I came to Ho Tram beach.</p>
<p>After about 3 hours, we finally got there. YAY~ ..... BUT! We had to complete the team building activities designed by the tour company before we were free to do whatever we liked. Team building activities were action games on the beach that required the team players‚Äô unity spirit, strength and strategy. I found those games interesting but they took lots of efforts to win. Everyone felt tired but satisfied after the games. Then we went to stay at a resort nearby, waiting for the Year End Party in the evening.</p>
<div class="video-container"><iframe src="https://www.youtube.com/embed/ZuCm-tahGbM?t=58" frameborder="0" loading="lazy" allowfullscreen></iframe></div>
<p>In the afternoon, I took my wife and little son to the beach to play on the sand under the warm sun. It was windy and the waves were big and strong, the water was cool, which seemed not to be an ideal condition for swimming or soaking. That was my son‚Äôs first time putting his little feet in the sea waves coming in and seeing the sand moving when the waves coming out.</p>
<p><img src="/images/2021-02-01/001.jpeg"></p>
<p>Like any other babies, he liked to play with water a lot. When the waves turned bigger, we moved to the dry place and built the sand castle. I was surprised that he didn‚Äôt put the sand in his mouth, such a smart guy haha. After a while, he fell asleep in his mommy‚Äôs arms. Looking my wife hugging him, laying on the chair under the beautiful golden sunshine, listening to the endless ocean waves, I found the peaceful and happiness from the bottom of my heart.</p>
<p><img src="/images/2021-02-01/002.jpeg"></p>
<p>At that time I understood what it meant by saying the time seemed to pause for a moment. We went back to our room as the sun started setting to the west, preparing for the Year End Party.</p>
<p>The purpose of the party was to flashback what happened in last year 2020, honoring those who contributed great values to the company, and cheer up with the music shows and delicious food at the same time. Unexpectedly, I was called to the stage and received two awards, which were <strong>The Best Trainer</strong> and The Promotion from a Senior Software Engineer to <strong>Principal Software Engineer</strong>. What a big surprised to me.</p>
<p><img src="/images/2021-02-01/003.jpeg"></p>
<p>What a meaningful company trip! My wife said that she had been very happy as well as proud of me. The party went on in the warm atmosphere that people sang, danced, laughed and drunk beers. My little son fell asleep in his mommy‚Äôs arms again. He seemed to prefer sleeping in the noisy places haha. So, as soon as we finished the meal, we went back to the room and rested. That were all for the first day of the trip, also the important one. Next day, we had breakfast at the resort‚Äôs restaurant. Then we checked out at 11:30am. Our trip ended.</p>
<p>To me, although that trip was short but it brought to me many unforgettable moments with family and friends. Life is full of unexpectation, and I‚Äôm happy with it. After the trip, Tet holiday is coming to town! I will update our new journeys and share to you guys soon~!</p>
<p>Thanks for reading up to this line!</p>
]]></content>
      <categories>
        <category>Living</category>
      </categories>
      <tags>
        <tag>Living</tag>
        <tag>Family</tag>
      </tags>
  </entry>
  <entry>
    <title>10 Tips You Must Know for Effectively Using CloudWatch Logs Insights</title>
    <url>/2023/12/21/10-Tips-You-Must-Know-for-Effectively-Using-CloudWatch-Logs-Insights/</url>
    <content><![CDATA[<p>Amazon CloudWatch Logs Insights is a robust tool for log analysis, allowing you to delve into your log data for valuable insights. Whether you're monitoring application health, debugging issues, or just trying to understand your system better, these 10 tips will help you use CloudWatch Logs Insights more effectively.</p>
<h2 id="embrace-structured-logging">1. Embrace Structured Logging</h2>
<p>Structured logs, like JSON, are more accessible for CloudWatch to parse and analyze. For example:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">&quot;timestamp&quot;</span>: <span class="string">&quot;2021-01-01T12:00:00Z&quot;</span>, <span class="attr">&quot;logLevel&quot;</span>: <span class="string">&quot;ERROR&quot;</span>, <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;Error connecting to database&quot;</span> &#125;</span><br></pre></td></tr></table></figure>
<p>This format enables easier querying and extraction of specific log details.</p>
<h2 id="master-the-parse-command">2. Master the Parse Command</h2>
<p>Extract crucial information from plain text logs using the parse command:</p>
<p>Consider the log message:</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> - - [<span class="number">10</span>/Oct/<span class="number">2023</span>:<span class="number">13</span>:<span class="number">55</span>:<span class="number">36</span> +<span class="number">0000</span>] <span class="string">&quot;GET /api/v1/products HTTP/1.1&quot;</span> <span class="number">200</span> <span class="number">123</span> <span class="number">0.157</span></span><br></pre></td></tr></table></figure>
<p>You can parse it with:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">fields <span class="meta">@timestamp</span>, <span class="meta">@message</span></span><br><span class="line">| parse <span class="meta">@message</span> <span class="string">&quot;* - - [*] \&quot;* * *\&quot; * * *&quot;</span> <span class="keyword">as</span> ip, datetime, method, url, protocol, statusCode, size, responseTime</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Here's what happens:</p>
<a id="more"></a>
<ul>
<li>The pattern <code>* - - [*] \"* * *\" * * *</code> is used to match the log's structure.</li>
<li>Each <code>*</code> corresponds to a part of the log you want to extract, e.g., <code>ip</code>, <code>datetime</code>, etc.</li>
<li>The literal parts like <code>- -</code>, <code>[</code>, <code>]</code>, and quotes (<code>"</code>) help CloudWatch identify the structure of your log.</li>
</ul>
<p><strong>Limitations</strong></p>
<ul>
<li>Pattern Precision: The pattern in the parse command must precisely match the log format. If the log format varies, parsing may fail for some entries.</li>
<li>Performance Impact: Complex parsing over large volumes of data can impact query performance.</li>
</ul>
<h2 id="optimize-query-syntax">3. Optimize Query Syntax:</h2>
<p>Familiarize yourself with CloudWatch Logs Insights query syntax. Using functions like <code>filter</code>, <code>sort</code>, <code>limit</code>, and <code>stats</code> can help you quickly pinpoint the information you need.</p>
<p><strong>Understanding Key Components</strong></p>
<ol type="1">
<li><strong>Filtering</strong>:</li>
</ol>
<ul>
<li>The <code>filter</code> command narrows down your log data to the entries that match certain criteria.</li>
<li>Example: <code>filter logLevel = 'ERROR'</code> will only include log entries where the <strong>logLevel</strong> is <strong>ERROR</strong>.</li>
</ul>
<ol start="2" type="1">
<li><strong>Sorting</strong>:</li>
</ol>
<ul>
<li>The <code>sort</code> command orders the results based on one or more fields.</li>
<li>Example: <code>sort @timestamp desc</code> sorts the logs in descending order based on the timestamp.</li>
</ul>
<ol start="3" type="1">
<li><strong>Limiting Results</strong>:</li>
</ol>
<ul>
<li>The <code>limit</code> command restricts the number of log entries returned by your query.</li>
<li>Example: <code>limit 20</code> will return only the first 20 log entries that match your query.</li>
</ul>
<p><strong>Advanced Query Functions</strong></p>
<ol type="1">
<li><strong>Aggregation</strong>:</li>
</ol>
<ul>
<li>Functions like <code>count()</code>, <code>sum()</code>, <code>avg()</code>, etc., allow you to summarize your data.</li>
<li>Example: <code>stats count() by logLevel</code> will give you a count of log entries for each log level.</li>
</ul>
<ol start="2" type="1">
<li><strong>Field Selection</strong>:</li>
</ol>
<ul>
<li>You can specify which fields to include in your results with the <code>fields</code> command.</li>
<li>Example: <code>fields @timestamp, @message, logLevel</code> will only return these specific fields in each log entry.</li>
</ul>
<ol start="3" type="1">
<li><strong>Time Grouping</strong>:</li>
</ol>
<ul>
<li>The <code>bin()</code> function can be used to aggregate data over time intervals.</li>
<li>Example: <code>stats count() by bin(1h)</code> will group the data into hourly bins and count the number of logs in each bin.</li>
</ul>
<p><strong>Query Optimization Tips</strong></p>
<ol type="1">
<li><strong>Start with a Narrow Time Range</strong>:</li>
</ol>
<ul>
<li>Begin your queries with a specific time range to reduce the amount of data being processed.</li>
<li>Example: <code>filter @timestamp &gt;= -24h</code> focuses on the last 24 hours.</li>
</ul>
<ol start="2" type="1">
<li><strong>Use Specific Filters</strong>:</li>
</ol>
<ul>
<li>Apply precise filters to limit the data to only what‚Äôs relevant for your analysis.</li>
<li>Example: <code>filter statusCode &gt;= 400</code> will only include logs with HTTP status codes of 400 and above.</li>
</ul>
<ol start="3" type="1">
<li><strong>Combine Commands Efficiently</strong>:</li>
</ol>
<ul>
<li>Chain multiple commands in a logical order to efficiently process the data.</li>
<li>Example: <code>filter logLevel = 'ERROR' | sort @timestamp desc | limit 10</code> <strong>filters</strong>, <strong>sorts</strong>, and <strong>limits</strong> the log entries in one go.</li>
</ul>
<p><strong>Practical Example</strong></p>
<p>Let's say you want to analyze error logs for your application for the last 7 days, focusing on the most common errors. A well-optimized query might look like this:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">filter <span class="meta">@timestamp</span> &gt;= -<span class="number">7</span>d and logLevel = <span class="string">&#x27;ERROR&#x27;</span></span><br><span class="line">| fields <span class="meta">@timestamp</span>, errorCode, errorMessage</span><br><span class="line">| stats count() <span class="keyword">as</span> ErrorCount <span class="keyword">by</span> errorCode</span><br><span class="line">| sort ErrorCount desc</span><br><span class="line">| limit <span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>In this query:</p>
<ul>
<li>We filter logs from the last 7 days where <code>logLevel</code> is 'ERROR'.</li>
<li>We select only relevant fields: <code>@timestamp</code>, <code>errorCode</code>, and <code>errorMessage</code>.</li>
<li>We aggregate the data to count occurrences of each <code>errorCode</code>.</li>
<li>We sort the results to show the most common errors first.</li>
<li>We limit the results to the top 10 error codes.</li>
</ul>
<h2 id="aggregate-and-visualize-data">4. Aggregate and Visualize Data:</h2>
<p>Use the aggregation functions like count(), sum(), and avg() to summarize your data. Visualize the results using graphs and charts for better insights.</p>
<p><strong>Aggregation Functions</strong></p>
<ol type="1">
<li><strong>Count</strong>:</li>
</ol>
<ul>
<li><code>count()</code> calculates the number of log entries that match your query.</li>
<li>Example: <code>stats count()</code> by logLevel counts log entries for each log level.</li>
</ul>
<ol start="2" type="1">
<li><strong>Sum</strong>:</li>
</ol>
<ul>
<li><code>sum(fieldName)</code> adds up the numeric values of the specified field across all log entries.</li>
<li>Example: <code>stats sum(bytesTransferred)</code> calculates the total bytes transferred.</li>
</ul>
<ol start="3" type="1">
<li><strong>Average</strong>:</li>
</ol>
<ul>
<li><code>avg(fieldName)</code> computes the average of the specified numeric field.</li>
<li>Example: <code>stats avg(responseTime)</code> finds the average response time.</li>
</ul>
<ol start="4" type="1">
<li><strong>Minimum and Maximum</strong>:</li>
</ol>
<ul>
<li><code>min(fieldName)</code> and <code>max(fieldName)</code> find the smallest and largest values of a field, respectively.</li>
<li>Example: <code>stats min(memoryUsage), max(memoryUsage)</code> finds the minimum and maximum memory usage.</li>
</ul>
<ol start="5" type="1">
<li><strong>Grouping Data</strong>:</li>
</ol>
<ul>
<li>These functions can be used with <code>by</code> to group data.</li>
<li>Example, <code>stats count() by url</code> counts log entries for each URL.</li>
</ul>
<p><strong>Visualization</strong></p>
<ol type="1">
<li><strong>Graphs and Charts</strong>:</li>
</ol>
<ul>
<li>After running a query in CloudWatch Logs Insights, you can visualize the results in graphs and charts.</li>
<li>This is useful for identifying trends, spikes, or anomalies in your data.</li>
</ul>
<ol start="2" type="1">
<li><strong>Types of Visualizations</strong>:</li>
</ol>
<ul>
<li>CloudWatch supports various types of visualizations like line charts, bar charts, and pie charts.</li>
<li>The choice of visualization depends on what aspect of the data you want to emphasize.</li>
</ul>
<ol start="4" type="1">
<li><strong>Adding to Dashboards</strong>:</li>
</ol>
<ul>
<li>You can add these visualizations to CloudWatch dashboards for ongoing monitoring.</li>
<li>This allows for real-time tracking of key metrics extracted from your logs.</li>
</ul>
<p><strong>Advanced Techniques</strong></p>
<ol type="1">
<li><strong>Time Series Analysis</strong>:</li>
</ol>
<ul>
<li>Use the <code>bin()</code> function to aggregate data over time intervals, essential for time series analysis.</li>
<li>Example: <code>stats count() by bin(1h)</code> groups log data into hourly bins.</li>
</ul>
<ol start="2" type="1">
<li><strong>Combining Aggregations</strong>:</li>
</ol>
<ul>
<li>You can combine multiple aggregation functions in a single query.</li>
<li>Example: <code>stats count(), avg(responseTime), max(responseTime) by endpoint</code> gives a comprehensive view of each endpoint.</li>
</ul>
<p><strong>Practical Example</strong></p>
<p>Suppose you want to analyze web server logs to understand traffic patterns and response times. A query like this could be used:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filter @timestamp &gt;&#x3D; -7d</span><br><span class="line">| stats count() as requestCount, avg(responseTime) as averageResponseTime by url</span><br><span class="line">| sort requestCount desc</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>In this query:</p>
<ul>
<li>We filter logs from the last 7 days.</li>
<li>We use stats to count requests and calculate average response time for each URL.</li>
<li>We sort the results by request count to see the most visited URLs.</li>
</ul>
<p>After running this query, you can visualize the results to see which URLs are most and least visited, and their corresponding response times. This helps in quickly identifying URLs that might be under heavy load or performing poorly.</p>
<h2 id="set-up-alerts-based-on-query-results">5. Set Up Alerts Based on Query Results:</h2>
<p>Create alarms based on specific query results. For example, you can set up an alert if the number of error messages in a log exceeds a certain threshold.</p>
<p><strong>Understanding Alerting in CloudWatch</strong></p>
<ol type="1">
<li><strong>Alarm Creation</strong>:</li>
</ol>
<ul>
<li>CloudWatch Alarms can be created to trigger notifications or actions based on specific metrics or log patterns.</li>
<li>You can set an alarm to watch a single metric or the result of a Logs Insights query.</li>
</ul>
<ol start="2" type="1">
<li><strong>Metric Filters</strong>:</li>
</ol>
<ul>
<li>To create an alert based on log data, you first need to create a metric filter.</li>
<li>This filter turns log data into a CloudWatch metric, based on criteria you specify.</li>
</ul>
<ol start="3" type="1">
<li><strong>Alarm Conditions</strong>:</li>
</ol>
<ul>
<li>When creating an alarm, you define conditions (e.g., a threshold value) under which the alarm should be triggered.</li>
</ul>
<ol start="4" type="1">
<li><strong>Notification Setup</strong>:</li>
</ol>
<ul>
<li>Alarms can be configured to send notifications through Amazon SNS (Simple Notification Service).</li>
<li>You can specify who gets notified and how (e.g., email, SMS, Lambda functions).</li>
</ul>
<p><strong>Steps to Set Up an Alert</strong></p>
<ol type="1">
<li><strong>Define the Metric Filter</strong>:</li>
</ol>
<ul>
<li>Identify the log pattern that you want to monitor.</li>
<li>Create a metric filter that matches this pattern and transforms it into a quantifiable metric.</li>
</ul>
<ol start="2" type="1">
<li><strong>Create a CloudWatch Alarm</strong>:</li>
</ol>
<ul>
<li>Use the metric created by the metric filter to set up an alarm.</li>
<li>Specify the threshold that should trigger the alarm.</li>
</ul>
<ol start="3" type="1">
<li><strong>Configure Notifications</strong>:</li>
</ol>
<ul>
<li>Link the alarm to an SNS topic.</li>
<li>Subscribe to this SNS topic with your email address, phone number, or a service endpoint.</li>
</ul>
<ol start="4" type="1">
<li><strong>Test Your Alarm</strong>:</li>
</ol>
<ul>
<li>Generate log events that match your filter to test if the alarm triggers correctly.</li>
<li>Adjust the metric filter and alarm settings as needed based on these tests.</li>
</ul>
<p><strong>Practical Example</strong></p>
<p>Imagine you want to create an alert for when your application logs more than 50 error messages in an hour. Here's how you could set it up:</p>
<ol type="1">
<li><strong>Metric Filter</strong>:</li>
</ol>
<ul>
<li>Create a filter that matches log entries with an error level, e.g., logLevel = 'ERROR'.</li>
<li>Configure the filter to increment a metric each time this pattern is matched.</li>
</ul>
<ol start="2" type="1">
<li><strong>CloudWatch Alarm</strong>:</li>
</ol>
<ul>
<li>Create an alarm based on the error metric.</li>
<li>Set the alarm condition to trigger if the metric value exceeds 50 in a one-hour period.</li>
</ul>
<ol start="3" type="1">
<li><strong>Notifications</strong>:</li>
</ol>
<ul>
<li>Link the alarm to an SNS topic.</li>
<li>Subscribe your email or phone number to this topic for notifications.</li>
</ul>
<ol start="4" type="1">
<li><strong>Verification</strong>:</li>
</ol>
<ul>
<li>Simulate or wait for the error condition to occur.</li>
<li>Verify that the alarm triggers and you receive the notification.</li>
</ul>
<p>By using these steps to set up alerts, you can ensure that you're proactively informed about critical issues as they arise, allowing for quicker response times and more effective incident management. This is an essential practice for maintaining the health and reliability of your applications and systems.</p>
<h2 id="use-time-frame-wisely">6. Use Time Frame Wisely:</h2>
<p>Adjust the time range for your queries to focus on relevant data. Narrowing down the time range can significantly speed up the query execution.</p>
<p><strong>Importance of Time Range Selection</strong></p>
<ol type="1">
<li><strong>Performance</strong>:</li>
</ol>
<ul>
<li>Narrower time ranges typically mean less data to sift through, leading to faster query execution.</li>
<li>This is particularly important when dealing with large volumes of log data.</li>
</ul>
<ol start="2" type="1">
<li><strong>Relevance</strong>:</li>
</ol>
<ul>
<li>Focusing on a specific time range can help ensure that the data you're analyzing is relevant to the issue or trend you're investigating.</li>
<li>This is key for troubleshooting issues or understanding recent system behavior.</li>
</ul>
<p><strong>Strategies for Time Frame Selection</strong></p>
<ol type="1">
<li><strong>Start Broad, Then Narrow Down</strong>:</li>
</ol>
<ul>
<li>Begin with a broader time range to get an overview, then narrow it down based on what you find.</li>
<li>This approach can help identify when an issue started or how it evolved.</li>
</ul>
<ol start="2" type="1">
<li><strong>Use Relative Time Frames</strong>:</li>
</ol>
<ul>
<li>CloudWatch supports relative time frames, like <code>-24h</code> (last 24 hours) or <code>-1w</code>(last week).</li>
<li>These are convenient for ongoing analysis and routine checks.</li>
</ul>
<ol start="3" type="1">
<li><strong>Align with Incident Timelines</strong>:</li>
</ol>
<ul>
<li>When troubleshooting, align your query time frame with the incident timeline.</li>
<li>This helps in isolating logs that are directly relevant to the issue.</li>
</ul>
<p><strong>Example Queries</strong></p>
<ol type="1">
<li><strong>Broad Overview</strong>:</li>
</ol>
<ul>
<li>For a general overview: <code>filter @timestamp &gt;= -1w</code></li>
<li>This query looks at logs from the past week.</li>
</ul>
<ol start="2" type="1">
<li><strong>Focused Analysis</strong>:</li>
</ol>
<ul>
<li>For specific incident analysis: <code>filter @timestamp &gt;= '2023-10-01T00:00:00Z' and @timestamp &lt;= '2023-10-01T02:00:00Z'</code></li>
<li>This query focuses on a two-hour window on October 1, 2023.</li>
</ul>
<p><strong>Practical Application</strong></p>
<p>Let‚Äôs say you're investigating a spike in error rates reported on a specific day. Start by querying a broader time frame, like the entire day, to understand the overall trend:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filter @timestamp &gt;&#x3D; -1d and logLevel &#x3D; &#39;ERROR&#39;</span><br></pre></td></tr></table></figure>
<p>If you notice the spike occurred in a specific hour, refine your query to that hour for a more detailed analysis:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filter @timestamp &gt;&#x3D; &#39;2023-12-15T14:00:00Z&#39; and @timestamp &lt;&#x3D; &#39;2023-12-15T15:00:00Z&#39; and logLevel &#x3D; &#39;ERROR&#39;</span><br></pre></td></tr></table></figure>
<p>Choosing the right time frame for your queries is a balance between getting enough data for meaningful insights and keeping the data volume manageable for performance. By adjusting the time range wisely, you can ensure that your CloudWatch Logs Insights queries are both efficient and effective, providing you with the most relevant insights for your specific needs.</p>
<h2 id="explore-and-save-useful-queries">7. Explore and Save Useful Queries:</h2>
<p>Experiment with different queries to explore your log data. Save queries that you find useful for future use or share them with your team.</p>
<p><strong>Importance of Exploring and Saving Queries</strong></p>
<ol type="1">
<li><strong>Efficiency</strong>:</li>
</ol>
<ul>
<li>Having a library of pre-defined queries saves time. Instead of writing new queries for each analysis, you can use or tweak existing ones.</li>
</ul>
<ol start="2" type="1">
<li><strong>Consistency</strong>:</li>
</ol>
<ul>
<li>Saved queries help maintain consistency in log analysis, especially in teams. Everyone works with the same set of vetted queries, leading to uniform analysis standards.</li>
</ul>
<ol start="3" type="1">
<li><strong>Knowledge Sharing</strong>:</li>
</ol>
<ul>
<li>Saving and sharing queries within a team promotes knowledge sharing, especially when it comes to complex log analysis patterns.</li>
</ul>
<p><strong>Strategies for Query Management</strong></p>
<ol type="1">
<li><strong>Categorize Queries</strong>:</li>
</ol>
<ul>
<li>Organize queries by their purpose, such as performance monitoring, error tracking, or security analysis.</li>
</ul>
<ol start="2" type="1">
<li><strong>Document Queries</strong>:</li>
</ol>
<ul>
<li>Keep a documentation of what each query does, especially for complex ones. This helps others in your team understand and use them effectively.</li>
</ul>
<ol start="3" type="1">
<li><strong>Regular Review and Update</strong>:</li>
</ol>
<ul>
<li>Periodically review and update your saved queries to ensure they remain relevant, especially as your systems evolve.</li>
</ul>
<p><strong>How to Save Queries in CloudWatch</strong></p>
<ol type="1">
<li><strong>Running a Query</strong>:</li>
</ol>
<ul>
<li>After you run a query in CloudWatch Logs Insights, you have the option to save it.</li>
</ul>
<ol start="2" type="1">
<li><strong>Naming and Describing</strong>:</li>
</ol>
<ul>
<li>Give your query a meaningful name and description so you can easily identify its purpose later.</li>
</ul>
<ol start="3" type="1">
<li><strong>Accessing Saved Queries</strong>:</li>
</ol>
<ul>
<li>Saved queries can be accessed from the CloudWatch Logs Insights console, making them easy to reuse or modify.</li>
</ul>
<p><strong>Example Use Case</strong></p>
<p>Imagine you frequently need to analyze error logs for different services. You can create and save a query template like:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fields @timestamp, @message, serviceName, errorCode</span><br><span class="line">| filter logLevel &#x3D; &#39;ERROR&#39; and serviceName &#x3D; &#39;*&#39;</span><br><span class="line">| sort @timestamp desc</span><br><span class="line">| limit 20</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Then, you can quickly reuse this template, modifying only the <code>serviceName</code> value for different services.</p>
<p><strong>Sharing Queries</strong></p>
<ul>
<li><strong>CloudWatch Dashboards</strong>: Integrate saved queries into dashboards for regular monitoring.</li>
<li><strong>Team Knowledge Bases</strong>: Include queries in your team's knowledge base or documentation for easy access and understanding.</li>
</ul>
<h2 id="monitor-application-health">8. Monitor Application Health:</h2>
<p>Use CloudWatch Logs Insights to monitor application health and performance. Create dashboards that give a real-time view of key metrics and logs.</p>
<p><strong>Importance of Application Health Monitoring</strong></p>
<ol type="1">
<li><strong>Proactive Issue Identification</strong>:</li>
</ol>
<ul>
<li>Regularly monitoring application logs helps in early detection of anomalies or trends that could indicate underlying problems.</li>
</ul>
<ol start="2" type="1">
<li><strong>Performance Optimization</strong>:</li>
</ol>
<ul>
<li>Analyzing logs can reveal inefficiencies or bottlenecks in your application, allowing for targeted performance optimizations.</li>
</ul>
<ol start="3" type="1">
<li><strong>User Experience Improvement</strong>:</li>
</ol>
<ul>
<li>Keeping tabs on application health ensures that issues affecting user experience are quickly identified and resolved.</li>
</ul>
<p><strong>Key Metrics to Monitor</strong></p>
<ol type="1">
<li><strong>Error Rates</strong>:</li>
</ol>
<ul>
<li>Track the frequency and types of errors. High error rates might indicate stability issues.</li>
<li>Query example: <code>filter logLevel = 'ERROR' | stats count() by bin(1h)</code></li>
</ul>
<ol start="2" type="1">
<li><strong>Response Times</strong>:</li>
</ol>
<ul>
<li>Monitor the response times of your application's endpoints. Longer times could signal performance issues.</li>
<li>Query example: <code>stats avg(responseTime) by endpoint</code></li>
</ul>
<ol start="3" type="1">
<li><strong>Traffic Patterns</strong>:</li>
</ol>
<ul>
<li>Analyze the volume of requests to understand traffic trends and prepare for peak loads.</li>
<li>Query example: <code>stats count() by bin(1h), endpoint</code></li>
</ul>
<p><strong>Using CloudWatch Logs Insights for Health Monitoring</strong></p>
<ol type="1">
<li><strong>Create Relevant Queries</strong>:</li>
</ol>
<ul>
<li>Develop queries that extract meaningful information about application performance and health.</li>
<li>Consider what metrics are most relevant to your application's functionality and user experience.</li>
</ul>
<ol start="2" type="1">
<li><strong>Visualize Log Data</strong>:</li>
</ol>
<ul>
<li>Use CloudWatch‚Äôs visualization tools to create dashboards that display key health metrics.</li>
<li>Visualizations can help in quickly identifying trends and outliers.</li>
</ul>
<ol start="3" type="1">
<li><strong>Integrate with CloudWatch Alarms</strong>:</li>
</ol>
<ul>
<li>Set up CloudWatch Alarms based on the insights derived from your log data.</li>
<li>Alarms can notify you of potential issues, ensuring timely responses.</li>
</ul>
<p><strong>Regular Health Checks</strong></p>
<ol type="1">
<li><strong>Scheduled Analysis</strong>:</li>
</ol>
<ul>
<li>Regularly review your application‚Äôs log data to stay ahead of potential issues.</li>
<li>Scheduled analysis can be part of your routine system maintenance.</li>
</ul>
<ol start="2" type="1">
<li><strong>Update Queries and Dashboards</strong>:</li>
</ol>
<ul>
<li>As your application evolves, update your queries and dashboards to reflect new features or changes in your infrastructure.</li>
</ul>
<p><strong>Example Scenario</strong></p>
<p>For an e-commerce application, you might want to monitor API endpoints for product searches and transactions. Key metrics could include the error rate of transaction processes, average response time of the search API, and the number of transactions per hour.</p>
<h2 id="combine-logs-from-multiple-sources">9. Combine Logs from Multiple Sources:</h2>
<p>If you have logs spread across different log groups, you can run queries that span these groups, providing a more comprehensive view of your systems.</p>
<p><strong>Importance of Combining Logs</strong></p>
<ol type="1">
<li><strong>Holistic View</strong>:</li>
</ol>
<ul>
<li>Aggregating logs from different sources provides a complete picture of the system, making it easier to correlate events and identify issues that span multiple components.</li>
</ul>
<ol start="2" type="1">
<li><strong>Cross-Service Troubleshooting</strong>:</li>
</ol>
<ul>
<li>In microservices architectures, issues in one service can affect others. Combining logs helps in diagnosing these interconnected issues more effectively.</li>
</ul>
<ol start="3" type="1">
<li><strong>Efficiency in Analysis</strong>:</li>
</ol>
<ul>
<li>Analyzing logs from all sources together saves time and effort compared to inspecting them individually.</li>
</ul>
<p><strong>Strategies for Combining Logs</strong></p>
<ol type="1">
<li><strong>Use Consistent Log Formats</strong>:</li>
</ol>
<ul>
<li>To effectively combine logs, strive for a consistent logging format (like JSON) across all services. This consistency simplifies parsing and analysis.</li>
</ul>
<ol start="2" type="1">
<li><strong>Leverage CloudWatch Log Groups</strong>:</li>
</ol>
<ul>
<li>Store logs from different sources in distinct CloudWatch Log Groups. CloudWatch Logs Insights can query across multiple log groups simultaneously.</li>
</ul>
<ol start="3" type="1">
<li><strong>Define Comprehensive Queries</strong>:</li>
</ol>
<ul>
<li>Craft queries that can extract and correlate relevant information across these different log groups.</li>
</ul>
<p><strong>How to Query Across Multiple Log Groups</strong></p>
<ul>
<li>When writing a query in CloudWatch Logs Insights, you can select multiple log groups as the target for your query.</li>
<li>Use the same query syntax, but ensure your query logic accounts for the different types of logs you might encounter in each log group.</li>
</ul>
<p><strong>Example Scenario</strong></p>
<ul>
<li>Imagine you have an application with front-end and back-end components, each logging to separate log groups. You might want to analyze error trends across both the front-end and back-end simultaneously.</li>
</ul>
<h2 id="learn-from-query-examples">10. Learn from Query Examples:</h2>
<p>Review the query examples provided by AWS and the community. These can serve as a starting point and provide insights into how to construct effective queries.</p>
<p><strong>Importance of Learning from Examples</strong></p>
<ol type="1">
<li><strong>Skill Enhancement</strong>:</li>
</ol>
<ul>
<li>Studying examples helps you understand the capabilities of the CloudWatch Logs Insights query language and how to apply them in different scenarios.</li>
</ul>
<ol start="2" type="1">
<li><strong>Best Practices</strong>:</li>
</ol>
<ul>
<li>Query examples often illustrate best practices in structuring and optimizing queries for efficiency and effectiveness.</li>
</ul>
<ol start="3" type="1">
<li><strong>Idea Generation</strong>:</li>
</ol>
<ul>
<li>Examples can spark ideas for new ways to analyze and visualize your log data, leading to more comprehensive monitoring and troubleshooting strategies.</li>
</ul>
<p><strong>How to Utilize Query Examples</strong></p>
<ol type="1">
<li><strong>Review AWS Documentation and Resources</strong>:</li>
</ol>
<ul>
<li>AWS provides a range of query examples in its documentation. These can be a great resource for learning and inspiration.</li>
<li>Check out AWS blogs and forums for community-shared queries and use cases.</li>
</ul>
<ol start="2" type="1">
<li><strong>Adapt Examples to Your Needs</strong>:</li>
</ol>
<ul>
<li>Start with a provided example and modify it to suit your specific log data and analysis requirements.</li>
<li>Experiment with different functions and filters to see how they affect your results.</li>
</ul>
<ol start="3" type="1">
<li><strong>Understand the Logic Behind Examples</strong>:</li>
</ol>
<ul>
<li>Take the time to understand how and why certain queries are structured as they are. This understanding can be invaluable in crafting your own queries.</li>
</ul>
<p><strong>Example Use Cases</strong></p>
<ol type="1">
<li><strong>Performance Monitoring</strong>:</li>
</ol>
<ul>
<li>Use examples that focus on calculating average response times or tracking request rates to monitor application performance.</li>
</ul>
<ol start="2" type="1">
<li><strong>Error Analysis</strong>:</li>
</ol>
<ul>
<li>Adapt examples that filter and aggregate error logs to identify common errors or spikes in error rates.</li>
</ul>
<ol start="3" type="1">
<li><strong>User Behavior Analysis</strong>:</li>
</ol>
<ul>
<li>Learn from queries that analyze user activities, such as page views or feature usage, to gain insights into user behavior.</li>
</ul>
<p><strong>Advanced Techniques</strong></p>
<ul>
<li><strong>Combining Queries</strong>: Learn how to combine multiple queries for complex analysis, like correlating error logs with performance metrics.</li>
<li><strong>Time-Based Analysis</strong>: Understand examples that use time-based aggregation to track trends and patterns over time.</li>
</ul>
<p><strong>Incorporating Query Examples into Dashboards</strong></p>
<ul>
<li>Use the insights gained from query examples to create informative dashboards that provide real-time monitoring of key metrics and trends.</li>
</ul>
]]></content>
      <categories>
        <category>Cloud Computing</category>
        <category>AWS Services</category>
        <category>IT Monitoring and Analytics</category>
        <category>Application Performance Management</category>
        <category>Site Reliability Engineering</category>
        <category>Logging and Debugging</category>
      </categories>
      <tags>
        <tag>CloudWatch Logs Insights</tag>
        <tag>AWS Logging</tag>
        <tag>Cloud Monitoring</tag>
        <tag>Log Analysis</tag>
        <tag>Application Performance Monitoring</tag>
        <tag>System Health Monitoring</tag>
        <tag>AWS Logging Best Practices</tag>
        <tag>CloudWatch Dashboards</tag>
        <tag>AWS Metrics and Logs</tag>
        <tag>Serverless Log Analysis</tag>
        <tag>Amazon Web Services Monitoring</tag>
        <tag>Cloud Infrastructure Monitoring</tag>
        <tag>AWS Operational Insights</tag>
      </tags>
  </entry>
  <entry>
    <title>Build a Search Engine with TF-IDF</title>
    <url>/2020/11/22/Build-a-Search-Engine-with-TF-IDF/</url>
    <content><![CDATA[<blockquote><p>TF-IDF short for term frequency ‚Äì inverse document frequency, is a numerical statistic that is intended to reflect how important a word is to a document in a collection or corpus. It is often used as a weighting factor in searches of information retrieval, text mining, and user modeling. The tf‚Äìidf value increases proportionally to the number of times a word appears in the document and is offset by the number of documents in the corpus that contain the word, which helps to adjust for the fact that some words appear more frequently in general. tf‚Äìidf is one of the most popular term-weighting schemes today.</p>
<footer><strong>Wikipedia</strong><cite><a href="https://en.wikipedia.org/wiki/Tf‚Äìidf">en.wikipedia.org/wiki/Tf‚Äìidf</a></cite></footer></blockquote>
<h2 id="bag-of-words">1. Bag of words</h2>
<h3 id="tokenize-a-sentence">Tokenize a sentence</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk.tokenize <span class="keyword">import</span> TreebankWordTokenizer</span><br><span class="line"></span><br><span class="line">sentence = <span class="string">&quot;The faster Harry got to the store, the faster Harry, the faster, would get home.&quot;</span></span><br><span class="line">tokenizer = TreebankWordTokenizer()</span><br><span class="line">token_sequence = tokenizer.tokenize(sentence.lower())</span><br><span class="line">print(token_sequence)</span><br></pre></td></tr></table></figure>
<div style="font-size:14px">
['the', 'faster', 'harry', 'got', 'to', 'the', 'store', ',', 'the', 'faster', 'harry', ',', 'the', 'faster', ',', 'would', 'get', 'home', '.']
</div>
<h3 id="tokens-counter">Tokens counter</h3>
<p>We only care about the unique words and how many times a word occurs in the sentence.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">bag_of_words = Counter(token_sequence)</span><br><span class="line">print(bag_of_words)</span><br></pre></td></tr></table></figure>
<div style="font-size:14px">
Counter({'the': 4, 'faster': 3, ',': 3, 'harry': 2, 'got': 1, 'to': 1, 'store': 1, 'would': 1, 'get': 1, 'home': 1, '.': 1})
</div>
<p>What is the most common words?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">word_list = bag_of_words.most_common()</span><br><span class="line">print(word_list)</span><br></pre></td></tr></table></figure>
<div style="font-size:14px">
[('the', 4), ('faster', 3), (',', 3), ('harry', 2), ('got', 1), ('to', 1), ('store', 1), ('would', 1), ('get', 1), ('home', 1), ('.', 1)]
</div>
<p>The number of times a word occurs in a document is called <em>term frequency</em> or <em>TF</em>. Let compute one example.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">harry_count = bag_of_words[<span class="string">&#x27;harry&#x27;</span>]</span><br><span class="line">unique_words = <span class="built_in">len</span>(bag_of_words)</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">round</span>(harry_count / unique_words, <span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<div style="font-size:14px">
<p>0.1818</p>
</div>
<p>Let compute with another example. Take a look at below document.</p>
<div style="font-size: 14px;font-family:tahoma">
<p>
A kite is traditionally a tethered heavier-than-air craft with wing surfaces that react against the air to create lift and drag. A kite consists of wings, tethers, and anchors. Kites often have a bridle to guide the face of the kite at the correct angle so the wind can lift it. A kite‚Äôs wing also may be so designed so a bridle is not needed; when kiting a sailplane for launch, the tether meets the wing at a single point. A kite may have fixed or moving anchors. Untraditionally in technical kiting, a kite consists of tether-set-coupled wing sets; even in technical kiting, though, a wing in the system is still often called the kite.
</p>
<p>
The lift that sustains the kite in flight is generated when air flows around the kite‚Äôs surface, producing low pressure above and high pressure below the wings. The interaction with the wind also generates horizontal drag along the direction of the wind. The resultant force vector from the lift and drag force components is opposed by the tension of one or more of the lines or tethers to which the kite is attached. The anchor point of the kite line may be static or moving (such as the towing of a kite by a running person, boat, free-falling anchors as in paragliders and fugitive parakites or vehicle).
</p>
<p>
The same principles of fluid flow apply in liquids and kites are also used under water. A hybrid tethered craft comprising both a lighter-than-air balloon as well as a kite lifting surface is called a kytoon.
</p>
<p>
Kites have a long and varied history and many different types are flown individually and at festivals worldwide. Kites may be flown for recreation, art or other practical uses. Sport kites can be flown in aerial ballet, sometimes as part of a competition. Power kites are multi-line steerable kites designed to generate large forces which can be used to power activities such as kite surfing, kite landboarding, kite fishing, kite buggying and a new trend snow kiting. Even Man-lifting kites have been made.
</p>
</div>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">kite_text = <span class="string">&quot;A kite is traditionally a tethered heavier-than-air craft with wing surfaces that react against the air to create lift and drag. A kite consists of wings, tethers, and anchors. Kites often have a bridle to guide the face of the kite at the correct angle so the wind can lift it. A kite&#x27;s wing also may be so designed so a bridle is not needed; when kiting a sailplane for launch, the tether meets the wing at a single point. A kite may have fixed or moving anchors. Untraditionally in technical kiting, a kite consists of tether-set-coupled wing sets; even in technical kiting, though, a wing in the system is still often called the kite. The lift that sustains the kite in flight is generated when air flows around the kite&#x27;s surface, producing low pressure above and high pressure below the wings. The interaction with the wind also generates horizontal drag along the direction of the wind. The resultant force vector from the lift and drag force components is opposed by the tension of one or more of the lines or tethers to which the kite is attached. The anchor point of the kite line may be static or moving (e.g., the towing of a kite by a running person, boat, free-falling anchors as in paragliders and fugitive parakites or vehicle). The same principles of fluid flow apply in liquids and kites are also used under water. A hybrid tethered craft comprising both a lighter-than-air balloon as well as a kite lifting surface is called a kytoon. Kites have a long and varied history and many different types are flown individually and at festivals worldwide. Kites may be flown for recreation, art or other practical uses. Sport kites can be flown in aerial ballet, sometimes as part of a competition. Power kites are multi-line steerable kites designed to generate large forces which can be used to power activities such as kite surfing, kite landboarding, kite fishing, kite buggying and a new trend snow kiting. Even Man-lifting kites have been made.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">from</span> nltk.tokenize <span class="keyword">import</span> TreebankWordTokenizer</span><br><span class="line">tokenizer = TreebankWordTokenizer()</span><br><span class="line">tokens = tokenizer.tokenize(kite_text.lower())</span><br><span class="line">token_count = Counter(tokens)</span><br><span class="line">print(token_count)</span><br></pre></td></tr></table></figure>
<div style="font-size:12px;">
<p>Counter({'the': 26, 'a': 20, 'kite': 16, ',': 15, 'and': 10, 'of': 10, 'kites': 8, 'is': 7, 'in': 7, 'or': 6, 'wing': 5, 'to': 5, 'be': 5, 'as': 5, 'lift': 4, 'have': 4, 'may': 4, 'at': 3, 'so': 3, 'can': 3, 'also': 3, 'kiting': 3, 'are': 3, 'flown': 3, 'tethered': 2, 'craft': 2, 'with': 2, 'that': 2, 'air': 2, 'consists': 2, 'tethers': 2, 'anchors.': 2, 'often': 2, 'bridle': 2, 'wind': 2, "'s": 2, 'designed': 2, ';': 2, 'when': 2, 'for': 2, 'moving': 2, 'technical': 2, 'even': 2, 'called': 2, 'surface': 2, 'pressure': 2, 'drag': 2, 'force': 2, 'by': 2, 'which': 2, '.': 2, 'used': 2, 'power': 2, 'traditionally': 1, 'heavier-than-air': 1, 'surfaces': 1, 'react': 1, 'against': 1, 'create': 1, 'drag.': 1, 'wings': 1, 'guide': 1, 'face': 1, 'correct': 1, 'angle': 1, 'it.': 1, 'not': 1, 'needed': 1, 'sailplane': 1, 'launch': 1, 'tether': 1, 'meets': 1, 'single': 1, 'point.': 1, 'fixed': 1, 'untraditionally': 1, 'tether-set-coupled': 1, 'sets': 1, 'though': 1, 'system': 1, 'still': 1, 'kite.': 1, 'sustains': 1, 'flight': 1, 'generated': 1, 'flows': 1, 'around': 1, 'producing': 1, 'low': 1, 'above': 1, 'high': 1, 'below': 1, 'wings.': 1, 'interaction': 1, 'generates': 1, 'horizontal': 1, 'along': 1, 'direction': 1, 'wind.': 1, 'resultant': 1, 'vector': 1, 'from': 1, 'components': 1, 'opposed': 1, 'tension': 1, 'one': 1, 'more': 1, 'lines': 1, 'attached.': 1, 'anchor': 1, 'point': 1, 'line': 1, 'static': 1, '(': 1, 'e.g.': 1, 'towing': 1, 'running': 1, 'person': 1, 'boat': 1, 'free-falling': 1, 'anchors': 1, 'paragliders': 1, 'fugitive': 1, 'parakites': 1, 'vehicle': 1, ')': 1, 'same': 1, 'principles': 1, 'fluid': 1, 'flow': 1, 'apply': 1, 'liquids': 1, 'under': 1, 'water.': 1, 'hybrid': 1, 'comprising': 1, 'both': 1, 'lighter-than-air': 1, 'balloon': 1, 'well': 1, 'lifting': 1, 'kytoon.': 1, 'long': 1, 'varied': 1, 'history': 1, 'many': 1, 'different': 1, 'types': 1, 'individually': 1, 'festivals': 1, 'worldwide.': 1, 'recreation': 1, 'art': 1, 'other': 1, 'practical': 1, 'uses.': 1, 'sport': 1, 'aerial': 1, 'ballet': 1, 'sometimes': 1, 'part': 1, 'competition.': 1, 'multi-line': 1, 'steerable': 1, 'generate': 1, 'large': 1, 'forces': 1, 'activities': 1, 'such': 1, 'surfing': 1, 'landboarding': 1, 'fishing': 1, 'buggying': 1, 'new': 1, 'trend': 1, 'snow': 1, 'kiting.': 1, 'man-lifting': 1, 'been': 1, 'made': 1})</p>
</div>
<p>Hmm, you can see that <code>the</code>, <code>a</code>, <code>and</code> and many other stop-words occurs too much. How about apply stopwords clean up.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> nltk</span><br><span class="line"></span><br><span class="line">nltk.download(<span class="string">&#x27;stopwords&#x27;</span>, quiet=<span class="literal">True</span>)</span><br><span class="line">stopwords = nltk.corpus.stopwords.words(<span class="string">&#x27;english&#x27;</span>)</span><br><span class="line">tokens = [x <span class="keyword">for</span> x <span class="keyword">in</span> tokens <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> stopwords]</span><br><span class="line">kite_counts = Counter(tokens)</span><br><span class="line">print(kite_counts)</span><br></pre></td></tr></table></figure>
<div style="font-size:13px;font-family:tahoma">
<p>Counter({'kite': 16, ',': 15, 'kites': 8, 'wing': 5, 'lift': 4, 'may': 4, 'also': 3, 'kiting': 3, 'flown': 3, 'tethered': 2, 'craft': 2, 'air': 2, 'consists': 2, 'tethers': 2, 'anchors.': 2, 'often': 2, 'bridle': 2, 'wind': 2, "'s": 2, 'designed': 2, ';': 2, 'moving': 2, 'technical': 2, 'even': 2, 'called': 2, 'surface': 2, 'pressure': 2, 'drag': 2, 'force': 2, '.': 2, 'used': 2, 'power': 2, 'traditionally': 1, 'heavier-than-air': 1, 'surfaces': 1, 'react': 1, 'create': 1, 'drag.': 1, 'wings': 1, 'guide': 1, 'face': 1, 'correct': 1, 'angle': 1, 'it.': 1, 'needed': 1, 'sailplane': 1, 'launch': 1, 'tether': 1, 'meets': 1, 'single': 1, 'point.': 1, 'fixed': 1, 'untraditionally': 1, 'tether-set-coupled': 1, 'sets': 1, 'though': 1, 'system': 1, 'still': 1, 'kite.': 1, 'sustains': 1, 'flight': 1, 'generated': 1, 'flows': 1, 'around': 1, 'producing': 1, 'low': 1, 'high': 1, 'wings.': 1, 'interaction': 1, 'generates': 1, 'horizontal': 1, 'along': 1, 'direction': 1, 'wind.': 1, 'resultant': 1, 'vector': 1, 'components': 1, 'opposed': 1, 'tension': 1, 'one': 1, 'lines': 1, 'attached.': 1, 'anchor': 1, 'point': 1, 'line': 1, 'static': 1, '(': 1, 'e.g.': 1, 'towing': 1, 'running': 1, 'person': 1, 'boat': 1, 'free-falling': 1, 'anchors': 1, 'paragliders': 1, 'fugitive': 1, 'parakites': 1, 'vehicle': 1, ')': 1, 'principles': 1, 'fluid': 1, 'flow': 1, 'apply': 1, 'liquids': 1, 'water.': 1, 'hybrid': 1, 'comprising': 1, 'lighter-than-air': 1, 'balloon': 1, 'well': 1, 'lifting': 1, 'kytoon.': 1, 'long': 1, 'varied': 1, 'history': 1, 'many': 1, 'different': 1, 'types': 1, 'individually': 1, 'festivals': 1, 'worldwide.': 1, 'recreation': 1, 'art': 1, 'practical': 1, 'uses.': 1, 'sport': 1, 'aerial': 1, 'ballet': 1, 'sometimes': 1, 'part': 1, 'competition.': 1, 'multi-line': 1, 'steerable': 1, 'generate': 1, 'large': 1, 'forces': 1, 'activities': 1, 'surfing': 1, 'landboarding': 1, 'fishing': 1, 'buggying': 1, 'new': 1, 'trend': 1, 'snow': 1, 'kiting.': 1, 'man-lifting': 1, 'made': 1})</p>
</div>
<p>Look better, you can easily see that there are some importance terms <code>kite</code>, <code>kites</code>, <code>wing</code>, <code>lift</code>. Just by looking purely at this, you will learn something about this document.</p>
<h2 id="vectorizing">2. Vectorizing</h2>
<h3 id="how-to-compute-document-vector">How to compute document vector?</h3>
<p>Document vector on the kite example</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">document_vector = []</span><br><span class="line">doc_length = <span class="built_in">len</span>(tokens)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> kite_counts.most_common():</span><br><span class="line">    document_vector.append(value / doc_length)</span><br><span class="line"></span><br><span class="line">document_vector</span><br></pre></td></tr></table></figure>
<div style="font-size:13px">
<p>[0.07207207207207207,<br/> 0.06756756756756757,<br/> 0.036036036036036036,<br/> ...<br/> 0.0045045045045045045,<br/> 0.0045045045045045045,<br/> 0.0045045045045045045]</p>
</div>
<p>Hmm, interesting. This is one vector of a document. We might need more than one document to do math on. Let build another simple example. Let's say I have this three documents.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">doc_0 = <span class="string">&quot;The faster Harry got to the store, the faster Harry, the faster, would get home.&quot;</span></span><br><span class="line">doc_1 = <span class="string">&quot;Harry is hairy and faster than Jill.&quot;</span></span><br><span class="line">doc_2 = <span class="string">&quot;Jill is not as hairy as Harry.&quot;</span></span><br></pre></td></tr></table></figure>
<p>Now, convert those docs to tokens</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tokens_0 = tokenizer.tokenize(doc_0.lower())</span><br><span class="line">tokens_1 = tokenizer.tokenize(doc_1.lower())</span><br><span class="line">tokens_2 = tokenizer.tokenize(doc_2.lower())</span><br><span class="line">lexicon = <span class="built_in">set</span>(tokens_0 + tokens_1 + tokens_2)</span><br><span class="line"></span><br><span class="line">print(lexicon)</span><br><span class="line">print(<span class="built_in">len</span>(lexicon))</span><br></pre></td></tr></table></figure>
<div style="font-size:13px">
<p>{'hairy', 'jill', 'harry', 'faster', 'the', 'would', 'get', 'is', 'got', 'and', 'than', ',', '.', 'not', 'as', 'store', 'home', 'to'}<br/> 18</p>
</div>
<p>All of this three documents must have the same length, that is <code>18</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line"><span class="comment"># I create a zero vector as a template for all the vectors in this example</span></span><br><span class="line">zero_vector = OrderedDict((token, <span class="number">0</span>) <span class="keyword">for</span> token <span class="keyword">in</span> lexicon)</span><br><span class="line">zero_vector</span><br></pre></td></tr></table></figure>
<div style="font-size:13px">
<p>OrderedDict([('hairy', 0), ('jill', 0), ('harry', 0), ('faster', 0), ('the', 0), ('would', 0), ('get', 0), ('is', 0), ('got', 0), ('and', 0), ('than', 0), (',', 0), ('.', 0), ('not', 0), ('as', 0), ('store', 0), ('home', 0), ('to', 0)])</p>
</div>
<p>Here a how three document vectors created <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">document_vectors = []</span><br><span class="line"><span class="keyword">for</span> doc <span class="keyword">in</span> [doc_0, doc_1, doc_2]:</span><br><span class="line">    <span class="comment"># Don&#x27;t edit directly on the template, just clone one for new vector</span></span><br><span class="line">    vec = copy.copy(vector_template)</span><br><span class="line"></span><br><span class="line">    tokens = tokenizer.tokenize(doc.lower())</span><br><span class="line">    token_counts = Counter(tokens)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> token_counts.items():</span><br><span class="line">        <span class="comment"># compute TF</span></span><br><span class="line">        vec[key] = value / <span class="built_in">len</span>(lexicon)</span><br><span class="line">    document_vectors.append(vec)</span><br></pre></td></tr></table></figure></p>
<h3 id="what-is-vector">What is vector?</h3>
<div class="video-container"><iframe src="https://www.youtube.com/embed/fNk_zzaMoSs" frameborder="0" loading="lazy" allowfullscreen></iframe></div>
<h3 id="cosine-similarity-implementation">Cosine Similarity Implementation</h3>
<p><span class="math display">\[\begin{align*}
\cos \theta &amp;= \frac{A \cdot B}{|A| |B|}
\end{align*}\]</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cosine_sim</span>(<span class="params">vec1, vec2</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Since our vectors are dictionaries, lets convert them to lists for easier mathing.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    vec1 = [val <span class="keyword">for</span> val <span class="keyword">in</span> vec1.values()]</span><br><span class="line">    vec2 = [val <span class="keyword">for</span> val <span class="keyword">in</span> vec2.values()]</span><br><span class="line">    </span><br><span class="line">    dot_prod = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(vec1):</span><br><span class="line">        dot_prod += v * vec2[i]</span><br><span class="line">        </span><br><span class="line">    mag_1 = math.sqrt(<span class="built_in">sum</span>([x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> vec1]))</span><br><span class="line">    mag_2 = math.sqrt(<span class="built_in">sum</span>([x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> vec2]))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dot_prod / (mag_1 * mag_2)</span><br></pre></td></tr></table></figure>
<p>A consine similarity of <strong>1</strong> represents vectors that point in the exactly same direction. In NLP, that mean two documents have the same meaning.</p>
<p>A cosine similarity of <strong>0</strong> represent two vectors share no components. They are orthogonal.</p>
<p>A consine similarty of <strong>-1</strong> represents two vectors that are anti-similar, they are pointing in the opposite. Or NLP, two documents talking about the opposite things. But, we never see the opposite direction in TF vectors, because counting words can never be negative.</p>
<p>So, let go to verify the above three vectors</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(cosine_sim(document_vectors[<span class="number">0</span>], document_vectors[<span class="number">1</span>]))</span><br><span class="line">print(cosine_sim(document_vectors[<span class="number">0</span>], document_vectors[<span class="number">2</span>]))</span><br><span class="line">print(cosine_sim(document_vectors[<span class="number">1</span>], document_vectors[<span class="number">2</span>]))</span><br></pre></td></tr></table></figure>
<div style="font-size:13px">
<p>0.3162277660168379<br/> 0.14142135623730948<br/> 0.5590169943749475</p>
</div>
<p>We can easily see that, doc1 and doc2 have much similar score. They are talking something similar.</p>
<h2 id="topic-modeling">3. Topic Modeling</h2>
<p>Word counts are useful, but it doesn't tell much more information and the relative with all other documents in the corpus. Inverse Document Frequency (IDF), compute on documents count in the entire corpus.</p>
<p><span class="math display">\[\begin{align*}
tf(t, d) &amp;= \frac{count(t)}{count(d)}
\end{align*}\]</span></p>
<p><span class="math display">\[\begin{align*}
idf(t, D) &amp;= \log \frac{count(D)}{count(D_t)}
\end{align*}\]</span></p>
<p><span class="math display">\[\begin{align*}
tfidf(t, d, D) &amp;= tf(t, d) * idf(t, D)
\end{align*}\]</span></p>
<p>The more time a word appear in a document, the important it is in a document. On the other hand, the number of documents contains a word, the less important it is in the entire corpus.</p>
<p>Compute the tfidf on the above example <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">document_tfidf_vectors = []</span><br><span class="line">documents = [doc_0, doc_1, doc_2]</span><br><span class="line"><span class="keyword">for</span> doc <span class="keyword">in</span> documents:</span><br><span class="line"></span><br><span class="line">    vec = copy.copy(vector_template)</span><br><span class="line"></span><br><span class="line">    tokens = tokenizer.tokenize(doc.lower())</span><br><span class="line">    token_counts = Counter(tokens)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> token_counts.items():</span><br><span class="line">        docs_containing_key = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> _doc <span class="keyword">in</span> documents:</span><br><span class="line">            <span class="keyword">if</span> key <span class="keyword">in</span> _doc:</span><br><span class="line">                docs_containing_key += <span class="number">1</span></span><br><span class="line">        tf = value / <span class="built_in">len</span>(lexicon)</span><br><span class="line">        <span class="keyword">if</span> docs_containing_key:</span><br><span class="line">            idf = <span class="built_in">len</span>(documents) / docs_containing_key</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            idf = <span class="number">0</span></span><br><span class="line">        vec[key] = tf * idf </span><br><span class="line">    document_tfidf_vectors.append(vec)</span><br></pre></td></tr></table></figure></p>
Let try with a simple query <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">documents = [doc_0, doc_1, doc_2]</span><br><span class="line">query = <span class="string">&quot;How long does it take to get to the store?&quot;</span></span><br><span class="line">query_vec = copy.copy(vector_template) </span><br><span class="line"></span><br><span class="line">query_vec = copy.copy(vector_template)</span><br><span class="line"></span><br><span class="line">tokens = tokenizer.tokenize(query.lower())</span><br><span class="line">token_counts = Counter(tokens)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> token_counts.items():</span><br><span class="line">    docs_containing_key = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _doc <span class="keyword">in</span> documents:</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> _doc.lower():</span><br><span class="line">            docs_containing_key += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> docs_containing_key == <span class="number">0</span>:  <span class="comment"># We didn&#x27;t find that token in the lexicon go to next key</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    tf = value / <span class="built_in">len</span>(tokens)</span><br><span class="line">    idf = <span class="built_in">len</span>(documents) / docs_containing_key </span><br><span class="line">    query_vec[key] = tf * idf </span><br><span class="line"></span><br><span class="line">print(cosine_sim(query_vec, document_tfidf_vectors[<span class="number">0</span>]))</span><br><span class="line">print(cosine_sim(query_vec, document_tfidf_vectors[<span class="number">1</span>]))</span><br><span class="line">print(cosine_sim(query_vec, document_tfidf_vectors[<span class="number">2</span>]))</span><br></pre></td></tr></table></figure>
<div style="font-size:13px">
<p>0.5235048549676834<br/> 0.0<br/> 0.0</p>
</div>
<p>This is clearly that, the <code>doc0</code> is the only documents that match with the query. <code>The faster Harry got to the store, the faster Harry, the faster, would get home</code>.</p>
<p>What an interesting algorithm to search for relevant documents. This searching algorithm had to evaluate the entire corpus. That O(N) algorithm. Not bad isn't it?</p>
<h2 id="tools">4. Tools</h2>
<p>Let simpler our implementation by using tools.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfVectorizer</span><br><span class="line"></span><br><span class="line">corpus = docs</span><br><span class="line">vectorizer = TfidfVectorizer(min_df=<span class="number">1</span>)</span><br><span class="line">model = vectorizer.fit_transform(corpus)</span><br><span class="line"></span><br><span class="line">print(model.todense().<span class="built_in">round</span>(<span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<div style="font-size:13px">
<p>[[0.16 0. 0.48 0.21 0.21 0. 0.25 0.21 0. 0. 0. 0.21 0. 0.64 0.21 0.21]<br/> [0.37 0. 0.37 0. 0. 0.37 0.29 0. 0.37 0.37 0. 0. 0.49 0. 0. 0. ]<br/> [0. 0.75 0. 0. 0. 0.29 0.22 0. 0.29 0.29 0.38 0. 0. 0. 0. 0. ]]</p>
</div>
]]></content>
      <categories>
        <category>Natural Language Processing</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>TF-IDF</tag>
        <tag>NLP</tag>
        <tag>Search Engine</tag>
        <tag>Bag of Words</tag>
        <tag>BOW</tag>
        <tag>Information Retrieval</tag>
        <tag>Scikit-Learn</tag>
      </tags>
  </entry>
  <entry>
    <title>Image Semantic Segmentation</title>
    <url>/2021/04/21/Image-Semantic-Segmentation/</url>
    <content><![CDATA[<h1 id="overview">1. Overview</h1>
<p><img src="https://www.robots.ox.ac.uk/~vgg/data/pets/pet_annotations.jpg"></p>
<p>Source: https://www.robots.ox.ac.uk/~vgg/data/pets/</p>
<a id="more"></a>
<h1 id="fully-convolution-network-fcn">2. Fully Convolution Network (FCN)</h1>
<h2 id="dataset">2.1. Dataset</h2>
<p>In this example, I will use <code>Oxford-IIIT Pet</code> dataset. We can access it by using <code>tensorflow-datasets</code> package.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install tensorflow-datasets</span><br></pre></td></tr></table></figure>
<p>Now load the data</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow_datasets <span class="keyword">as</span> tfds</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">dataset, info = tfds.load(<span class="string">&#x27;oxford_iiit_pet&#x27;</span>, with_info=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">TRAIN_SIZE = info.splits[<span class="string">&#x27;train&#x27;</span>].num_examples</span><br><span class="line">VALIDATION_SIZE = info.splits[<span class="string">&#x27;test&#x27;</span>].num_examples</span><br><span class="line"></span><br><span class="line">BATCH_SIZE = <span class="number">32</span></span><br><span class="line">BUFFER_SIZE = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize</span>(<span class="params">input_image, input_mask</span>):</span></span><br><span class="line">    input_image = tf.cast(input_image, tf.float32) / <span class="number">255.0</span></span><br><span class="line">    input_mask -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> input_image, input_mask</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_image</span>(<span class="params">dataset_element</span>):</span></span><br><span class="line">    input_image = tf.image.resize(dataset_element[<span class="string">&#x27;image&#x27;</span>], (<span class="number">256</span>, <span class="number">256</span>))</span><br><span class="line">    input_mask = tf.image.resize(dataset_element[<span class="string">&#x27;segmentation_mask&#x27;</span>], (<span class="number">256</span>, <span class="number">256</span>))</span><br><span class="line">    input_image, input_mask = normalize(input_image, input_mask)</span><br><span class="line">    <span class="keyword">return</span> input_image, input_mask</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">train_dataset = (dataset[<span class="string">&#x27;train&#x27;</span>]</span><br><span class="line">                 .<span class="built_in">map</span>(load_image, num_parallel_calls=tf.data.experimental.AUTOTUNE)</span><br><span class="line">                 .shuffle(BUFFER_SIZE)</span><br><span class="line">                 .batch(BATCH_SIZE)</span><br><span class="line">                 .prefetch(tf.data.experimental.AUTOTUNE))</span><br><span class="line"></span><br><span class="line">test_dataset = (dataset[<span class="string">&#x27;test&#x27;</span>]</span><br><span class="line">                .<span class="built_in">map</span>(load_image, num_parallel_calls=tf.data.experimental.AUTOTUNE)</span><br><span class="line">                .batch(BATCH_SIZE))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="define-the-model">2.2. Define the model</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">inputs = tf.keras.layers.Input(shape=(<span class="number">256</span>, <span class="number">256</span>, <span class="number">3</span>))</span><br><span class="line">x = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">64</span>, </span><br><span class="line">    kernel_size=(<span class="number">3</span>, <span class="number">3</span>), </span><br><span class="line">    activation=<span class="string">&#x27;relu&#x27;</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    name=<span class="string">&#x27;block1_conv1&#x27;</span>)(inputs)</span><br><span class="line">x = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">64</span>, </span><br><span class="line">    kernel_size=(<span class="number">3</span>, <span class="number">3</span>), </span><br><span class="line">    activation=<span class="string">&quot;relu&quot;</span>, </span><br><span class="line">    padding=<span class="string">&quot;same&quot;</span>, </span><br><span class="line">    name=<span class="string">&quot;block1_conv2&quot;</span>)(x)</span><br><span class="line">x = tf.keras.layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=<span class="number">2</span>, name=<span class="string">&#x27;block1_pool&#x27;</span>)(x)</span><br><span class="line"></span><br><span class="line">x = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">128</span>, </span><br><span class="line">    kernel_size=(<span class="number">3</span>, <span class="number">3</span>), </span><br><span class="line">    activation=<span class="string">&#x27;relu&#x27;</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    name=<span class="string">&#x27;block2_conv1&#x27;</span>)(x)</span><br><span class="line">x = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">128</span>, </span><br><span class="line">    kernel_size=(<span class="number">3</span>, <span class="number">3</span>), </span><br><span class="line">    activation=<span class="string">&#x27;relu&#x27;</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    name=<span class="string">&#x27;block2_conv2&#x27;</span>)(x)</span><br><span class="line">x = tf.keras.layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=<span class="number">2</span>, name=<span class="string">&#x27;block2_pool&#x27;</span>)(x)</span><br><span class="line"></span><br><span class="line">x = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">256</span>,</span><br><span class="line">    kernel_size=(<span class="number">3</span>, <span class="number">3</span>), </span><br><span class="line">    activation=<span class="string">&#x27;relu&#x27;</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    name=<span class="string">&#x27;block3_conv1&#x27;</span>)(x)</span><br><span class="line">x = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">256</span>, </span><br><span class="line">    kernel_size=(<span class="number">3</span>, <span class="number">3</span>), </span><br><span class="line">    activation=<span class="string">&#x27;relu&#x27;</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    name=<span class="string">&#x27;block3_conv2&#x27;</span>)(x)</span><br><span class="line">x = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">256</span>, </span><br><span class="line">    kernel_size=(<span class="number">3</span>, <span class="number">3</span>), </span><br><span class="line">    activation=<span class="string">&#x27;relu&#x27;</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    name=<span class="string">&#x27;block3_conv3&#x27;</span>)(x)</span><br><span class="line">x = tf.keras.layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=<span class="number">2</span>, name=<span class="string">&#x27;block3_pool&#x27;</span>)(x)</span><br><span class="line">block3_pool = x</span><br><span class="line"></span><br><span class="line">x = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">512</span>, </span><br><span class="line">    kernel_size=(<span class="number">3</span>, <span class="number">3</span>), </span><br><span class="line">    activation=<span class="string">&#x27;relu&#x27;</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    name=<span class="string">&#x27;block4_conv1&#x27;</span>)(x)</span><br><span class="line">x = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">512</span>, </span><br><span class="line">    kernel_size=(<span class="number">3</span>, <span class="number">3</span>), </span><br><span class="line">    activation=<span class="string">&#x27;relu&#x27;</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    name=<span class="string">&#x27;block4_conv2&#x27;</span>)(x)</span><br><span class="line">x = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">512</span>, </span><br><span class="line">    kernel_size=(<span class="number">3</span>, <span class="number">3</span>), </span><br><span class="line">    activation=<span class="string">&#x27;relu&#x27;</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    name=<span class="string">&#x27;block4_conv3&#x27;</span>)(x)</span><br><span class="line">x = tf.keras.layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=<span class="number">2</span>, name=<span class="string">&#x27;block4_pool&#x27;</span>)(x)</span><br><span class="line">block4_pool = x</span><br><span class="line"></span><br><span class="line">x = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">512</span>, </span><br><span class="line">    kernel_size=(<span class="number">3</span>, <span class="number">3</span>), </span><br><span class="line">    activation=<span class="string">&#x27;relu&#x27;</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    name=<span class="string">&#x27;block5_conv1&#x27;</span>)(x)</span><br><span class="line">x = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">512</span>, </span><br><span class="line">    kernel_size=(<span class="number">3</span>, <span class="number">3</span>), </span><br><span class="line">    activation=<span class="string">&#x27;relu&#x27;</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    name=<span class="string">&#x27;block5_conv2&#x27;</span>)(x)</span><br><span class="line">x = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">512</span>, </span><br><span class="line">    kernel_size=(<span class="number">3</span>, <span class="number">3</span>), </span><br><span class="line">    activation=<span class="string">&#x27;relu&#x27;</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    name=<span class="string">&#x27;block5_conv3&#x27;</span>)(x)</span><br><span class="line">x = tf.keras.layers.MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=<span class="number">2</span>, name=<span class="string">&#x27;block5_pool&#x27;</span>)(x)</span><br><span class="line">block5_pool = x</span><br><span class="line"></span><br><span class="line">outputs = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">3</span>, </span><br><span class="line">    kernel_size=(<span class="number">7</span>, <span class="number">7</span>), </span><br><span class="line">    activation=<span class="string">&#x27;relu&#x27;</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    name=<span class="string">&#x27;conv6&#x27;</span>)(block5_pool)</span><br><span class="line">conv6_4 = tf.keras.layers.Conv2DTranspose(</span><br><span class="line">    filters=<span class="number">3</span>, </span><br><span class="line">    kernel_size=(<span class="number">4</span>, <span class="number">4</span>), </span><br><span class="line">    strides=<span class="number">4</span>, </span><br><span class="line">    use_bias=<span class="literal">False</span>)(outputs)</span><br><span class="line"></span><br><span class="line">pool4_n = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">3</span>, </span><br><span class="line">    kernel_size=(<span class="number">1</span>, <span class="number">1</span>), </span><br><span class="line">    activation=<span class="string">&#x27;relu&#x27;</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    name=<span class="string">&#x27;pool4_n&#x27;</span>)(block4_pool)</span><br><span class="line">pool4_n_2 = tf.keras.layers.Conv2DTranspose(</span><br><span class="line">    filters=<span class="number">3</span>, </span><br><span class="line">    kernel_size=(<span class="number">2</span>, <span class="number">2</span>), </span><br><span class="line">    strides=<span class="number">2</span>, </span><br><span class="line">    use_bias=<span class="literal">False</span>)(pool4_n)</span><br><span class="line"></span><br><span class="line">pool3_n = tf.keras.layers.Conv2D(</span><br><span class="line">    filters=<span class="number">3</span>, </span><br><span class="line">    kernel_size=(<span class="number">3</span>, <span class="number">3</span>), </span><br><span class="line">    activation=<span class="string">&#x27;relu&#x27;</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    name=<span class="string">&#x27;pool3_n&#x27;</span>)(block3_pool)</span><br><span class="line"></span><br><span class="line">output = tf.keras.layers.Add(name=<span class="string">&#x27;add&#x27;</span>)([pool4_n_2, pool3_n, conv6_4])</span><br><span class="line">output = tf.keras.layers.Conv2DTranspose(filters=<span class="number">3</span>, kernel_size=(<span class="number">8</span>, <span class="number">8</span>), strides=<span class="number">8</span>, use_bias=<span class="literal">False</span>)(output)</span><br><span class="line">output = tf.keras.layers.Softmax()(output)</span><br><span class="line"></span><br><span class="line">fcn_model = tf.keras.models.Model(inputs, output)</span><br><span class="line"></span><br><span class="line">fcn_model.<span class="built_in">compile</span>(</span><br><span class="line">    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">True</span>), </span><br><span class="line">    optimizer=tf.keras.optimizers.RMSprop(), </span><br><span class="line">    metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line">fcn_model.summary()</span><br></pre></td></tr></table></figure>
<p>In this step, we use <code>SparseCategoricalCrossentropy</code> as loss function for pixel classification task. The output channels here are 3 because each pixel can be categorized into one of three classes.</p>
<p>The network summary</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">Model: &quot;functional<span class="emphasis">_1&quot;</span></span><br><span class="line"><span class="emphasis"><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">Layer (type)                    Output Shape         Param #     Connected to                     </span></span></span><br><span class="line"><span class="emphasis"><span class="strong">==================================================================================================</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">input<span class="emphasis">_2 (InputLayer)            [(None, 256, 256, 3) 0                                            </span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">block1<span class="emphasis">_conv1 (Conv2D)           (None, 256, 256, 64) 1792        input_</span>2[<span class="string">0</span>][<span class="symbol">0</span>]                    </span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis">block1_</span>conv2 (Conv2D)           (None, 256, 256, 64) 36928       block1<span class="emphasis">_conv1[<span class="string">0</span>][<span class="symbol">0</span>]               </span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">block1<span class="emphasis">_pool (MaxPooling2D)      (None, 128, 128, 64) 0           block1_</span>conv2[<span class="string">0</span>][<span class="symbol">0</span>]               </span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis">block2_</span>conv1 (Conv2D)           (None, 128, 128, 128 73856       block1<span class="emphasis">_pool[<span class="string">0</span>][<span class="symbol">0</span>]                </span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">block2<span class="emphasis">_conv2 (Conv2D)           (None, 128, 128, 128 147584      block2_</span>conv1[<span class="string">0</span>][<span class="symbol">0</span>]               </span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis">block2_</span>pool (MaxPooling2D)      (None, 64, 64, 128)  0           block2<span class="emphasis">_conv2[<span class="string">0</span>][<span class="symbol">0</span>]               </span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">block3<span class="emphasis">_conv1 (Conv2D)           (None, 64, 64, 256)  295168      block2_</span>pool[<span class="string">0</span>][<span class="symbol">0</span>]                </span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis">block3_</span>conv2 (Conv2D)           (None, 64, 64, 256)  590080      block3<span class="emphasis">_conv1[<span class="string">0</span>][<span class="symbol">0</span>]               </span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">block3<span class="emphasis">_conv3 (Conv2D)           (None, 64, 64, 256)  590080      block3_</span>conv2[<span class="string">0</span>][<span class="symbol">0</span>]               </span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis">block3_</span>pool (MaxPooling2D)      (None, 32, 32, 256)  0           block3<span class="emphasis">_conv3[<span class="string">0</span>][<span class="symbol">0</span>]               </span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">block4<span class="emphasis">_conv1 (Conv2D)           (None, 32, 32, 512)  1180160     block3_</span>pool[<span class="string">0</span>][<span class="symbol">0</span>]                </span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis">block4_</span>conv2 (Conv2D)           (None, 32, 32, 512)  2359808     block4<span class="emphasis">_conv1[<span class="string">0</span>][<span class="symbol">0</span>]               </span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">block4<span class="emphasis">_conv3 (Conv2D)           (None, 32, 32, 512)  2359808     block4_</span>conv2[<span class="string">0</span>][<span class="symbol">0</span>]               </span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis">block4_</span>pool (MaxPooling2D)      (None, 16, 16, 512)  0           block4<span class="emphasis">_conv3[<span class="string">0</span>][<span class="symbol">0</span>]               </span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">block5<span class="emphasis">_conv1 (Conv2D)           (None, 16, 16, 512)  2359808     block4_</span>pool[<span class="string">0</span>][<span class="symbol">0</span>]                </span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis">block5_</span>conv2 (Conv2D)           (None, 16, 16, 512)  2359808     block5<span class="emphasis">_conv1[<span class="string">0</span>][<span class="symbol">0</span>]               </span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">block5<span class="emphasis">_conv3 (Conv2D)           (None, 16, 16, 512)  2359808     block5_</span>conv2[<span class="string">0</span>][<span class="symbol">0</span>]               </span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis">block5_</span>pool (MaxPooling2D)      (None, 8, 8, 512)    0           block5<span class="emphasis">_conv3[<span class="string">0</span>][<span class="symbol">0</span>]               </span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">pool4<span class="emphasis">_n (Conv2D)                (None, 16, 16, 3)    1539        block4_</span>pool[<span class="string">0</span>][<span class="symbol">0</span>]                </span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis">conv6 (Conv2D)                  (None, 8, 8, 3)      75267       block5_</span>pool[<span class="string">0</span>][<span class="symbol">0</span>]                </span></span></span><br><span class="line"><span class="emphasis"><span class="strong">__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span></span></span><br><span class="line"><span class="emphasis">conv2d_</span>transpose<span class="emphasis">_1 (Conv2DTrans (None, 32, 32, 3)    36          pool4_</span>n[<span class="string">0</span>][<span class="symbol">0</span>]                    </span><br><span class="line"><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__</span></span><br><span class="line"><span class="strong">pool3<span class="emphasis">_n (Conv2D)                (None, 32, 32, 3)    6915        block3_</span>pool[<span class="string">0</span>][<span class="symbol">0</span>]                </span></span><br><span class="line"><span class="strong">__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span></span><br><span class="line">conv2d<span class="emphasis">_transpose (Conv2DTranspo (None, 32, 32, 3)    144         conv6[<span class="string">0</span>][<span class="symbol">0</span>]                      </span></span><br><span class="line"><span class="emphasis"><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">add (Add)                       (None, 32, 32, 3)    0           conv2d<span class="emphasis">_transpose_</span>1[<span class="string">0</span>][<span class="symbol">0</span>]         </span></span></span><br><span class="line"><span class="emphasis"><span class="strong">                                                                 pool3<span class="emphasis">_n[<span class="string">0</span>][<span class="symbol">0</span>]                    </span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis">                                                                 conv2d_</span>transpose[<span class="string">0</span>][<span class="symbol">0</span>]           </span></span></span><br><span class="line"><span class="emphasis"><span class="strong">__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span></span></span><br><span class="line"><span class="emphasis">conv2d_</span>transpose<span class="emphasis">_2 (Conv2DTrans (None, 256, 256, 3)  576         add[<span class="string">0</span>][<span class="symbol">0</span>]                        </span></span><br><span class="line"><span class="emphasis"><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">softmax (Softmax)               (None, 256, 256, 3)  0           conv2d<span class="emphasis">_transpose_</span>2[<span class="string">0</span>][<span class="symbol">0</span>]         </span></span></span><br><span class="line"><span class="emphasis"><span class="strong">==================================================================================================</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">Total params: 14,799,165</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">Trainable params: 14,799,165</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">Non-trainable params: 0</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span></span></span><br></pre></td></tr></table></figure>
<h2 id="training">2.3. Training</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(</span><br><span class="line">    filepath=<span class="string">&#x27;./model.best.hdf5&#x27;</span>, </span><br><span class="line">    save_weights_only=<span class="literal">False</span>, </span><br><span class="line">    save_best_only=<span class="literal">True</span>,</span><br><span class="line">    monitor=<span class="string">&#x27;val_loss&#x27;</span>)</span><br><span class="line"></span><br><span class="line">hist = fcn_model.fit(</span><br><span class="line">    train_dataset, </span><br><span class="line">    epochs=<span class="number">120</span>,  </span><br><span class="line">    validation_data=test_dataset, </span><br><span class="line">    callbacks=[model_checkpoint_callback])</span><br></pre></td></tr></table></figure>
<h2 id="experiment">2.4. Experiment</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_mask</span>(<span class="params">prediction_mask</span>):</span></span><br><span class="line">    prediction_mask = tf.argmax(prediction_mask, axis=<span class="number">-1</span>)</span><br><span class="line">    prediction_mask = prediction_mask[..., tf.newaxis]</span><br><span class="line">    <span class="keyword">return</span> prediction_mask</span><br><span class="line"></span><br><span class="line">batch = <span class="built_in">next</span>(<span class="built_in">iter</span>(test_dataset))</span><br><span class="line">results = fcn_model.predict(batch)</span><br><span class="line">images, masks = batch</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> image, mask, result <span class="keyword">in</span> <span class="built_in">zip</span>(images, masks, results):</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    image = tf.keras.preprocessing.image.array_to_img(image)</span><br><span class="line">    mask = tf.keras.preprocessing.image.array_to_img(mask)</span><br><span class="line">    output = tf.keras.preprocessing.image.array_to_img(create_mask(result))</span><br><span class="line">    </span><br><span class="line">    image.save(<span class="string">f&#x27;image.<span class="subst">&#123;i:<span class="number">02</span>d&#125;</span>.jpg&#x27;</span>)</span><br><span class="line">    mask.save(<span class="string">f&#x27;mask.<span class="subst">&#123;i:<span class="number">02</span>d&#125;</span>.jpg&#x27;</span>)</span><br><span class="line">    output.save(<span class="string">f&#x27;output.<span class="subst">&#123;i:<span class="number">02</span>d&#125;</span>.jpg&#x27;</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<p>Some results</p>
<table>
<thead>
<tr class="header">
<th>ID</th>
<th>Raw Image</th>
<th>Ground truth</th>
<th>Predicted</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td><img src="/images/2021-04-21/image.01.jpg" /></td>
<td><img src="/images/2021-04-21/mask.01.jpg" /></td>
<td><img src="/images/2021-04-21/output.01.jpg" /></td>
</tr>
<tr class="even">
<td>2</td>
<td><img src="/images/2021-04-21/image.02.jpg" /></td>
<td><img src="/images/2021-04-21/mask.02.jpg" /></td>
<td><img src="/images/2021-04-21/output.02.jpg" /></td>
</tr>
<tr class="odd">
<td>3</td>
<td><img src="/images/2021-04-21/image.03.jpg" /></td>
<td><img src="/images/2021-04-21/mask.03.jpg" /></td>
<td><img src="/images/2021-04-21/output.03.jpg" /></td>
</tr>
<tr class="even">
<td>4</td>
<td><img src="/images/2021-04-21/image.04.jpg" /></td>
<td><img src="/images/2021-04-21/mask.04.jpg" /></td>
<td><img src="/images/2021-04-21/output.04.jpg" /></td>
</tr>
</tbody>
</table>
<p>Read more about FCN <a href="https://arxiv.org/abs/1411.4038">here</a></p>
<h1 id="u-net">3. U-Net</h1>
<h2 id="dataset-1">3.1. Dataset</h2>
<p>I will use the same dataset <code>Oxford-IIIT Pet</code> in this example.</p>
<h2 id="define-the-model-1">3.2. Define the model</h2>
<p>We will need some building block</p>
<ul>
<li>Down sampling block use normal convolution to down sample it inputs</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">down_sample</span>(<span class="params">filters, kernel_size, batch_norm=<span class="literal">True</span></span>):</span></span><br><span class="line">    initializer = tf.random_normal_initializer(<span class="number">0.0</span>, <span class="number">0.02</span>)</span><br><span class="line">    layers = tf.keras.Sequential()</span><br><span class="line">    layers.add(tf.keras.layers.Conv2D(</span><br><span class="line">        filters=filters, </span><br><span class="line">        kernel_size=kernel_size, </span><br><span class="line">        strides=<span class="number">2</span>, </span><br><span class="line">        padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">        kernel_initializer=initializer, </span><br><span class="line">        use_bias=<span class="literal">False</span>)</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> batch_norm:</span><br><span class="line">        layers.add(tf.keras.layers.BatchNormalization())</span><br><span class="line">    </span><br><span class="line">    layers.add(tf.keras.layers.LeakyReLU())</span><br><span class="line">    <span class="keyword">return</span> layers</span><br></pre></td></tr></table></figure>
<ul>
<li>Up sampling block use transpose convolution to up sample it inputs</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">up_sample</span>(<span class="params">filters, kernel_size, dropout=<span class="literal">False</span></span>):</span></span><br><span class="line">    initializer = tf.random_normal_initializer(<span class="number">0.0</span>, <span class="number">0.02</span>)</span><br><span class="line">    layers = tf.keras.Sequential()</span><br><span class="line">    layers.add(tf.keras.layers.Conv2DTranspose(</span><br><span class="line">        filters=filters, </span><br><span class="line">        kernel_size=kernel_size, </span><br><span class="line">        strides=<span class="number">2</span>, </span><br><span class="line">        padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">        kernel_initializer=initializer, </span><br><span class="line">        use_bias=<span class="literal">False</span>)</span><br><span class="line">    )</span><br><span class="line">    layers.add(tf.keras.layers.BatchNormalization())</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> dropout:</span><br><span class="line">        layers.add(tf.keras.layers.Dropout(<span class="number">0.5</span>))</span><br><span class="line">    </span><br><span class="line">    layers.add(tf.keras.layers.ReLU())</span><br><span class="line">    <span class="keyword">return</span> layers</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>Construct the U-Net model</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">down_stack = [down_sample(<span class="number">64</span>, <span class="number">4</span>, batch_norm=<span class="literal">False</span>)]</span><br><span class="line"><span class="keyword">for</span> filters <span class="keyword">in</span> [<span class="number">128</span>, <span class="number">256</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>]:</span><br><span class="line">    down_stack.append(down_sample(filters, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">up_stack = []</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    up_stack.append(up_sample(<span class="number">512</span>, <span class="number">4</span>, dropout=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> filters <span class="keyword">in</span> [<span class="number">512</span>, <span class="number">256</span>, <span class="number">128</span>, <span class="number">64</span>]:</span><br><span class="line">    up_stack.append(up_sample(filters, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inputs = tf.keras.layers.Input(shape=(<span class="number">256</span>, <span class="number">256</span>, <span class="number">3</span>))</span><br><span class="line">x = inputs</span><br><span class="line">skip_layers = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> down <span class="keyword">in</span> down_stack:</span><br><span class="line">    x = down(x)</span><br><span class="line">    skip_layers.append(x)</span><br><span class="line"></span><br><span class="line">skip_layers = <span class="built_in">reversed</span>(skip_layers[:<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># We use skip connection to avoid vanishing gradient problem</span></span><br><span class="line"><span class="keyword">for</span> up, skip_connection <span class="keyword">in</span> <span class="built_in">zip</span>(up_stack, skip_layers):</span><br><span class="line">    x = up(x)</span><br><span class="line">    x = tf.keras.layers.Concatenate()([x, skip_connection])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N_CLASSES = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">initializer = tf.random_normal_initializer(<span class="number">0.0</span>, <span class="number">0.02</span>)</span><br><span class="line">outputs = tf.keras.layers.Conv2DTranspose(</span><br><span class="line">    filters=N_CLASSES, </span><br><span class="line">    kernel_size=<span class="number">3</span>, </span><br><span class="line">    strides=<span class="number">2</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    kernel_initializer=initializer)(x)</span><br><span class="line"></span><br><span class="line">model = tf.keras.models.Model(inputs=inputs, outputs=outputs)</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">True</span>), </span><br><span class="line">    optimizer=tf.keras.optimizers.RMSprop(), </span><br><span class="line">    metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br></pre></td></tr></table></figure>
<h2 id="training-1">3.3. Training</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(</span><br><span class="line">    filepath=<span class="string">&#x27;./unet.&#123;val_loss:.9f&#125;.hdf5&#x27;</span>, </span><br><span class="line">    save_weights_only=<span class="literal">False</span>, </span><br><span class="line">    save_best_only=<span class="literal">True</span>,</span><br><span class="line">    monitor=<span class="string">&#x27;val_loss&#x27;</span>)</span><br><span class="line"></span><br><span class="line">model.fit(train_dataset, epochs=<span class="number">50</span>, validation_data=test_dataset, callbacks=[model_checkpoint_callback])</span><br></pre></td></tr></table></figure>
<h2 id="experiment-1">3.4. Experiment</h2>
<p>Some results</p>
<table>
<thead>
<tr class="header">
<th>ID</th>
<th>Raw Image</th>
<th>Ground truth</th>
<th>Predicted</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td><img src="/images/2021-04-21/unet_image.01.jpg" /></td>
<td><img src="/images/2021-04-21/unet_mask.01.jpg" /></td>
<td><img src="/images/2021-04-21/unet_output.01.jpg" /></td>
</tr>
<tr class="even">
<td>2</td>
<td><img src="/images/2021-04-21/unet_image.02.jpg" /></td>
<td><img src="/images/2021-04-21/unet_mask.02.jpg" /></td>
<td><img src="/images/2021-04-21/unet_output.02.jpg" /></td>
</tr>
<tr class="odd">
<td>3</td>
<td><img src="/images/2021-04-21/unet_image.03.jpg" /></td>
<td><img src="/images/2021-04-21/unet_mask.03.jpg" /></td>
<td><img src="/images/2021-04-21/unet_output.03.jpg" /></td>
</tr>
<tr class="even">
<td>4</td>
<td><img src="/images/2021-04-21/unet_image.04.jpg" /></td>
<td><img src="/images/2021-04-21/unet_mask.04.jpg" /></td>
<td><img src="/images/2021-04-21/unet_output.04.jpg" /></td>
</tr>
</tbody>
</table>
<h2 id="how-it-works">3.5. How it works?</h2>
<p>To understand more about vanishing gradient, click <a href="https://en.wikipedia.org/wiki/Vanishing_gradient_problem">here</a></p>
<p>Read more about <a href="https://arxiv.org/abs/1505.04597">U-Net</a></p>
<h1 id="u-net-with-pretrain">4. U-Net With Pretrain</h1>
<h2 id="dataset-2">4.1. Dataset</h2>
<p>I will use the same dataset <code>Oxford-IIIT Pet</code> in this example.</p>
<h2 id="define-model">4.2. Define model</h2>
<ul>
<li>The pretrain model <a href="https://keras.io/api/applications/mobilenet/#mobilenetv2-function">MobileNetV2</a> will be used in this example.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pretrain_model = tf.keras.applications.MobileNetV2(</span><br><span class="line">    input_shape=(<span class="number">256</span>, <span class="number">256</span>, <span class="number">3</span>), </span><br><span class="line">    include_top=<span class="literal">False</span>, </span><br><span class="line">    weights=<span class="string">&#x27;imagenet&#x27;</span>)</span><br><span class="line"></span><br><span class="line">target_values = [</span><br><span class="line">    <span class="string">&#x27;block_1_expand_relu&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;block_3_expand_relu&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;block_6_expand_relu&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;block_13_expand_relu&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;block_16_project&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">layers = [pretrain_model.get_layer(layer).output <span class="keyword">for</span> layer <span class="keyword">in</span> target_values]</span><br><span class="line"></span><br><span class="line">down_stack = tf.keras.models.Model(inputs=pretrain_model.<span class="built_in">input</span>, outputs=layers)</span><br><span class="line">down_stack.trainable = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">up_stack = []</span><br><span class="line"><span class="keyword">for</span> filters <span class="keyword">in</span> [<span class="number">512</span>, <span class="number">256</span>, <span class="number">128</span>, <span class="number">64</span>]:</span><br><span class="line">    up_stack.append(up_sample(filters, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">inputs = tf.keras.layers.Input(shape=(<span class="number">256</span>, <span class="number">256</span>, <span class="number">3</span>))</span><br><span class="line">x = inputs</span><br><span class="line"></span><br><span class="line">skip_layers = down_stack(x)</span><br><span class="line"></span><br><span class="line">x = skip_layers[<span class="number">-1</span>]</span><br><span class="line">skip_layers = <span class="built_in">reversed</span>(skip_layers[:<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> up, skip_connection <span class="keyword">in</span> <span class="built_in">zip</span>(up_stack, skip_layers):</span><br><span class="line">    x = up(x)</span><br><span class="line">    x = tf.keras.layers.Concatenate()([x, skip_connection])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N_CLASSES = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">initializer = tf.random_normal_initializer(<span class="number">0.0</span>, <span class="number">0.02</span>)</span><br><span class="line">outputs = tf.keras.layers.Conv2DTranspose(</span><br><span class="line">    filters=N_CLASSES, </span><br><span class="line">    kernel_size=<span class="number">3</span>, </span><br><span class="line">    strides=<span class="number">2</span>, </span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>, </span><br><span class="line">    kernel_initializer=initializer)(x)</span><br><span class="line"></span><br><span class="line">model = tf.keras.models.Model(inputs=inputs, outputs=outputs)</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(</span><br><span class="line">    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">True</span>), </span><br><span class="line">    optimizer=tf.keras.optimizers.RMSprop(), </span><br><span class="line">    metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br></pre></td></tr></table></figure>
<h2 id="training-2">4.3. Training</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(</span><br><span class="line">    filepath=<span class="string">&#x27;./unet.pretrain.&#123;val_loss:.9f&#125;.hdf5&#x27;</span>, </span><br><span class="line">    save_weights_only=<span class="literal">False</span>, </span><br><span class="line">    save_best_only=<span class="literal">True</span>,</span><br><span class="line">    monitor=<span class="string">&#x27;val_loss&#x27;</span>)</span><br><span class="line"></span><br><span class="line">hist = model.fit(</span><br><span class="line">    train_dataset, </span><br><span class="line">    epochs=<span class="number">50</span>, </span><br><span class="line">    validation_data=test_dataset, </span><br><span class="line">    callbacks=[model_checkpoint_callback])</span><br></pre></td></tr></table></figure>
<h2 id="experiment-2">4.4. Experiment</h2>
<p>Some results</p>
<table>
<thead>
<tr class="header">
<th>ID</th>
<th>Raw Image</th>
<th>Ground truth</th>
<th>Predicted</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td><img src="/images/2021-04-21/image.01.jpg" /></td>
<td><img src="/images/2021-04-21/mask.01.jpg" /></td>
<td><img src="/images/2021-04-21/pretrain_output.01.jpg" /></td>
</tr>
<tr class="even">
<td>2</td>
<td><img src="/images/2021-04-21/image.02.jpg" /></td>
<td><img src="/images/2021-04-21/mask.02.jpg" /></td>
<td><img src="/images/2021-04-21/pretrain_output.02.jpg" /></td>
</tr>
<tr class="odd">
<td>3</td>
<td><img src="/images/2021-04-21/image.03.jpg" /></td>
<td><img src="/images/2021-04-21/mask.03.jpg" /></td>
<td><img src="/images/2021-04-21/pretrain_output.03.jpg" /></td>
</tr>
<tr class="even">
<td>4</td>
<td><img src="/images/2021-04-21/image.04.jpg" /></td>
<td><img src="/images/2021-04-21/mask.04.jpg" /></td>
<td><img src="/images/2021-04-21/pretrain_output.04.jpg" /></td>
</tr>
</tbody>
</table>
<h1 id="mask-rcnn">5. Mask-RCNN</h1>
<h2 id="load-pretrain-model-from-tensorflow-hub">5.1. Load pretrain model from tensorflow hub</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow_hub <span class="keyword">as</span> hub</span><br><span class="line"></span><br><span class="line">MODEL_PATH = (<span class="string">&#x27;https://tfhub.dev/tensorflow/mask_rcnn/inception_resnet_v2_1024x1024/1&#x27;</span>)</span><br><span class="line">mask_rcnn = hub.load(MODEL_PATH)</span><br></pre></td></tr></table></figure>
<h2 id="install-visualization-utils-from-tensorflow-models">5.2. Install visualization utils from tensorflow models</h2>
<ul>
<li>Shell script</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone ‚Äì-depth 1 https://github.com/tensorflow/models</span><br><span class="line">sudo apt install -y protobuf-compiler</span><br><span class="line">cd models/research</span><br><span class="line">protoc object_detection/protos/*.proto --python_out=.</span><br><span class="line">cp object_detection/packages/tf2/setup.py .</span><br><span class="line">python -m pip install -q .</span><br></pre></td></tr></table></figure>
<ul>
<li>Import visualization package</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> object_detection.utils <span class="keyword">import</span> ops</span><br><span class="line"><span class="keyword">from</span> object_detection.utils <span class="keyword">import</span> visualization_utils <span class="keyword">as</span> viz</span><br><span class="line"><span class="keyword">from</span> object_detection.utils.label_map_util <span class="keyword">import</span> create_category_index_from_labelmap</span><br></pre></td></tr></table></figure>
<h2 id="experiment-3">5.3. Experiment</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">results = mask_rcnn(image)</span><br><span class="line">model_output = &#123;k: v.numpy() <span class="keyword">for</span> k, v <span class="keyword">in</span> results.items()&#125;</span><br><span class="line"></span><br><span class="line">detection_masks = model_output[<span class="string">&#x27;detection_masks&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">detection_masks = tf.convert_to_tensor(detection_masks)</span><br><span class="line"></span><br><span class="line">detection_boxes = model_output[<span class="string">&#x27;detection_boxes&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">detection_boxes = tf.convert_to_tensor(detection_boxes)</span><br><span class="line"></span><br><span class="line">detection_masks_reframed = ops.reframe_box_masks_to_image_masks(</span><br><span class="line">    detection_masks, </span><br><span class="line">    detection_boxes, </span><br><span class="line">    image.shape[<span class="number">1</span>], </span><br><span class="line">    image.shape[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">detection_masks_reframed = tf.cast(detection_masks_reframed &gt; <span class="number">0.5</span>, tf.uint8)</span><br><span class="line"></span><br><span class="line">model_output[<span class="string">&#x27;detection_masks_reframed&#x27;</span>] = detection_masks_reframed.numpy()</span><br><span class="line"></span><br><span class="line">boxes = model_output[<span class="string">&#x27;detection_boxes&#x27;</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">classes = model_output[<span class="string">&#x27;detection_classes&#x27;</span>][<span class="number">0</span>].astype(<span class="string">&#x27;int&#x27;</span>)</span><br><span class="line">scores = model_output[<span class="string">&#x27;detection_scores&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">masks = model_output[<span class="string">&#x27;detection_masks_reframed&#x27;</span>]</span><br><span class="line"></span><br><span class="line">image_with_mask = image.copy()</span><br><span class="line">viz.visualize_boxes_and_labels_on_image_array(</span><br><span class="line">    image=image_with_mask[<span class="number">0</span>], </span><br><span class="line">    boxes=boxes,</span><br><span class="line">    classes=classes,</span><br><span class="line">    scores=scores,</span><br><span class="line">    category_index=CATEGORY_IDX,</span><br><span class="line">    use_normalized_coordinates=<span class="literal">True</span>,</span><br><span class="line">    max_boxes_to_draw=<span class="number">200</span>,</span><br><span class="line">    min_score_thresh=<span class="number">0.30</span>,</span><br><span class="line">    agnostic_mode=<span class="literal">False</span>,</span><br><span class="line">    instance_masks=masks,</span><br><span class="line">    line_thickness=<span class="number">5</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">24</span>, <span class="number">32</span>))</span><br><span class="line">plt.imshow(image_with_mask[<span class="number">0</span>])</span><br><span class="line">plt.savefig(<span class="string">f&#x27;maskrcnn_output.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>Some results</li>
</ul>
<table>
<thead>
<tr class="header">
<th>ID</th>
<th>Raw Image</th>
<th>Ground truth</th>
<th>Predicted</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td><img src="/images/2021-04-21/image.01.jpg" /></td>
<td><img src="/images/2021-04-21/mask.01.jpg" /></td>
<td><img width="256" height="256" src="/images/2021-04-21/maskrcnn_output.01.jpg" /></td>
</tr>
<tr class="even">
<td>2</td>
<td><img src="/images/2021-04-21/image.02.jpg" /></td>
<td><img src="/images/2021-04-21/mask.02.jpg" /></td>
<td><img width="256" height="256" src="/images/2021-04-21/maskrcnn_output.02.jpg" /></td>
</tr>
<tr class="odd">
<td>3</td>
<td><img src="/images/2021-04-21/image.03.jpg" /></td>
<td><img src="/images/2021-04-21/mask.03.jpg" /></td>
<td><img width="256" height="256" src="/images/2021-04-21/maskrcnn_output.03.jpg" /></td>
</tr>
<tr class="even">
<td>4</td>
<td><img src="/images/2021-04-21/image.04.jpg" /></td>
<td><img src="/images/2021-04-21/mask.04.jpg" /></td>
<td><img width="256" height="256" src="/images/2021-04-21/maskrcnn_output.04.jpg" /></td>
</tr>
</tbody>
</table>
<h2 id="see-also">5.4. See also</h2>
<ul>
<li>https://tfhub.dev/tensorflow/mask_rcnn/inception_resnet_v2_1024x1024/1</li>
<li>https://arxiv.org/abs/1703.06870</li>
</ul>
]]></content>
      <categories>
        <category>Machine Learning</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>CNN</tag>
        <tag>Computer Vision</tag>
        <tag>Deep Learning</tag>
        <tag>Tensorflow</tag>
        <tag>Keras</tag>
        <tag>Machine Learning</tag>
        <tag>Convolution Neural Network</tag>
        <tag>Image Segmentation</tag>
        <tag>Oxford-IIIT Pet</tag>
        <tag>FCN</tag>
        <tag>U-Net</tag>
        <tag>Mask-RCNN</tag>
        <tag>MobileNet-V2</tag>
        <tag>Pretrain</tag>
        <tag>Fully Convolution Network</tag>
      </tags>
  </entry>
</search>
